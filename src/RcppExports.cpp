// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/svycoxme.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// C_calc_S0_S1X
Rcpp::List C_calc_S0_S1X(Rcpp::NumericMatrix& time_start, Rcpp::NumericMatrix& time_stop, Rcpp::NumericMatrix& exp_risk_score, Rcpp::NumericMatrix& X);
RcppExport SEXP _svycoxme_C_calc_S0_S1X(SEXP time_startSEXP, SEXP time_stopSEXP, SEXP exp_risk_scoreSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type time_start(time_startSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type time_stop(time_stopSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type exp_risk_score(exp_risk_scoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(C_calc_S0_S1X(time_start, time_stop, exp_risk_score, X));
    return rcpp_result_gen;
END_RCPP
}
// C_calc_ui
Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start, Rcpp::NumericMatrix& time_stop, Rcpp::NumericMatrix& stat, Rcpp::NumericMatrix& weights, Rcpp::NumericMatrix& exp_risk_score, Rcpp::NumericMatrix& S0, Rcpp::NumericMatrix& S1_X, Rcpp::NumericMatrix& X, bool weighted);
RcppExport SEXP _svycoxme_C_calc_ui(SEXP time_startSEXP, SEXP time_stopSEXP, SEXP statSEXP, SEXP weightsSEXP, SEXP exp_risk_scoreSEXP, SEXP S0SEXP, SEXP S1_XSEXP, SEXP XSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type time_start(time_startSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type time_stop(time_stopSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type stat(statSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type exp_risk_score(exp_risk_scoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type S1_X(S1_XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(C_calc_ui(time_start, time_stop, stat, weights, exp_risk_score, S0, S1_X, X, weighted));
    return rcpp_result_gen;
END_RCPP
}
// C_draw_event_times
Rcpp::List C_draw_event_times(Rcpp::IntegerVector id, Rcpp::NumericVector start_time, Rcpp::NumericVector end_time, Rcpp::IntegerVector status, Rcpp::NumericMatrix X, Rcpp::NumericVector risk_score, Rcpp::NumericVector baseline_hazard, Rcpp::NumericVector baseline_hazard_start, double origin, int single, int maximum_events);
RcppExport SEXP _svycoxme_C_draw_event_times(SEXP idSEXP, SEXP start_timeSEXP, SEXP end_timeSEXP, SEXP statusSEXP, SEXP XSEXP, SEXP risk_scoreSEXP, SEXP baseline_hazardSEXP, SEXP baseline_hazard_startSEXP, SEXP originSEXP, SEXP singleSEXP, SEXP maximum_eventsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type end_time(end_timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type status(statusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type risk_score(risk_scoreSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type baseline_hazard(baseline_hazardSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type baseline_hazard_start(baseline_hazard_startSEXP);
    Rcpp::traits::input_parameter< double >::type origin(originSEXP);
    Rcpp::traits::input_parameter< int >::type single(singleSEXP);
    Rcpp::traits::input_parameter< int >::type maximum_events(maximum_eventsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_draw_event_times(id, start_time, end_time, status, X, risk_score, baseline_hazard, baseline_hazard_start, origin, single, maximum_events));
    return rcpp_result_gen;
END_RCPP
}
// C_rpexp
Rcpp::NumericVector C_rpexp(int n, Rcpp::NumericVector rate, Rcpp::NumericVector t, double start);
static SEXP _svycoxme_C_rpexp_try(SEXP nSEXP, SEXP rateSEXP, SEXP tSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rpexp(n, rate, t, start));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _svycoxme_C_rpexp(SEXP nSEXP, SEXP rateSEXP, SEXP tSEXP, SEXP startSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_svycoxme_C_rpexp_try(nSEXP, rateSEXP, tSEXP, startSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _svycoxme_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _svycoxme_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::NumericVector(*C_rpexp)(int,Rcpp::NumericVector,Rcpp::NumericVector,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _svycoxme_RcppExport_registerCCallable() { 
    R_RegisterCCallable("svycoxme", "_svycoxme_C_rpexp", (DL_FUNC)_svycoxme_C_rpexp_try);
    R_RegisterCCallable("svycoxme", "_svycoxme_RcppExport_validate", (DL_FUNC)_svycoxme_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_svycoxme_C_calc_S0_S1X", (DL_FUNC) &_svycoxme_C_calc_S0_S1X, 4},
    {"_svycoxme_C_calc_ui", (DL_FUNC) &_svycoxme_C_calc_ui, 9},
    {"_svycoxme_C_draw_event_times", (DL_FUNC) &_svycoxme_C_draw_event_times, 11},
    {"_svycoxme_C_rpexp", (DL_FUNC) &_svycoxme_C_rpexp, 4},
    {"_svycoxme_rcpp_hello_world", (DL_FUNC) &_svycoxme_rcpp_hello_world, 0},
    {"_svycoxme_RcppExport_registerCCallable", (DL_FUNC) &_svycoxme_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_svycoxme(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
