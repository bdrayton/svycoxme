hit = true_coef >= lower & true_coef <= upper)
df3 %>%
group_by(covariate, start) %>%
summarise(mean(hit))
one_rep <- function(...){
# get data
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = 300, nk = 10,
n = 3000),
coefficients = true_coefs,
random_effect_variance = c(M=1)
)
des <- svydesign(~M, data = the_data, weights = ~1)
des_bootstrap <- as.svrepdesign(des, type = "bootstrap", replicates = 100)
svycoxme_fit_bootstrap_mean <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "mean")
svycoxme_fit_bootstrap_first <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "first")
list(
coef = coef(svycoxme_fit_bootstrap_mean),
var_mean = diag(vcov(svycoxme_fit_bootstrap_first)),
var_first = diag(vcov(svycoxme_fit_bootstrap_mean)))
}
cl <- parallel::makeCluster(4)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep", "try_one_rep", "svycoxme_path", "myTryCatch", "true_coefs"))
parallel::clusterSetRNGStream(cl, iseed = 9847563)
parallel::clusterEvalQ(cl, {
devtools::load_all(svycoxme_path)
})
# run_one_pop(param_combos_list[[1]])
all_fits <- parallel::parLapplyLB(cl, 1:100, try_one_rep)
parallel::stopCluster(cl)
res <- all_fits
error_messages <- lapply(res, "[[", "error")
warning_messages <- lapply(res, "[[", "warning")
returned_values <- lapply(res, "[[", "value")
is.error <- sapply(error_messages, inherits, "error")
is.warning <- sapply(warning_messages, inherits, "warning")
table(is.error) |> prop.table()
table(is.warning)
results_with_warnings <- res[is.warning]
non_error_fits <- returned_values[!is.error]
df <- plyr::ldply(non_error_fits, function(one_fit){
data.frame(start = rep(c("mean", "first"), each = 3),
var = c(one_fit$var_mean, one_fit$var_first),
coef = rep(names(one_fit$var_mean), 2))
})
head(df)
library(tidyverse)
df %>%
ggplot(aes(var, colour = start)) + geom_density()+
facet_grid(rows = vars(coef))
df2 <- df %>%
group_by(coef, start) %>%
mutate(rep = row_number()) %>%
pivot_wider(names_from = "start", values_from = "var")
df2 <- cbind(df2, data.frame(warning = rep(is.warning[!is.error], each = 3)))
df2 %>%
ggplot(aes(mean, first, colour = coef, shape = warning)) +
geom_point() + geom_abline()
df2 %>%
filter(coef == 'X1') %>%
ggplot(aes(mean, first, colour = warning)) +
geom_point() + geom_abline()
get_results <- function(one_fit){
data.frame(start = rep(c("mean", "first"), each = 3),
var = c(one_fit$var_mean, one_fit$var_first),
covariate = rep(names(one_fit$var_mean), 2),
coef = rep(one_fit$coef, 2))
}
get_results(non_error_fits[[1]])
df <- plyr::ldply(non_error_fits, get_results)
df2 <- df %>%
mutate(true_coef = rep(true_coefs, sum(!is.error) * 2))
df3 <- df2 %>%
mutate(lower = coef - 1.96 * sqrt(var),
upper = coef + 1.96 * sqrt(var),
hit = true_coef >= lower & true_coef <= upper)
df3 %>%
group_by(covariate, start) %>%
summarise(mean(hit))
View(the_data)
unique_clusters <- unique(the_data$M)
resample <- sample(unique_clusters, 100, replace = TRUE)
table(resample)
resample <- sample(unique_clusters, 300, replace = TRUE)
table(resample)
resampled_data = data.frame(M = resample) %>%
left_join(the_data, by = "M")
first_fit <- coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = the_data)
first_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = the_data)
second_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = respampled_data)
second_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = resampled_data)
coef(first_fit)
coef(second_fit)
betas = matrix(nrow = 50, ncol = 3)
betas = matrix(nrow = 50, ncol = 3)
for(i in 1:50){
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
left_join(the_data, by = "M")
temp_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = resampled_data)
betas[i, ] <- coef(temp_fit)
}
colMeans(betas)
apply(betas, 2, sd)
apply(betas, 2, var)
des <- svydesign(~M, data = the_data, weights = ~1)
des_bootstrap <- as.svrepdesign(des, type = "bootstrap", replicates = 100)
svycoxme_fit_bootstrap_mean <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "mean")
svycoxme_fit_bootstrap_first <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "first")
list(
coef = coef(svycoxme_fit_bootstrap_mean),
var_mean = diag(vcov(svycoxme_fit_bootstrap_first)),
var_first = diag(vcov(svycoxme_fit_bootstrap_mean)))
apply(betas, 2, var)
one_rep <- function(...){
# get data
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = 300, nk = 10,
n = 3000),
coefficients = true_coefs,
random_effect_variance = c(M=1)
)
des <- svydesign(~M, data = the_data, weights = ~1)
des_bootstrap <- as.svrepdesign(des, type = "bootstrap", replicates = 100)
svycoxme_fit_bootstrap_mean <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "mean")
svycoxme_fit_bootstrap_first <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "first")
first_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = the_data)
unique_clusters <- unique(the_data$M)
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
left_join(the_data, by = "M")
betas = matrix(nrow = 50, ncol = 3)
for(i in 1:50){
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
left_join(the_data, by = "M")
temp_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = resampled_data)
betas[i, ] <- coef(temp_fit)
}
list(
coef = coef(svycoxme_fit_bootstrap_mean),
var_mean = diag(vcov(svycoxme_fit_bootstrap_first)),
var_first = diag(vcov(svycoxme_fit_bootstrap_mean)),
var_boot = apply(betas, 2, var))
}
myTryCatch <- function(expr) {
warn <- err <- NULL
value <- withCallingHandlers(
tryCatch(expr, error=function(e) {
err <<- e
NULL
}), warning=function(w) {
warn <<- w
invokeRestart("muffleWarning")
})
#drop call from error
err$call <- NULL
list(value=value, warning=warn, error=err)
}
try_one_rep <- function(specs){
stream <- .Random.seed
r <- myTryCatch(one_rep(specs))
attr(r, "stream") <- stream
attr(r, "specs") <- specs
r
}
try_one_rep(specs = list())
cl <- parallel::makeCluster(4)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep", "try_one_rep", "svycoxme_path", "myTryCatch", "true_coefs"))
parallel::clusterSetRNGStream(cl, iseed = 9847563)
parallel::clusterEvalQ(cl, {
devtools::load_all(svycoxme_path)
})
# run_one_pop(param_combos_list[[1]])
all_fits <- parallel::parLapplyLB(cl, 1:100, try_one_rep)
parallel::stopCluster(cl)
res <- all_fits
error_messages <- lapply(res, "[[", "error")
warning_messages <- lapply(res, "[[", "warning")
returned_values <- lapply(res, "[[", "value")
is.error <- sapply(error_messages, inherits, "error")
is.warning <- sapply(warning_messages, inherits, "warning")
table(is.error) |> prop.table()
table(is.warning)
res[[1]]
one_rep <- function(...){
# get data
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = 300, nk = 10,
n = 3000),
coefficients = true_coefs,
random_effect_variance = c(M=1)
)
des <- svydesign(~M, data = the_data, weights = ~1)
des_bootstrap <- as.svrepdesign(des, type = "bootstrap", replicates = 100)
svycoxme_fit_bootstrap_mean <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "mean")
svycoxme_fit_bootstrap_first <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "first")
first_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = the_data)
unique_clusters <- unique(the_data$M)
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
left_join(the_data, by = "M")
betas = matrix(nrow = 50, ncol = 3)
for(i in 1:50){
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
dplyr::left_join(the_data, by = "M")
temp_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = resampled_data)
betas[i, ] <- coef(temp_fit)
}
list(
coef = coef(svycoxme_fit_bootstrap_mean),
var_mean = diag(vcov(svycoxme_fit_bootstrap_first)),
var_first = diag(vcov(svycoxme_fit_bootstrap_mean)),
var_boot = apply(betas, 2, var))
}
myTryCatch <- function(expr) {
warn <- err <- NULL
value <- withCallingHandlers(
tryCatch(expr, error=function(e) {
err <<- e
NULL
}), warning=function(w) {
warn <<- w
invokeRestart("muffleWarning")
})
#drop call from error
err$call <- NULL
list(value=value, warning=warn, error=err)
}
try_one_rep <- function(specs){
stream <- .Random.seed
r <- myTryCatch(one_rep(specs))
attr(r, "stream") <- stream
attr(r, "specs") <- specs
r
}
cl <- parallel::makeCluster(4)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep", "try_one_rep", "svycoxme_path", "myTryCatch", "true_coefs"))
parallel::clusterSetRNGStream(cl, iseed = 9847563)
parallel::clusterEvalQ(cl, {
devtools::load_all(svycoxme_path)
})
# run_one_pop(param_combos_list[[1]])
all_fits <- parallel::parLapplyLB(cl, 1:4, try_one_rep)
all_fits
one_rep <- function(...){
# get data
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = 300, nk = 10,
n = 3000),
coefficients = true_coefs,
random_effect_variance = c(M=1)
)
des <- svydesign(~M, data = the_data, weights = ~1)
des_bootstrap <- as.svrepdesign(des, type = "bootstrap", replicates = 100)
svycoxme_fit_bootstrap_mean <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "mean")
svycoxme_fit_bootstrap_first <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "first")
first_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = the_data)
unique_clusters <- unique(the_data$M)
betas = matrix(nrow = 50, ncol = 3)
for(i in 1:50){
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
dplyr::left_join(the_data, by = "M")
temp_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = resampled_data)
betas[i, ] <- coef(temp_fit)
}
list(
coef = coef(svycoxme_fit_bootstrap_mean),
var_mean = diag(vcov(svycoxme_fit_bootstrap_first)),
var_first = diag(vcov(svycoxme_fit_bootstrap_mean)),
var_boot = apply(betas, 2, var))
}
myTryCatch <- function(expr) {
warn <- err <- NULL
value <- withCallingHandlers(
tryCatch(expr, error=function(e) {
err <<- e
NULL
}), warning=function(w) {
warn <<- w
invokeRestart("muffleWarning")
})
#drop call from error
err$call <- NULL
list(value=value, warning=warn, error=err)
}
try_one_rep <- function(specs){
stream <- .Random.seed
r <- myTryCatch(one_rep(specs))
attr(r, "stream") <- stream
attr(r, "specs") <- specs
r
}
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep", "try_one_rep", "svycoxme_path", "myTryCatch", "true_coefs"))
# run_one_pop(param_combos_list[[1]])
all_fits <- parallel::parLapplyLB(cl, 1:4, try_one_rep)
all_fits
# run_one_pop(param_combos_list[[1]])
all_fits <- parallel::parLapplyLB(cl, 1:100, try_one_rep)
parallel::stopCluster(cl)
res <- all_fits
res[[1]]
error_messages <- lapply(res, "[[", "error")
warning_messages <- lapply(res, "[[", "warning")
returned_values <- lapply(res, "[[", "value")
is.error <- sapply(error_messages, inherits, "error")
is.warning <- sapply(warning_messages, inherits, "warning")
table(is.error) |> prop.table()
table(is.warning)
results_with_warnings <- res[is.warning]
non_error_fits <- returned_values[!is.error]
df <- plyr::ldply(non_error_fits, function(one_fit){
data.frame(start = rep(c("mean", "first"), each = 3),
var = c(one_fit$var_mean, one_fit$var_first),
coef = rep(names(one_fit$var_mean), 2))
})
head(df)
library(tidyverse)
non_error_fits[[1]] |> names()
df <- plyr::ldply(non_error_fits, function(one_fit){
data.frame(start = rep(c("mean", "first", "boot"), each = 3),
var = c(one_fit$var_mean, one_fit$var_first, one_fit$var_boot),
coef = rep(names(one_fit$var_mean), 2))
})
df <- plyr::ldply(non_error_fits, function(one_fit){
data.frame(start = rep(c("mean", "first", "boot"), each = 3),
var = c(one_fit$var_mean, one_fit$var_first, one_fit$var_boot),
coef = rep(names(one_fit$var_mean), 3))
})
head(df)
library(tidyverse)
df %>%
ggplot(aes(var, colour = start)) + geom_density()+
facet_grid(rows = vars(coef))
one_rep <- function(...){
# get data
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = 300, nk = 10,
n = 3000),
coefficients = true_coefs,
random_effect_variance = c(M=1)
)
des <- svydesign(~M, data = the_data, weights = ~1)
des_bootstrap <- as.svrepdesign(des, type = "bootstrap", replicates = 100)
svycoxme_fit_bootstrap_mean <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "mean",
control = coxme::coxme.control(eps = 1e-12,
toler.chol = 1e-13,
optpar = list(method = "BFGS",
control=list(reltol = 1e-11)),
iter.max = 100, inner.iter = 100))
svycoxme_fit_bootstrap_first <- svycoxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
des = des_bootstrap, starts = "first",
control = coxme::coxme.control(eps = 1e-12,
toler.chol = 1e-13,
optpar = list(method = "BFGS",
control=list(reltol = 1e-11)),
iter.max = 100, inner.iter = 100))
first_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = the_data)
unique_clusters <- unique(the_data$M)
betas = matrix(nrow = 50, ncol = 3)
for(i in 1:50){
resample <- sample(unique_clusters, 300, replace = TRUE)
resampled_data = data.frame(M = resample) %>%
dplyr::left_join(the_data, by = "M")
temp_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|M),
data = resampled_data,
control = coxme::coxme.control(eps = 1e-12,
toler.chol = 1e-13,
optpar = list(method = "BFGS",
control=list(reltol = 1e-11)),
iter.max = 100, inner.iter = 100))
betas[i, ] <- coef(temp_fit)
}
list(
coef = coef(svycoxme_fit_bootstrap_mean),
var_mean = diag(vcov(svycoxme_fit_bootstrap_first)),
var_first = diag(vcov(svycoxme_fit_bootstrap_mean)),
var_boot = apply(betas, 2, var))
}
myTryCatch <- function(expr) {
warn <- err <- NULL
value <- withCallingHandlers(
tryCatch(expr, error=function(e) {
err <<- e
NULL
}), warning=function(w) {
warn <<- w
invokeRestart("muffleWarning")
})
#drop call from error
err$call <- NULL
list(value=value, warning=warn, error=err)
}
try_one_rep <- function(specs){
stream <- .Random.seed
r <- myTryCatch(one_rep(specs))
attr(r, "stream") <- stream
attr(r, "specs") <- specs
r
}
try_one_rep(specs = list())
devtools::load_all(".")
devtools::load_all(".")
svrVar
survey::svrVar()
survey::svrVar
devtools::load_all(".")
# generate population
nk <- 10
specs <- list()
specs$theta <- 1
specs$n_clusters = 5000
k = specs$n_clusters
specs$n_clusters_in_sample = 100
true_coefs <- c(X1 = 1, X2 = -0.7, X3 = 0.5)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=specs$theta)
)
pop <- dplyr::mutate(the_data, id = M)
# sample from it
# one cluster sample
samp_cluster_ids <- unique(pop$id)[sample.int(specs$n_clusters, specs$n_clusters_in_samp)]
my_samp <- pop[pop$id %in% samp_cluster_ids, ]
# for memory reasons
rm(list = c('pop', 'the_data'))
my_samp$prob <- (specs$n_clusters_in_samp/specs$n_clusters)
my_samp$weights <- my_samp$prob^-1
# rescale_weights
my_samp$rweights <- (1/my_samp$prob)/mean(1/my_samp$prob)
my_samp <- my_samp[order(my_samp$stat_time), ]
# the regular fit.
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|id), data = my_samp, weights = rweights)
# define design, add ui
my_des <- svydesign(~id, weights = ~weights, data = my_samp)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
my_des_bootstrap <- as.svrepdesign(my_des, type = "bootstrap")
svycoxme_fit_bootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_bootstrap, return.replicates = TRUE)
svycoxme_fit_bootstrap$replicates_theta
svycoxme_fit_bootstrap$replicates
treps <- svycoxme_fit_bootstrap$replicates_theta
plot(density(treps))
summary(treps)
coxme::VarCorr(svycoxme_fit_bootstrap)
devtools::load_all(".")
