linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf, x = emp_se))
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf, colour = n_clusters_in_sample), inherit.aes = FALSE)
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
scale_fill_manual(values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/meanse_10_scs.pdf")
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
dev.off()
summary_stats_sub = filter(summary_stats, cluster_size == 30, n_clusters_in_sample != 1000)
coverage_summary2 %>%
filter(cluster_size == 30) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
summary_stats_sub = filter(summary_stats, cluster_size == 10, n_clusters_in_sample != 1000)
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/meanse_10_scs.pdf")
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
dev.off()
summary_stats_sub = filter(summary_stats, cluster_size == 30, n_clusters_in_sample != 1000)
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/meanse_30_scs.pdf")
coverage_summary2 %>%
filter(cluster_size == 30) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.1)
dev.off()
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.2)
summary_stats_sub = filter(summary_stats, cluster_size == 10, n_clusters_in_sample != 1000)
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/meanse_10_scs.pdf")
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.2)
dev.off()
summary_stats_sub = filter(summary_stats, cluster_size == 30, n_clusters_in_sample != 1000)
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/meanse_30_scs.pdf")
coverage_summary2 %>%
filter(cluster_size == 30) %>%
ggplot(aes(estimated_se, method,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.0), shape = 1) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
labs(y = "Variance estimator", x = "Mean standard error") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0),
panel.grid.minor = element_blank()) +
scale_colour_manual(name = "Clusters sampled", values = cbPalette) +
scale_fill_manual(name = "Clusters sampled", values = cbPalette) +
geom_vline(data = summary_stats_sub,
aes(xintercept = emp_se, colour = n_clusters_in_sample),
linetype = 2) +
geom_rect(data = summary_stats_sub,
aes(xmin = emp_se_lower, xmax = emp_se_upper, ymin = 0, ymax = Inf,
fill = n_clusters_in_sample), inherit.aes = FALSE, alpha = 0.2)
dev.off()
coverage_lims = range(c(coverage_summary2$coverage_lower, coverage_summary2$coverage_upper))
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/coverage_10_scs2.pdf")
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(coverage, method, xmin = coverage_lower, xmax = coverage_upper,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0.00, position = position_dodge(width = 0.5)) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
geom_vline(xintercept = 0.95, linetype = 2) +
labs(y = "Variance estimator", x = "Coverage", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
xlim(coverage_lims)
dev.off()
cairo_pdf(file = "C:/Users/bdra011/Dropbox (Uni of Auckland)/Apps/Overleaf/Thesis/images/coverage_30_scs2.pdf")
coverage_summary2 %>%
filter(cluster_size == 30) %>%
ggplot(aes(coverage, method, xmin = coverage_lower, xmax = coverage_upper,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0.00, position = position_dodge(width = 0.5)) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
geom_vline(xintercept = 0.95, linetype = 2) +
labs(y = "Variance estimator", x = "Coverage", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
xlim(coverage_lims)
dev.off()
coverage_summary2 %>%
filter(cluster_size == 10) %>%
ggplot(aes(coverage, method, xmin = coverage_lower, xmax = coverage_upper,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0.00, position = position_dodge(width = 0.5)) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
geom_vline(xintercept = 0.95, linetype = 2) +
labs(y = "Variance estimator", x = "Coverage", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
xlim(coverage_lims)
coverage_summary2 %>%
filter(cluster_size == 30) %>%
ggplot(aes(coverage, method, xmin = coverage_lower, xmax = coverage_upper,
colour = n_clusters_in_sample)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_errorbar(width = 0.00, position = position_dodge(width = 0.5)) +
facet_grid(cols = vars(theta), rows = vars(covariate), labeller = label_parsed) +
geom_vline(xintercept = 0.95, linetype = 2) +
labs(y = "Variance estimator", x = "Coverage", colour = "Clusters sampled") +
theme_bw() + theme(legend.position = "bottom", strip.text.y = element_text(angle = 0)) +
scale_colour_manual(values = cbPalette) +
xlim(coverage_lims)
survival:::residuals.coxph
R.home('include')
survival::coxph.getdata
survival:::coxph.getdata
devtools::load_all(".")
make_parts.coxme
n = 1000
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
library(survival)
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
dset$strat = rep(c(1:2), n/2)
# can coxme have strata
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M) + strata(S),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
# can coxme have strata
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M) + strata(strat),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
coxmefit$strata
coxmefit$method
coxmefit$ties
coxmefit$terms
coxmefit$linear.predictor
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
n = 100
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
n = 100
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
residuals.coxme(coxmefit, data = dset)
r1 = residuals.coxme(coxmefit, data = dset)
r2 = residuals2.coxme(coxmefit, data = dset)
debugonce(residuals2.coxme)
r2 = residuals2.coxme(coxmefit, data = dset)
devtools::load_all(".")
r2 = residuals2.coxme(coxmefit, data = dset)
devtools::load_all(".")
r2 = residuals2.coxme(coxmefit, data = dset)
debugonce(residuals2.coxme)
r2 = residuals2.coxme(coxmefit, data = dset)
devtools::load_all(".")
r2 = residuals2.coxme(coxmefit, data = dset)
devtools::load_all(".")
r2 = residuals2.coxme(coxmefit, data = dset)
identical(r1, r2)
all.equal(r1, r2)
n = 1000
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
r1 = residuals.coxme(coxmefit, data = dset)
# debugonce(residuals2.coxme)
r2 = residuals2.coxme(coxmefit, data = dset)
all.equal(r1, r2)
microbenchmark::microbenchmark(
residuals.coxme(coxmefit, data = dset),
residuals2.coxme(coxmefit, data = dset)
)
n = 5000
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
r1 = residuals.coxme(coxmefit, data = dset)
# debugonce(residuals2.coxme)
r2 = residuals2.coxme(coxmefit, data = dset)
all.equal(r1, r2)
microbenchmark::microbenchmark(
residuals.coxme(coxmefit, data = dset),
residuals2.coxme(coxmefit, data = dset)
)
dset$strat = rep(c(1:2), n/2)
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M) + strata(strat),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
r3 = residuals2.coxme(coxmefit, data = dset)
devtools::load_all(".")
r3 = residuals2.coxme(coxmefit, data = dset)
r3
coef(coxmefit)
summary(coxmefit)
n = 100
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
r1 = residuals.coxme(coxmefit, data = dset, type = "dfbeta")
# debugonce(residuals2.coxme)
r2 = residuals2.coxme(coxmefit, data = dset, type = "dfbeta")
all.equal(r1, r2)
devtools::load_all(".")
# test timing of new function.
n = 1000
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
devtools::load_all(".")
microbenchmark::microbenchmark(
residuals.coxme(coxmefit, data = dset),
times = 10
)
# test timing of new function.
n = 10000
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
microbenchmark::microbenchmark(
residuals.coxme(coxmefit, data = dset),
times = 10
)
# test timing of new function.
n = 100000
X = data.frame(X1 = rnorm(n),
X2 = rnorm(n),
M = rep(c(0,1), each = n/2),
id = seq_len(n))
dset = draw_event_times(formula = Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = X,
coefficients = c(X1 = 1, X2 = 0.5),
random_effect_variance = c(M = 0),
id = id,
baseline_hazard = 1,
event = "single")
dset = dplyr::left_join(dset, dplyr::select(X, id, M), by = dplyr::join_by(id))
coxmefit = coxme::coxme(Surv(start_time, stop_time, status) ~ X1 + X2 + (1 | M),
data = dset, x = TRUE, y = TRUE, ties = "breslow")
microbenchmark::microbenchmark(
residuals.coxme(coxmefit, data = dset),
times = 10
)
microbenchmark::microbenchmark(
residuals.coxme(coxmefit, data = dset),
times = 10
)
