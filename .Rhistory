theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
# need start parameters for the beta b ests.  reltol,
debugonce(theta_ipl_hess)
theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
calc_hessian_cell(d_D_d_theta[[1]], d_D_d_theta[[1]])
devtools::load_all(".")
theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
devtools::load_all(".")
theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
solve(-th)
sqrt(solve(-th))
coxme::VarCorr(coxme_fit)$M1
se <- sqrt(solve(-th))
se
diag(sqrt(solve(-th)))
coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
c(-1.96, 1.96) * se
se
se <- diag(sqrt(solve(-th)))
coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
true_theta >= ci[1]
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
res <- replicate(1000, one_rep())
devtools::load_all(".")
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
ests <- c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1)
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
ests <- c(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
ests <- c(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
ests <- c(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
ests
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
ests$par
ests$par[-seq_len(n_fixed)]
n_fixed = 1
ests$par[-seq_len(n_fixed)]
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = ests)
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
debugonce(theta_ipl)
one_rep()
debugonce(theta_ipl)
debugonce(theta_ipl_hess)
one_rep()
ests$par
ests$par[-seq_len(n_fixed)]
library(bdsmatrix)
unchol <- function(chol_mat){
L <- matrix(chol_mat)
D <- diag(chol_mat)
L %*% diag(D) %*% t(L)
}
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
hessian = unchol(coxme_fit$hmat))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = ests)
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
debugonce(theta_ipl_hess)
one_rep()
coxme_fit
coxme_fit <- coxme::coxme(my_formula, data = ds)
unchol(coxme_fit$hmat)
coxme_fit$hmat
library(bdsmatrix)
unchol <- function(chol_mat){
L <- as.matrix(chol_mat)
D <- diag(chol_mat)
L %*% diag(D) %*% t(L)
}
unchol(coxme_fit$hmat)
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
coxme_fit <- coxme::coxme(my_formula, data = ds)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
hessian = unchol(coxme_fit$hmat))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = ests)
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
devtools::load_all(".")
one_rep()
debugonce(theta_ipl_hess)
one_rep()
hessian
hessian
devtools::load_all(".")
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
coxme_fit <- coxme::coxme(my_formula, data = ds)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
hessian = unchol(coxme_fit$hmat))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = ests)
th2 <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
c(th, th2)
#
#   se <- diag(sqrt(solve(-th)))
#
#   ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
#
#   in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
#
#   in_ci
}
one_rep()
debug(theta_ipl_hess)
one_rep()
devtools::load_all(".")
one_rep()
debug(theta_ipl_hess)
one_rep()
ests$par
cbind(ests$par, other_args$start_params)
devtools::load_all(".")
coxme_fit$variance
solve(-coxme_fit$variance )
solve(coxme_fit$variance )
-solve(coxme_fit$variance )
unchol(-coxme_fit$hmat)
unchol(coxme_fit$hmat)
-unchol(coxme_fit$hmat)
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
coxme_fit <- coxme::coxme(my_formula, data = ds)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
hessian = -unchol(coxme_fit$hmat))
# could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = ests)
th2 <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13))
c(th, th2)
#
#   se <- diag(sqrt(solve(-th)))
#
#   ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
#
#   in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
#
#   in_ci
}
one_rep()
one_rep <- function(){
true_theta = 1
my_formula <- survival::Surv(stat_time, stat)~ X1 + (1 | M1)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1),
random_effect_variance = c(M1 = true_theta)
)
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
coxme_fit <- coxme::coxme(my_formula, data = ds)
ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
hessian = -unchol(coxme_fit$hmat))
# # could just take ests from coxme.
th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
formula = my_formula,
parsed_data = make_ppl(parsed_data),
other_args = list(start_params = ests$par,
stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
reltol = 1e-13),
ests = ests)
# th <- theta_ipl_hess(theta = coxme::VarCorr(coxme_fit)$M1,
#                       formula = my_formula,
#                       parsed_data = make_ppl(parsed_data),
#                       other_args = list(start_params = ests$par,
#                                         stat = Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1),
#                                         reltol = 1e-13))
se <- diag(sqrt(solve(-th)))
ci <- coxme::VarCorr(coxme_fit)$M1 + c(-1.96, 1.96) * se
in_ci <- true_theta >= ci[1] & true_theta <= ci[2]
in_ci
}
one_rep()
one_rep()
res <- replicate(1000, one_rep())
mean(res)
