# attr(ds, "random_effects")
coxme::ranef(fit)
})
# should be about 0
sum(attr(ds, "random_effects")$M1)
sum(rowMeans(x = re1))
rowMeans(x = re1)
cbind(
attr(ds, "random_effects")$M1,
rowMeans(x = re1))
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 500),
coefficients = c(1, 1, 1),
random_effect_variance = c(M1 = 1, M2 = 2),
random_effect_seed = c(M1 = 125, M2 = 457)
)
fit <- coxme::coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
# attr(ds, "random_effects")
coxme::ranef(fit)
re2 <- sapply(res_list, "[[", "M2", simplify = "matrix")
cbind(
attr(ds, "random_effects")$M2,
rowMeans(x = re2))
attr(ds, "random_effects")$M2
rowMeans(x = re2)
library(boot)
library(boot)
# bootstrap a theta CI
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 500),
coefficients = c(1, 1, 1),
random_effect_variance = c(M1 = 1, M2 = 2),
random_effect_seed = c(M1 = 125, M2 = 457)
)
theta.fun <- function(dat){
fit <- coxme::coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = dat)
unlist(coxme::VarCorr(fit))
}
theta.fun(ds)
boot(ds, theta.fun)
boot(ds, theta.fun, R = 100)
theta.fun <- function(dat){
fit <- coxme::coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = dat)
unlist(coxme::VarCorr(fit))[1]
}
theta.fun(ds)
boot(ds, theta.fun, R = 100)
theta.fun <- function(dat){
fit <- coxme::coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = dat)
unlist(coxme::VarCorr(fit))
}
theta.fun(ds)
boot(ds, theta.fun, R = 100)
theta.fun(ds)
theta.fun <- function(dat, original_fit){
n <- nrow(dat)
resampled_data <- dat[sample(n, size = n, replace = TRUE), ]
new_fit <- update(original_fit, data = resampled_data)
unlist(coxme::VarCorr(fit))
}
theta.fun(dat = ds, original_fit = fit)
theta.fun(dat = ds, original_fit = fit)
theta.fun(dat = ds, original_fit = fit)
theta.fun <- function(dat, original_fit){
n <- nrow(dat)
resampled_data <- dat[sample(n, size = n, replace = TRUE), ]
new_fit <- update(original_fit, data = resampled_data)
unlist(coxme::VarCorr(new_fit))
}
theta.fun(dat = ds, original_fit = fit)
theta.fun(dat = ds, original_fit = fit)
theta.fun(dat = ds, original_fit = fit)
boot
theta_boot_reps <- replicate(10, theta.fun(dat = ds, original_fit = fit), simplify = matrix)
theta_boot_reps <- replicate(10, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
theta_boot_reps
apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
theta_boot_reps <- replicate(1000, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = dat)
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
VarCorr(fit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 500),
coefficients = c(1, 1, 1),
random_effect_variance = c(M1 = 1, M2 = 2)
)
theta.fun <- function(dat, original_fit){
n <- nrow(dat)
resampled_data <- dat[sample(n, size = n, replace = TRUE), ]
new_fit <- update(original_fit, data = resampled_data)
unlist(coxme::VarCorr(new_fit))
}
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
theta_boot_reps <- replicate(100, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
VarCorr(fit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 500),
coefficients = c(1, 1, 1),
random_effect_variance = c(M1 = 1, M2 = 2)
)
theta.fun <- function(dat, original_fit){
n <- nrow(dat)
resampled_data <- dat[sample(n, size = n, replace = TRUE), ]
new_fit <- update(original_fit, data = resampled_data)
unlist(coxme::VarCorr(new_fit))
}
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
theta_boot_reps <- replicate(1000, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
VarCorr(fit)
expand.grid(k = c(10, 50), nk = c(2, 4, 10), theta_M1 = c(0.5, 1, 2), theta_M1.M2 = c(0.5, 1, 2))
one_rep <- function(params) {
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = params$k, nk = params$nk, n = params$k * params$nk),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = params$theta_M1, `M1:M2` = params$theta_M1.M2)
)
ds$`M1:M2` <- with(ds, interaction(M1, M2))
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
theta_boot_reps <- replicate(1000, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
}
param_combos <- expand.grid(k = c(10, 50), nk = c(2, 4, 10), theta_M1 = c(0.5, 1, 2), theta_M1.M2 = c(0.5, 1, 2))
theta.fun <- function(dat, original_fit){
n <- nrow(dat)
resampled_data <- dat[sample(n, size = n, replace = TRUE), ]
new_fit <- update(original_fit, data = resampled_data)
unlist(coxme::VarCorr(new_fit))
}
one_rep <- function(params) {
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = params$k, nk = params$nk, n = params$k * params$nk),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = params$theta_M1, `M1:M2` = params$theta_M1.M2)
)
ds$`M1:M2` <- with(ds, interaction(M1, M2))
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
theta_boot_reps <- replicate(1000, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
}
param_combos[1, ]
one_rep(params = param_combos[1, ])
one_rep <- function(params) {
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = params$k, nk = params$nk, n = params$k * params$nk),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = params$theta_M1, `M1:M2` = params$theta_M1.M2)
)
ds$`M1:M2` <- with(ds, interaction(M1, M2))
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1:M2`), data = ds)
theta_boot_reps <- replicate(1000, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
}
one_rep(params = param_combos[1, ])
debugonce(one_rep)
one_rep(params = param_combos[1, ])
debugonce(one_dataset)
one_rep(params = param_combos[1, ])
param_combos <- expand.grid(k = c(10, 50), nk = c(4, 10), theta_M1 = c(0.5, 1, 2), theta_M1.M2 = c(0.5, 1, 2))
one_rep <- function(params) {
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = params$k, nk = params$nk, n = params$k * params$nk),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = params$theta_M1, `M1:M2` = params$theta_M1.M2)
)
ds$`M1:M2` <- with(ds, interaction(M1, M2))
fit <- coxme::coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1:M2`), data = ds)
theta_boot_reps <- replicate(1000, theta.fun(dat = ds, original_fit = fit), simplify = "matrix")
data.frame(mean_est=rowMeans(theta_boot_reps),
t(apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))))
}
one_rep(params = param_combos[1, ])
param_combos[1, ]
debugonce(one_rep)
one_rep(params = param_combos[1, ])
VarCorr(fit)
theta_boot_reps
theta.fun
unlist(VarCorr(fit))
theta_boot_reps[1,]
plot(density(theta_boot_reps[1,]))
apply(theta_boot_reps, 1, quantile, c(0.025, 0.975))
1
param_combos[1, ]
param_combos <- expand.grid(k = c(50), nk = c(4, 10), theta_M1 = c(0.5, 1, 2), theta_M1.M2 = c(0.5, 1, 2))
param_combos[1, ]
one_rep(params = param_combos[1, ])
my_formula <- survival::Surv(stat_time, stat)~X1 + X2 + X3 + (1 | M1) + (1| M2)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = params$k, nk = params$nk, n = params$k * params$nk),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = params$theta_M1, `M1:M2` = params$theta_M1.M2)
)
my_formula <- survival::Surv(stat_time, stat)~X1 + X2 + X3 + (1 | M1) + (1| M2)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 58*4),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = 1, M2 = 1.5)
)
ests_list <- list()
ests_list[[1]] <- est_parameters(my_formula, data = ds)
my_formula <- survival::Surv(stat_time, stat)~X1 + X2 + X3 + (1 | M1) + (1| M2)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
coefficients = c(1, -0.7, 0.5),
random_effect_variance = c(M1 = 1, M2 = 1.5)
)
ests_list <- list()
ests_list[[1]] <- est_parameters(my_formula, data = ds)
est_parameters
devtools::load_all(".")
# debugonce(est_parameters)
ests_list[[1]] <- est_parameters(my_formula, data = ds)
ests_list[[1]]
ests_list[[1]]$beta
ests_list[[1]]$b
ests_list[[1]]$theta
for(i in 1:10) {
current_params <- ests_list[[i]]
ests_list[[i + 1]] <- est_parameters(my_formula, data = ds,
start_params = c(ests_list[[i]]$beta, ests_list[[i]]$b),
theta_start = ests_list[[i]]$theta)
}
# extract theta
lapply(ests_list, names)
lapply(ests_list, "[[", "theta")
sapply(ests_list, "[[", "theta", simplify = "matrix")
data.frame(thetas) |>
pivot_longer(cols = everything())
thetas <- sapply(ests_list, "[[", "theta", simplify = "matrix")
data.frame(thetas) |>
pivot_longer(cols = everything())
data.frame(thetas) |>
mutate(theta = c("M1", "M2"), .before = everything()) |>
pivot_longer(cols = everything())
data.frame(thetas) |>
mutate(theta = c("M1", "M2"), .before = everything()) |> names()
data.frame(thetas) |>
mutate(theta = c("M1", "M2"), .before = everything()) |>
pivot_longer(cols = X1:X11)
#zigzagging?
ggplot(thetas_df, aes(forcats::as_factor(name), value)) + geom_point() + facet_grid(rows = vars(theta))
thetas_df <- data.frame(thetas) |>
mutate(theta = c("M1", "M2"), .before = everything()) |>
pivot_longer(cols = X1:X11)
#zigzagging?
ggplot(thetas_df, aes(forcats::as_factor(name), value)) + geom_point() + facet_grid(rows = vars(theta))
#zigzagging?
ggplot(thetas_df, aes(forcats::as_factor(name), value)) + geom_point() + facet_grid(rows = vars(theta), scales = "free")
thetas_df <- data.frame(thetas) |>
mutate(theta = factor(c("theta M1", "theta M2")), .before = everything()) |>
pivot_longer(cols = X1:X11) |>
mutate(Iteration = factor(name, levels = paste0("X", 1:11), labels = as.character(1:11)))
#zigzagging?
ggplot(thetas_df, aes(Iteration, value)) + geom_point() +
facet_grid(rows = vars(theta), scales = "free")
# same with betas
betas_df <- sapply(ests_list, "[[", "beta", simplify = "matrix") |>
data.frame() |>
mutate(beta = factor(paste("beta", 1:3)), .before = everything()) |>
pivot_longer(cols = X1:X11) |>
mutate(Iteration = factor(name, levels = paste0("X", 1:11), labels = as.character(1:11)))
#zigzagging?
ggplot(betas_df, aes(Iteration, value)) + geom_point() +
facet_grid(rows = vars(beta), scales = "free")
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
stat <- Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1)
theta_ipl2
attributes(ests_list[[1]])
beta_b_est <- attributes(ests_list[[1]])
theta_ipl2
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
beta_b_est <- attr(ests_list[[1]], "beta_b_est")
theta_ipl2(theta = ests_list[[1]]$theta, formula = my_formula, parsed_data = parsed_data,
Kbb = beta_b_est$hessian[-(1:3), -(1:3)], value = beta_b_est$value)
test_thetas <- expand.grid(seq(0.001, 5, by = 0.1), seq(0.001, 5, 0.1))
test_theta_ll <- apply(test_thetas, 1, function(thetas){
theta_ipl2(theta = thetas, formula = my_formula, parsed_data = parsed_data,
Kbb = beta_b_est$hessian[-(1:3), -(1:3)], value = beta_b_est$value)
})
test_theta_ll <- apply(test_thetas, 1, function(thetas){
theta_ipl2(theta = thetas, formula = my_formula, parsed_data = parsed_data,
Kbb = beta_b_est$hessian[-(1:3), -(1:3)], value = beta_b_est$value)
})
ests_list[[1]]$theta[2]
test_thetas <- data.frame(seq(0.001, 5, by = 0.1), ests_list[[1]]$theta[2])
test_theta_ll <- apply(test_thetas, 1, function(thetas){
theta_ipl2(theta = thetas, formula = my_formula, parsed_data = parsed_data,
Kbb = beta_b_est$hessian[-(1:3), -(1:3)], value = beta_b_est$value)
})
plot(test_thetas[,1], test_theta_ll)
beta_b_est$par
theta_ipl(ests_list[[1]]$theta, formula = my_formula, parsed_data = make_ppl(parsed_data),
other_args = list(start_params = beta_b_est$par,
re_only = TRUE,
n_fixed = 3,
stat = stat))
test_theta_ll2 <- apply(test_thetas, 1, function(thetas){
theta_ipl(thetas, formula = my_formula, parsed_data = make_ppl(parsed_data),
other_args = list(start_params = beta_b_est$par,
re_only = TRUE,
n_fixed = 3,
stat = stat))
})
plot(test_thetas[,1], test_theta_ll2)
test_thetas <- data.frame(ests_list[[1]]$theta[1],seq(0.001, 7, by = 0.1))
test_theta_ll2 <- apply(test_thetas, 1, function(thetas){
theta_ipl(thetas, formula = my_formula, parsed_data = make_ppl(parsed_data),
other_args = list(start_params = beta_b_est$par,
re_only = TRUE,
n_fixed = 3,
stat = stat))
})
plot(test_thetas[,1], test_theta_ll2)
plot(test_thetas[,2], test_theta_ll2)
abline(v = ests_list[[1]]$theta[2])
plot(test_thetas[-1,2], test_theta_ll2[-1])
abline(v = ests_list[[1]]$theta[2])
test_thetas <- data.frame(seq(0.001, 5, by = 0.1), ests_list[[1]]$theta[2])
test_theta_ll <- apply(test_thetas, 1, function(thetas){
theta_ipl2(theta = thetas, formula = my_formula, parsed_data = parsed_data,
Kbb = beta_b_est$hessian[-(1:3), -(1:3)], value = beta_b_est$value)
})
plot(test_thetas[,1], test_theta_ll)
theta_ipl(ests_list[[1]]$theta, formula = my_formula, parsed_data = make_ppl(parsed_data),
other_args = list(start_params = beta_b_est$par,
re_only = TRUE,
n_fixed = 3,
stat = stat))
test_theta_ll2 <- apply(test_thetas, 1, function(thetas){
theta_ipl(thetas, formula = my_formula, parsed_data = make_ppl(parsed_data),
other_args = list(start_params = beta_b_est$par,
re_only = TRUE,
n_fixed = 3,
stat = stat))
})
plot(test_thetas[,1], test_theta_ll2)
abline(v = ests_list[[1]]$theta[1])
test_thetas <- data.frame(ests_list[[1]]$theta[1],seq(0.1, 7, by = 0.1))
test_theta_ll2 <- apply(test_thetas, 1, function(thetas){
theta_ipl(thetas, formula = my_formula, parsed_data = make_ppl(parsed_data),
other_args = list(start_params = beta_b_est$par,
re_only = TRUE,
n_fixed = 3,
stat = stat))
})
plot(test_thetas[-1,2], test_theta_ll2[-1])
abline(v = ests_list[[1]]$theta[2])
sqrt(.Machine$double.eps)
0.5 * (.Machine$double.eps)
devtools::load_all(".")
devtools::load_all(".")
.Machine$double.eps*100
.Machine$double.eps*1000
# debugonce(est_parameters)
ests_list[[1]] <- est_parameters(my_formula, data = ds,
control = control.list(abstol = 10e-13,
abstol = 10e-13))
# debugonce(est_parameters)
ests_list[[1]] <- est_parameters(my_formula, data = ds,
control = control.list(abstol = 10e-13,
reltol = 10e-13))
1e7 * .Machine$double.eps
1e3 * .Machine$double.eps
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# debugonce(est_parameters)
ests_list[[1]] <- est_parameters(my_formula, data = ds,
control = control.list(factr = 1e3,
reltol = 1e-13))
ests_list[[1]]$theta
for(i in 1:10) {
current_params <- ests_list[[i]]
ests_list[[i + 1]] <- est_parameters(my_formula, data = ds,
start_params = c(ests_list[[i]]$beta, ests_list[[i]]$b),
theta_start = ests_list[[i]]$theta,
control = control.list(factr = 1e3,
reltol = 1e-13))
}
thetas_df <- sapply(ests_list, "[[", "theta", simplify = "matrix") |>
data.frame(thetas) |>
mutate(theta = factor(c("theta M1", "theta M2")), .before = everything()) |>
pivot_longer(cols = X1:X11) |>
mutate(Iteration = factor(name, levels = paste0("X", 1:11), labels = as.character(1:11)))
#zigzagging?
ggplot(thetas_df, aes(Iteration, value)) + geom_point() +
facet_grid(rows = vars(theta), scales = "free")
thetas_df
thetas_df <- sapply(ests_list, "[[", "theta", simplify = "matrix") |>
data.frame() |>
mutate(theta = factor(c("theta M1", "theta M2")), .before = everything()) |>
pivot_longer(cols = X1:X11) |>
mutate(Iteration = factor(name, levels = paste0("X", 1:11), labels = as.character(1:11)))
thetas_df
thetas_df %>%
group_by(theta) %>%
summarise(min(value) = max(value))
thetas_df %>%
group_by(theta) %>%
summarise(min(value) - max(value))
# same with betas
betas_df <- sapply(ests_list, "[[", "beta", simplify = "matrix") |>
data.frame() |>
mutate(beta = factor(paste("beta", 1:3)), .before = everything()) |>
pivot_longer(cols = X1:X11) |>
mutate(Iteration = factor(name, levels = paste0("X", 1:11), labels = as.character(1:11)))
#zigzagging?
ggplot(betas_df, aes(Iteration, value)) + geom_point() +
facet_grid(rows = vars(beta), scales = "free")
betas_df %>%
group_by(beta) %>%
summarise(min(value) - max(value))
attr(ests_list[[1]], "theta_est")
lapply(ests_list, function(x){
attr(x, "theta_est")$hessian
})
lapply(ests_list, function(x){
sqrt(diag(-solve(attr(x, "theta_est")$hessian)))
})
