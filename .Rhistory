library(ggplot2)
plot_data <- my_sample[1:100, ]
plot_data$y <- 100:1
ggplot(plot_data, aes(x = timea, xend = timeb, y = y, yend = y )) + geom_segment()
dplyr::n_distinct(my_sample$idK1)
library(tidyverse)
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
group_by(idK1, idK2) %>%
filter(row_number() <=3)
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
group_by(idK1) %>%
filter(row_number() <=3)
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
mutate(y = n():1)
ggplot(small_sample, aes(x = timea, xend = timeb, y = y, yend = y )) + geom_segment()
View(small_sample)
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1), data = my_sample, weights = weights)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
brad_score <- calc_ui(parts)
brad_score[1:6, 1:3]
my_sample_score |> head()
colSums(brad_score)
devtools::load_all(".")
debugonce(make_parts.coxme)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
sum(in_risk_set_matrix[,1])
exp(risk_score)
weights
in_risk_set_matrix %*% exp_risk_score
all.equal(at_risk, in_risk_set_matrix %*% exp_risk_score)
head(at_risk)
S0 = in_risk_set_matrix %*% exp_risk_score
head(S0)
S0 = t(in_risk_set_matrix) %*% exp_risk_score
head(at_risk)
head(S0)
s0_2 = Matrix::tcrossprod(in_risk_set_matrix, exp_risk_score)
s0_2 = Matrix::crossprod(in_risk_set_matrix, exp_risk_score)
S0_2 = Matrix::crossprod(in_risk_set_matrix, exp_risk_score)
all.equal(S0, S0_2)
all.equal(S0, at_risk)
S0 = Matrix::crossprod(in_risk_set_matrix, exp_risk_score)
nX <- ncol(X)
# this is S1_hat, a n * p matrix
exp_risk_score_X <- exp_risk_score[, rep(1, nX)] * X
# n <- nrow(exp_risk_score)
exp_risk_score_Z <- Matrix::Matrix(as.numeric(exp_risk_score) * as.numeric(Z), nrow = n)
# also an n * p matrix
# at_risk_X <- fast_risk_sets(exp_risk_score_X)
at_risk_X <- apply(exp_risk_score_X, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
dim(exp_risk_score)
dim(exp_risk_score_X)
dim(in_risk_set_matrix)
S1_X <- in_risk_set_matrix %*% exp_risk_score_X
all.equal(S1_X, at_risk_X)
dim(S1_X)
dime(at_risk_X)
dim(at_risk_X)
S1_X <- t(in_risk_set_matrix) %*% exp_risk_score_X
all.equal(S1_X, at_risk_X)
dim(S1_X)
dim(at_risk_X)
head(S1_X)
head(at_risk_X)
all.equal(as.matrix(S1_X), as.matrix(at_risk_X))
S1_X <- Matrix::crossprod(in_risk_set_matrix, exp_risk_score_X)
all.equal(as.matrix(S1_X), as.matrix(at_risk_X))
microbenchmark::microbenchmark(
t(in_risk_set_matrix) %*% exp_risk_score_X  ,
Matrix::crossprod(in_risk_set_matrix, exp_risk_score_X)
)
theta <- unlist(coxme::VarCorr(coxme.object))
parsed_data$reTrms$Lambdat@x <- theta[parsed_data$reTrms$Lind]
D <- parsed_data$reTrms$Lambdat
penalty <- t(b) %*% D
penalty
Matrix::crossprod(b, D)
all.equal(Matrix::crossprod(b, D), penalty)
str(stat)
str(time_start)
str(weights)
stat
weights
devtools::load_all(".")
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
calc_ui
brad_score <- calc_ui(parts)
my_sample_score |> head()
brad_score[1:6, 1:3]
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
filter(idK1 < 10) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
mutate(y = n():1)
small_sample
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
filter(idK1 < 20) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
mutate(y = n():1)
small_sample
ggplot(small_sample, aes(x = timea, xend = timeb, y = y, yend = y )) + geom_segment()
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1),
data = small_sample, weights = weights)
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
filter(idK1 < 30) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
mutate(y = n():1)
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
parts <- make_parts(fit, data = small_sample, weights = small_sample$weights)
brad_score <- calc_ui(parts)
my_sample_score |> head()
brad_score
coxph_fit <- coxph(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1,
data = small_sample, weights = weights)
resid(coxph_fit, "score")
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
debug(make_parts.coxph)
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
devtools::load_all(".")
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
devtools::load_all(".")
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
parts
brad_score <- calc_ui(parts)
brad_score
resid(coxph_fit, "score")
coxph_fit <- coxph(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1,
data = small_sample, weights = weights, ties = "breslow")
resid(coxph_fit, "score")
brad_score
devtools::load_all(".")
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
debug(make_parts.coxph)
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
1:n[time_order]
1:n
time_order
(1:n)[time_order]
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
resid(coxph_fit, "score")
brad_score <- calc_ui(parts)
brad_score
brad_score <- calc_ui(parts)
devtools::load_all(".")
brad_score <- calc_ui(parts)
parts$original_order
debugonce(calc_ui.coxph_parts)
brad_score <- calc_ui(parts)
lin_score
parts$orginal_order
names(parts)
lin_score[parts$original_order,]
devtools::load_all(".")
brad_score <- calc_ui(parts)
brad_score
resid(coxph_fit, "score")
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
filter(idK1 < 30) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
arrange(timeb, timea)
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
filter(idK1 < 30) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
arrange(timeb, timea) %>%
mutate(y = n():1)
ggplot(small_sample, aes(x = timea, xend = timeb, y = y, yend = y )) + geom_segment()
ggplot(small_sample, aes(x = timea, xend = timeb, y = y, yend = y )) + geom_segment() +
geom_shape(aes(x = timeb, shape = as.factor(di)))
ggplot(small_sample, aes(x = timea, xend = timeb, y = y, yend = y )) + geom_segment() +
geom_point(aes(x = timeb, shape = as.factor(di)))
coxph_fit <- coxph(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1,
data = small_sample, weights = weights, ties = "breslow")
resid(coxph_fit, "score")
devtools::load_all(".")
parts <- make_parts(fit, data = small_sample, weights = small_sample$weights)
brad_score <- calc_ui(parts)
brad_score
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
brad_score <- calc_ui(parts)
brad_score
therneau_score <- resid(coxph_fit, "score")
all.equal(brad_score, therneau_score)
all.equal(as.matrix(brad_score), therneau_score)
coxmefit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
coxme_fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
parts <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
brad_score <- calc_ui(parts)
brad_score
colSums(brad_score)
devtools::load_all(".")
debugonce(make_parts.coxme)
parts <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
D
penalty
sum(penalty)
devtools::load_all(".")
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
debugonce(calc_ui.coxph_parts)
brad_score <- calc_ui(parts)
rep(seq(n), each = n)
time_stop[rep(seq(n), each = n)]
seq(n)
n = nrow(parts$stat)
print(n)
rep(seq(n), each = n)
time_stop[rep(seq(n), each = n)]
time_start < time_stop[rep(seq(n), each = n)]
time_start < rep(time_stop, each = n)
rep(time_start, each = n) < rep(time_stop, n)
Yi_at_tj <- (rep(time_start, each = n) < rep(time_stop, n) & rep(time_stop, each = n) >= rep(time_stop, n))
Yi_at_tj <- Matrix::Matrix(rep(time_start, each = n) < rep(time_stop, n) & rep(time_stop, each = n) >= rep(time_stop, n),
nrow = n, byrow = TRUE)
X
X[rep(1:n, each = n)]
X[rep(1:n, each = n),]
X[rep(1:n, each = n),] - (S1/S0)[rep(1:n, n)]
dim(Yi_at_tj)
rep(time_start, each = n) < rep(time_stop, n) & rep(time_stop, each = n) >= rep(time_stop, n)
24 * 24
nrow((X[rep(1:n, each = n),] - (S1/S0)[rep(1:n, n)]))
stat
Yi_at_tj <- rep(time_start, each = n) < rep(time_stop, n) & rep(time_stop, each = n) >= rep(time_stop, n)
stat[rep(1:n, n)] * weights[rep(1:n, n)] * Yi_at_tj * exp_risk_score[rep(1:n, each = n)] * (1/S0[rep(1:n, n)]) * ((X[rep(1:n, each = n),] - (S1/S0)[rep(1:n, n)]))
( M <- matrix(1:6, ncol = 2) )
kronecker(4, M)
# Block diagonal matrix:
kronecker(diag(1, 3), M)
M <- matrix(rnorm(10), ncol = 2)
(M <- matrix(rnorm(10), ncol = 2))
(M <- matrix(rnorm(12), ncol = 2))
I = c(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1) |> matrix(ncol =2)
I
I = c(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1) |> matrix(ncol =4)
(I = c(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0) |> matrix(ncol =4))
c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0)
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0) |> matrix(ncol =4))
(I = c(1,1,1,0,0,0,1,1,1,0,0,0, 0,0,0,1,1,1,0,0,0,1,1,1) |> matrix(ncol =4))
I %*% M
M %*% I
(M <- matrix(rnorm(12), ncol = 2))
I
I %*% M
I %*% t(M)
t(M)
I %*% t(M)
?crossprod
devtools::load_all(".")
brad_score <- calc_ui(parts)
devtools::load_all(".")
brad_score <- calc_ui(parts)
all.equal(as.matrix(brad_score), therneau_score)
parts <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
parts$exp_risk_score
coxph_exp_risk_score <- parts$exp_risk_score
parts <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
parts_ph <- make_parts(coxph_fit, data = small_sample, weights = small_sample$weights)
# debugonce(make_parts.coxme)
parts_me <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
# debugonce(calc_ui.coxph_parts)
# debugonce(calc_ui.coxme_parts)
score_ph <- calc_ui(parts_ph)
score_me <- calc_ui(parts_me)
cbind(parts_ph$S1, parts_me$S1_X)
cbind(parts_ph$S0, parts_me$S0_X)
cbind(parts_ph$S0, parts_me$S0)
cbind(parts_ph$exp_risk_score, parts_me$exp_risk_score)
coxme_fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
# debugonce(make_parts.coxme)
parts_me <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
# debugonce(calc_ui.coxph_parts)
debugonce(calc_ui.coxme_parts)
score_me <- calc_ui(parts_me)
devtools::load_all(".")
# debugonce(calc_ui.coxph_parts)
debugonce(calc_ui.coxme_parts)
score_me <- calc_ui(parts_me)
parts$ui_penalty
fit$penalty
score_me
VarCorr(coxme_fit)
coxme::VarCorr(coxme_fit)
re
re <- coxme::ranef(coxme_fit)
re <- coxme::ranef(coxme_fit)[[1]]
re
coxme::VarCorr(coxme_fit) * diag(length(re))
re <- coxme::ranef(coxme_fit)[[1]]
coxme::VarCorr(coxme_fit) * diag(length(re))
coxme::VarCorr(coxme_fit)[[1]] * diag(length(re))
t(re) %*% coxme::VarCorr(coxme_fit)[[1]] * diag(length(re)) %*% re
re %*% coxme::VarCorr(coxme_fit)[[1]] * diag(length(re)) %*% re
matrix(re, ncol = 1)
(coxme::VarCorr(coxme_fit)[[1]] * diag(length(re)))
matrix(re, ncol = 1) %*% (coxme::VarCorr(coxme_fit)[[1]] * diag(length(re)))
t(matrix(re, ncol = 1)) %*% (coxme::VarCorr(coxme_fit)[[1]] * diag(length(re)))
reM <- matrix(re, ncol = 1)
t(reM) %*% (coxme::VarCorr(coxme_fit)[[1]] * diag(length(re))) %*% reM
coxme_fit$penalty
coxme_fit$loglik
devtools::load_all(".")
score_me <- calc_ui(parts_me)
score_me
colSums(score_me)
# these are the parameter combinations
true_coefs = c(X1 = 1, X2 = -0.7, X3 = 0.5)
param_combos <- data.frame(n_clusters = 5000,
cluster_size = ceiling(runif(sim_combos_n, 2, 50)),
theta = runif(sim_combos_n, 0, 2),
n_clusters_in_sample = ceiling(runif(sim_combos_n, 9, 100)))
# set to and 20 for the real run.
# run just a few for each parameter combination.
sim_combos_n <- 10000
cores <- 20
# these are the parameter combinations
true_coefs = c(X1 = 1, X2 = -0.7, X3 = 0.5)
param_combos <- data.frame(n_clusters = 5000,
cluster_size = ceiling(runif(sim_combos_n, 2, 50)),
theta = runif(sim_combos_n, 0, 2),
n_clusters_in_sample = ceiling(runif(sim_combos_n, 9, 100)))
# need rows as list
param_combos_list <- split(param_combos, f = seq_len(nrow(param_combos)))
# define one rep
one_rep <- function(specs){
# generate a population, sample from it, calculate the things.
# generate population
k <- specs$n_clusters
nk <- specs$cluster_size
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=specs$theta)
)
pop <- dplyr::mutate(the_data, id = M)
# sample from it
# one cluster sample
samp_cluster_ids <- unique(pop$id)[sample.int(specs$n_clusters, specs$n_clusters_in_samp)]
my_samp <- pop[pop$id %in% samp_cluster_ids, ]
# for memory reasons
rm(list = c('pop', 'the_data'))
my_samp$prob <- (specs$n_clusters_in_samp/specs$n_clusters)
my_samp$weights <- my_samp$prob^-1
# rescale_weights
my_samp$rweights <- (1/my_samp$prob)/mean(1/my_samp$prob)
my_samp <- my_samp[order(my_samp$stat_time), ]
# the regular fit.
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|id), data = my_samp, weights = rweights)
# calculate ui and get information
parts <- make_parts(coxme_fit, my_samp, weights = my_samp$weights)
ui <- calc_ui(parts)
vv <- get_information(coxme_fit)
uivv <- ui %*% vv
# define design, add ui
my_des <- svydesign(~id, weights = ~weights, data = my_samp)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
# my_des_bootstrap <- as.svrepdesign(my_des, type = "bootstrap")
# my_des_subbootstrap <- as.svrepdesign(my_des, type = "subbootstrap")
svycoxme_fit_jackknife <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_jackknife)
# svycoxme_fit_bootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_bootstrap)
# svycoxme_fit_subbootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_subbootstrap)
# calculate sandwich variance
sandwich <- svyrecvar(uivv, my_des$cluster, my_des$strata, my_des$fpc, postStrata = my_des$postStrata)
sandwich2 <- vv + sandwich
list(
specs = specs,
sandwich_finite_pop  = diag(sandwich)[1:3],
sandwich_infinite_pop = diag(sandwich2)[1:3],
svycoxme_var_jackknife = diag(vcov(svycoxme_fit_jackknife)),
# svycoxme_var_bootstrap = diag(vcov(svycoxme_fit_bootstrap)),
# svycoxme_var_subbootstrap = diag(vcov(svycoxme_fit_subbootstrap)),
fisher_var = diag(vcov(coxme_fit)),
coefs = coef(svycoxme_fit_jackknife))
}
# see: https://stackoverflow.com/questions/4948361/how-do-i-save-warnings-and-errors-as-output-from-a-function
myTryCatch <- function(expr) {
warn <- err <- NULL
value <- withCallingHandlers(
tryCatch(expr, error=function(e) {
err <<- e
NULL
}), warning=function(w) {
warn <<- w
invokeRestart("muffleWarning")
})
#drop call from error
err$call <- NULL
list(value=value, warning=warn, error=err)
}
try_one_rep <- function(specs){
stream <- .Random.seed
r <- myTryCatch(one_rep(specs))
attr(r, "stream") <- stream
attr(r, "specs") <- specs
r
}
try_one_rep(specs = param_combos_list[[1]])
1000*20
1000*20/60
1000*20/60^2
data_dir1 <- file.path(Sys.getenv("OneDriveCommercial"), "PhD/outputs/scratchpads and notes/score test")
pop <- read.csv(file.path(data_dir1, "mydataPopulation.csv"))
my_sample <- read.csv(file.path(data_dir1, "mydataSample.csv"))
my_sample <- my_sample[order(my_sample$timeb, my_sample$timea), ]
library(tidyverse)
small_sample <- my_sample %>%
arrange(idK1, idK2) %>%
filter(idK1 < 30) %>%
group_by(idK1) %>%
filter(row_number() <=3) %>%
ungroup() %>%
arrange(timeb, timea) %>%
mutate(y = n():1)
coxme_fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
library(survival)
coxme_fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
# debugonce(make_parts.coxme)
parts_me <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
devtools::load_all(".")
# debugonce(make_parts.coxme)
parts_me <- make_parts(coxme_fit, data = small_sample, weights = small_sample$weights)
parts_me$ui_penalty
score_me <- calc_ui(parts_me)
score_me
score_me - parts_me$ui_penalty
dim(score_me) - dim(parts_me$ui_penalty)
dim(score_me)
dim(parts_me$ui_penalty)
dim(score_me) - cbind(matrix(0, nrow = 24, ncol = 3), parts_me$ui_penalty)
cbind(matrix(0, nrow = 24, ncol = 3), parts_me$ui_penalty)
score_me - cbind(matrix(0, nrow = 24, ncol = 3), parts_me$ui_penalty)
with_penalty <- score_me - cbind(matrix(0, nrow = 24, ncol = 3), parts_me$ui_penalty)
plot(score_me, with_penalty)
abline(0,1)
data_dir1 <- file.path(Sys.getenv("OneDriveCommercial"), "PhD/outputs/scratchpads and notes/score test")
pop <- read.csv(file.path(data_dir1, "mydataPopulation.csv"))
my_sample <- read.csv(file.path(data_dir1, "mydataSample.csv"))
my_sample <- my_sample[order(my_sample$timeb, my_sample$timea), ]
my_sample <- read.csv(file.path(data_dir1, "mydataSample.csv"))
my_sample <- read.csv(file.path(data_dir1, "mydataSample.csv"))
my_sample <- my_sample[order(my_sample$timeb, my_sample$timea), ]
my_sample_score <- read.csv(file.path(data_dir1, "Score_Sample.csv"))
coxme_fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = small_sample, weights = weights)
coxme_fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 + Z2 + Z1 + (1|idK1),
data = my_sample, weights = weights)
# debugonce(make_parts.coxme)
parts_me <- make_parts(coxme_fit, data = my_sample, weights = my_sample$weights)
score_me <- calc_ui(parts_me)
plot(score_me[,1], my_sample_score[,2])
plot(score_me[,1:3], my_sample_score[,2:4])
my_sample_score
score_me[,1:3]
nrow(score_me)
nrow(my_sample_score)
plot(score_me[,1:3], my_sample_score[,2:4])
score_me[ ,1:3]
plot(as.matrix(score_me[ ,1:3]), as.matrix(my_sample_score[ ,2:4]))
my_sample_score$X
score_me
rownames(score_me)
plot(as.matrix(score_me[as.numeric(rownames(score_me)) ,1:3]), as.matrix(my_sample_score[ ,2:4]))
plot(sort(as.matrix(score_me[,1:3])), sort(as.matrix(my_sample_score[ ,2:4])))
abline(0,1)
