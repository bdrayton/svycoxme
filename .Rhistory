random_effect_variance = list(M1 = 0)
)
dplyr::mutate(the_data, id = paste(nk_id,k_id, M1, sep = "_" ))
})
pop <- Reduce(rbind.data.frame, pop_list)
# simple random sample
my_samp <- pop[sample.int(nrow(pop), 500),]
# sort samp by time.
my_samp <- my_samp[order(my_samp$stat_time),]
my_samp$weight = 1
N_hat <- sum(my_samp$weight)
BB <- function(formula, weight = NULL, data, beta){
model_frame <- model.frame(formula, data = data)
# first column (response) is actually a (masked) matrix with time and status.
response <- as.matrix(model_frame[ ,1])
time <- response[,"time"]
stat <- response[,"status"]
# sort data by time
time_order <- order(time)
time <- time[time_order]
stat <- stat[time_order]
weight <- weight[time_order]
model_frame <- model_frame[time_order, ]
model_matrix <- model.matrix(formula, data = model_frame)
# calculate the weighted risk sets.
# get X terms
X <- model_matrix[,-1, drop = FALSE]
# this should fail if beta and X don't match dimensions
# I need these to be Matrix::Matrix
risk_score <- Matrix::Matrix(X %*% beta)
# weighted.
exp_risk_score <- weight * exp(risk_score)
rev_exp_risk_score <- exp_risk_score
rev_exp_risk_score@x <- rev(exp_risk_score@x)
# this is S0_hat in binder
at_risk <- Matrix::Matrix(rev(cumsum(rev_exp_risk_score)), ncol = 1)
# this is S1_hat
exp_risk_score_X <- exp_risk_score * X
at_risk_X <- fast_risk_sets(exp_risk_score_X)
at_risk_X_X <- fast_risk_sets(exp_risk_score_X * X)
list(stat = stat,
time = time,
weight = weight,
S0 = at_risk,
S1 = at_risk_X,
exp_risk_score = exp(risk_score),
weighted_exp_risk_score = exp_risk_score,
S2 = at_risk_X_X,
X = X)
}
coxfit <- survival::coxph(survival::Surv(stat_time, stat) ~ X1, data = my_samp)
parts <- BB(survival::Surv(stat_time, stat) ~ X1, data = my_samp,
beta = coef(coxfit), weight = my_samp$weight)
calc_ui2 <- function(parts){
n <- length(parts$stat)
# first term is the same
term1 <- with(parts, {
stat * (X - S1/S0)
})
# divide each exp(beta*X) by the series of risk sets.
p1 <- with(parts, {
tcrossprod(exp_risk_score, 1/S0)
})
p2 <- with(parts, {
# replicate X n times to make a n*n matrix from n*1 X.
# minus S0/S1, which is also n*1 from each row
Matrix(as.numeric(X), ncol = n, nrow = n) - Matrix(as.numeric(S1/S0), ncol = n, nrow = n, byrow = TRUE)
})
# yi is the indicator I(ti >= tj). Each ti needs to be compared to all tj
# because ti is sorted, this should be an upper triangle matrix (if no ties)
yi <- with(parts, {
Matrix(rep(time, each = n) <= rep(time, n), ncol = n, nrow = n, byrow = TRUE)
})
# matrix with n reps of stat, as rows.
dj <- with(parts, {
Matrix(stat, nrow = n, ncol = n, byrow = TRUE)
})
# matrix with n reps of weights, as rows.
wj <- with(parts, {
Matrix(weight, nrow = n, ncol = n, byrow = TRUE)
})
# the second term is the row sums after taking the product of these matricies
# term2 <- rowSums(-dj * wj * yi * p1 * p2)
term2 <- -dj * wj * yi * p1 * p2
# term1 + term2
# to compare to the ui matrix, filled cell by cell.
term2
}
r2 <- calc_ui2(parts)
svycoxme_path <- file.path(Sys.getenv("OneDriveCommercial"), "Documents/PhD_local/svycoxme")
devtools::load_all(svycoxme_path)
k <- 5000
nk <- 10
n_clusters_in_sample <- 40
theta <- 0
true_coefs = c(1, -0.7, 0.5)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=theta)
)
pop <- dplyr::mutate(the_data, id = M)
devtools::load_all(".")
k <- 5000
nk <- 10
n_clusters_in_sample <- 40
cluster_str <- data.frame(table(Size = rpois(2500, 2) + 6)) |>
dplyr::filter(Freq >=10)
cluster_str_list <- split(cluster_str, seq(nrow(cluster_str)))
max_cluster_digits <- max(nchar(as.character(cluster_str$Size)))
max_cluster_freq_digits <- max(nchar(as.character(cluster_str$Freq)))
set.seed(949742)
pop_list <- lapply(cluster_str_list, function(cluster_info){
k <- cluster_info$Freq
nk <- as.numeric(as.character(cluster_info$Size))
k_id <- formatC(k, width = max_cluster_freq_digits, flag = "0")
nk_id <- formatC(nk, width = max_cluster_digits, flag = "0")
the_data <- one_dataset(~X1 + (1 | M1),
dists = list(X1 = ~rnorm(n),
M1 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = c(1),
random_effect_variance = list(M1 = 0)
)
dplyr::mutate(the_data, id = paste(nk_id,k_id, M1, sep = "_" ))
})
pop <- Reduce(rbind.data.frame, pop_list)
names(parts)
length(parts$stat)
i = 250
X[i]
parts$X[i]
svycoxme_path <- file.path(Sys.getenv("OneDriveCommercial"), "Documents/PhD_local/svycoxme")
devtools::load_all(svycoxme_path)
k <- 5000
nk <- 10
n_clusters_in_sample <- 40
theta <- 0
true_coefs = c(1, -0.7, 0.5)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=theta)
)
pop <- dplyr::mutate(the_data, id = M)
# sample from it
# one cluster sample
samp_cluster_ids <- unique(pop$id)[sample.int(k, n_clusters_in_sample)]
my_samp <- pop[pop$id %in% samp_cluster_ids, ]
## for memory reasons
rm(pop)
rm(the_data)
my_samp$prob <- (n_clusters_in_sample/k)
my_samp$weights <- my_samp$prob^-1
# rescale_weights
my_samp$rweights <- (1/my_samp$prob)/mean(1/my_samp$prob)
my_samp <- my_samp[order(my_samp$stat_time), ]
coxph_fit <- survival::coxph(survival::Surv(stat_time, stat)~ X1 + X2 + X3,
data = my_samp, weights = my_samp$rweights)
parts <- make_parts(coxph_fit, my_samp, weights = my_samp$weights)
parts
names(parts)
i = 250
parts$X[i]
coxph_fit <- survival::coxph(survival::Surv(stat_time, stat)~ X1 + X2 + X3,
data = my_samp, weights = my_samp$rweights)
parts <- make_parts(coxph_fit, my_samp, weights = my_samp$weights)
names(parts)
parts$X
parts$X[i, ]
devtools::load_all(".")
# Create a simple data set for a time-dependent model
test2 <- list(start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0))
summary(coxph(Surv(start, stop, event) ~ x, test2))
# Create a simple data set for a time-dependent model
test2 <- list(start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0)) %>%
as.data.frame()
library(survival)
with(test2, Surv(start, stop, event))
with(test2, Surv(start, stop, event)) |> str()
with(test2, Surv(stop, event)) |> str()
# Create a simple data set for a time-dependent model
test2 <- list(start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0)) %>%
as.data.frame()
library(ggplot)
library(ggplot2)
test2$y <- rev(seq(nrow(test2)))
ggplot(aes(x = start, xend = stop, y = y, yend = y)) + geom_segment()
test2$y <- rev(seq(nrow(test2)))
ggplot(aes(x = start, xend = stop, y = y, yend = y)) + geom_segment()
ggplot(test2, aes(x = start, xend = stop, y = y, yend = y)) + geom_segment()
# reordering
test2 <- test2[order(test2$stop), ]
ggplot(test2, aes(x = start, xend = stop, y = y, yend = y)) + geom_segment()
# Create a simple data set for a time-dependent model
test2 <- list(start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0)) %>%
as.data.frame()
test2$y <- rev(seq(nrow(test2)))
# reordering
test2 <- test2[order(test2$stop, test2$start), ]
ggplot(test2, aes(x = start, xend = stop, y = y, yend = y)) + geom_segment()
order
order(test2$stop, test2$start)
order(test2$stop)
test2$stop
test2$start
# reordering
test2 <- test2[order(test2$stop, test2$start), ]
test2
# reordering
test2 <- test2[order(test2$stop, test2$start), ]
test2$y <- rev(seq(nrow(test2)))
ggplot(test2, aes(x = start, xend = stop, y = y, yend = y)) + geom_segment()
n = nrow(test2)
test2$start >= rep(test2$start, each = n)
start_test <- test2$start >= rep(test2$start, each = n)
start_test <- test2$start >= rep(test2$start, each = n)
stop_test <- test2$stop <= rep(test2$stop, each = n)
start_test & stop_test
matrix(start_test & stop_test, nrow = n)
exp_risk_score = predict(fit)
fit <- coxph(Surv(start, stop, event) ~ x, test2)
exp_risk_score = predict(fit)
exp_risk_score
exp_risk_score = predict(fit, type = "risk")
exp_risk_score
in_risk_set_matrix <- matrix(start_test & stop_test, nrow = n)
in_risk_set_matrix
in_risk_set_matrix * exp_risk_score
upper.tri(1)
upper.tri(length(exp_risk_score))
lower.tri(length(exp_risk_score))
lower.tri(matrix(nrow = n, ncol = n))
lower.tri(matrix(nrow = n, ncol = n)) * exp_risk_score
# Create a simple data set for a time-dependent model
test2 <- list(start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2)
with(test2, Surv(stop, event)) |> str()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
X <- fit$x
X
XtX_i <- matrix(apply(X, 1, tcrossprod), ncol = nrow(X))
XtX_i
exp_risk_score_XtX <- t(XtX_i) * exp_risk_score
exp_risk_score_XtX
exp_risk_score
fast_risk_sets(exp_risk_score_XtX)
in_risk_set_matrix
apply(exp_risk_score_XtX, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
# Create a simple data set for a time-dependent model
test2 <- list(
# start=c(1,2,5,2,1,7,3,4,8,8),
start=c(0,0,0,0,0,0,0,0,0,0),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
with(test2, Surv(stop, event)) |> str()
n = nrow(test2)
start_test <- test2$start >= rep(test2$start, each = n)
stop_test <- test2$stop <= rep(test2$stop, each = n)
in_risk_set_matrix <- matrix(start_test & stop_test, nrow = n)
in_risk_set_matrix
exp_risk_score = predict(fit, type = "risk")
in_risk_set_matrix * exp_risk_score
lower.tri(matrix(nrow = n, ncol = n)) * exp_risk_score
X <- fit$x
XtX_i <- matrix(apply(X, 1, tcrossprod), ncol = nrow(X))
exp_risk_score_XtX <- t(XtX_i) * exp_risk_score
apply(exp_risk_score_XtX, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
fast_risk_sets(exp_risk_score_XtX)
in_risk_set_matrix
exp_risk_score_XtX
fast_risk_sets(exp_risk_score_XtX)
in_risk_set_matrix
start_test
test2$stop
start_test <- test2$start <= rep(test2$start, each = n)
stop_test <- test2$stop >= rep(test2$stop, each = n)
in_risk_set_matrix <- matrix(start_test & stop_test, nrow = n)
exp_risk_score = predict(fit, type = "risk")
in_risk_set_matrix * exp_risk_score
colSums(in_risk_set_matrix * exp_risk_score)
fast_risk_sets(exp_risk_score)
exp_risk_score = predict(fit, type = "risk")
X <- fit$x
fast_risk_sets(exp_risk_score)
exp_risk_score
fast_risk_sets(matrix(exp_risk_score))
colSums(in_risk_set_matrix * exp_risk_score)
# this is S1_hat, a n * p matrix
exp_risk_score_X <- exp_risk_score * X
fast_risk_sets(exp_risk_score_X)
apply(exp_risk_score_x, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
# this is S1_hat, a n * p matrix
exp_risk_score_X <- exp_risk_score * X
apply(exp_risk_score_x, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
apply(exp_risk_score_X, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
fast_risk_sets(exp_risk_score_X)
XtX_i <- matrix(apply(X, 1, tcrossprod), ncol = nrow(X))
exp_risk_score_XtX <- t(XtX_i) * exp_risk_score
fast_risk_sets(exp_risk_score_XtX)
apply(exp_risk_score_XtX, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
devtools::load_all(".")
make_parts(fit, data = test2)
debugonce(make_parts.coxph)
make_parts(fit, data = test2)
debugonce(make_parts.coxph)
make_parts(fit, data = test2)
response
str(response)
make_parts(fit, data = test2)
devtools::load_all(".")
make_parts(fit, data = test2)
make_parts(fit, data = test2, weights = rep(1, n))
debugonce(make_parts.coxph)
make_parts(fit, data = test2, weights = rep(1, n))
devtools::load_all(".")
make_parts(fit, data = test2, weights = rep(1, n))
debugonce(make_parts.coxph)
make_parts(fit, data = test2, weights = rep(1, n))
exp_risk_score[,rep(1,n)]
in_risk_set_matrix * exp_risk_score[,rep(1,n)]
at_risk_X
devtools::load_all(".")
make_parts(fit, data = test2, weights = rep(1, n))
parts1 <- make_parts(fit, data = test2, weights = rep(1, n))
parts1 <- make_parts(fit, data = test2, weights = rep(1, n))
fit <- coxph(Surv(stop, event) ~ x + x2, test2, x = TRUE)
parts2 <- make_parts(fit, data = test2, weights = rep(1, n))
devtools::load_all(".")
parts2 <- make_parts(fit, data = test2, weights = rep(1, n))
identical(parts1, parts2)
parts1$stat
parts2$stat
all.equal(parts1, parts2)
test2 <- list(
start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
parts2 <- make_parts(fit, data = test2, weights = rep(1, n))
calc_ui(parts3)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
calc_ui(parts3)
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
calc_ui(parts3)
calc_ui
devtools::load_all(".")
calc_ui(parts3)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
calc_ui(parts3)
resid(fit, type = "score")
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
calc_ui(parts3)
test2 <- list(
start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
score_mine
score_mine - score_therneau
test2 <- list(
start=c(0,0,0,0,0,0,0,0,0,0),
# start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
score_mine - score_therneau
score_mine
score_therneau
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
score_mine - score_therneau
test2 <- list(
# start=c(0,0,0,0,0,0,0,0,0,0),
start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
score_mine - score_therneau
# right time (effectively)
test2 <- list(
start=c(0,0,0,0,0,0,0,0,0,0),
# start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
score_mine - score_therneau
score_mine - score_therneau < .Machine$double.eps
score_mine - score_therneau < .Machine$double.neg.eps
.Machine$double.neg.eps/2
.Machine$double.neg.eps*2
score_mine - score_therneau < .Machine$double.neg.eps*2
score_mine - score_therneau < .Machine$double.neg.eps*10
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
test2 <- list(
# start=c(0,0,0,0,0,0,0,0,0,0),
start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
score_mine - score_therneau
score_mine
score_therneau
devtools::load_all(".")
test2 <- list(
# start=c(0,0,0,0,0,0,0,0,0,0),
start=c(1,2,5,2,1,7,3,4,8,8),
stop=c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) %>%
as.data.frame()
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
score_mine - score_therneau
score_mine
score_therneau
devtools::load_all(".")
devtools::load_all(".")
