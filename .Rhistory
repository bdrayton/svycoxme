my_k = 11
my_nk = 11
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
ds2 <- dplyr::mutate(ds, M2 = rep(c("l", "r"), ceiling(nrow(ds)/2))[seq_len(my_k * my_nk)])
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta)) %>%
dplyr::mutate(M2 = rep(c("l", "r"), ceiling(nrow(.)/2))[seq_len(my_k * my_nk)])
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M + M2), data = ds)
sapply(ds, class)
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M) + (1|M2), data = ds)
coxme::VarCorr(fit)
str(fit)
coxme::VarCorr(fit)
one_dataset
list(X1 = rnorm(n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)
)
one_dataset <- function(X_distributions){
X_vars <- lapply(X_distributions, eval)
}
one_dataset(X_distributions = list(X1 = rnorm(n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)))
X1 = expr(rnorm(n, 0, 1))
X1 = expression(rnorm(n, 0, 1))
eval(X1)
n = 10
eval(X1)
one_dataset <- function(X_distributions){
X_vars <- lapply(X_distributions, eval)
X_vars
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))))
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval)
X_vars
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))))
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval)
X_vars
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))))
debugonce(one_dataset)
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))))
control
X_distributions
X_distributions[[1]]
eval(X_distributions[[1]])
eval(X_distributions[[2]])
eval(X_distributions[[3]])
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
str(X1)
parent.frame()
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval, enclos = parent.frame())
X_vars
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval, enclos = parent.frame(n=2))
X_vars
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
eval_one <- function(one_expression){
eval(one_expression)
}
debugonce(eval_one)
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval_one)
X_vars
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
parent.frame()
parent.frame(n=2)
parent.frame(n=3)
ls()
ls(name = parent.frame())
ls(name = parent.frame(n=2))
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval_one, control = control)
X_vars
}
eval_one <- function(one_expression, ...){
eval(one_expression)
}
debugonce(eval_one)
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval_one, control = control)
X_vars
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
debugonce(eval_one)
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- plyr::ldply(X_distributions, eval_one, control = control)
X_vars
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
rm(n)
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- plyr::ldply(X_distributions, eval_one, control = control)
X_vars
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
one_dataset(X_distributions = list(X1 = expression(rnorm(n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
cbind(x = vector(mode = "logical", length = 2),
y = vector(mode = "charactor", length = 2),
z = vector(mode = "double", length = 2))
cbind(x = vector(mode = "logical", length = 2),
y = vector(mode = "character", length = 2),
z = vector(mode = "double", length = 2))
ds <- one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
data.frame(ds)
ds <- one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
data.frame(ds)
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval_one, control = control)
X_vars
}
ds <- one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
data.frame(ds)
data.frame
one_dataset <- function(X_distributions, control = list(k = 10, nk = 10, n = 100)){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
ds <- one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
data.frame(ds)
ds
one_dataset(X_distributions = list(X1 = rnorm(control$n, 0, 1)),
control = list(k = 10, nk = 10, n = 100))
test_fun <- function(a, b = list(a)){
return(b)
}
test_fun(a = 1)
test_fun <- function(a, b = list(rnorm(a, 0, 1))){
return(b)
}
test_fun(a = 1)
one_dataset <- function(control = list(k = 10, nk = 10, n = 100), X_distributions){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
ds <- one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset(X_distributions = list(X1 = rnorm(control$n, 0, 1)),
control = list(k = 10, nk = 10, n = 100))
test_fun <- function(a, b = list(rnorm(a$k, 0, 1))){
return(b)
}
test_fun(a = list(k = 1))
test_fun <- function(a, b = list(x1 = rnorm(a$k, 0, 1))){
return(b)
}
test_fun(a = list(k = 1))
one_dataset <- function(control, X_distributions){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(control, X_distributions){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1))),
control = list(k = 10, nk = 10, n = 100))
one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset(X_distributions = list(X1 = rnorm(control$n, 0, 1),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset(X_distributions = list(X1 = rnorm(control$n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
control = list(k = 10, nk = 10, n = 100))
one_dataset(
control = list(k = 10, nk = 10, n = 100),
X_distributions = list(X1 = rnorm(control$n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)))
one_dataset <- function(control, X_distributions){
X_vars <- X_distributions
data.frame(X_vars)
}
one_dataset(
control = list(k = 10, nk = 10, n = 100),
X_distributions = list(X1 = rnorm(control$n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)))
one_dataset <- function(control, X_distributions = list(X1 = rnorm(control$n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))){
X_vars <- X_distributions
data.frame(X_vars)
}
one_dataset(
control = list(k = 10, nk = 10, n = 100),
X_distributions = list(X1 = rnorm(control$n, 0, 1),
X2 = rep(rnorm(control$k, 0, 1), each = control$nk),
X3 = rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)))
test_fun <- function(control, b = list(X1 = rnorm(control$k, 0, 1))){
return(b)
}
test_fun(a = list(k = 1))
test_fun(control = list(k = 1))
test_fun <- function(control, b = list(X1 = rnorm(control$k, 0, 1))){
data.frame(b)
}
test_fun(control = list(k = 1))
test_fun(control = list(n = 100), b = list(X1 = rnorm(control$k, 0, 1)))
test_fun <- function(control, b = list(X1 = rnorm(control$n, 0, 1))){
data.frame(b)
}
test_fun(control = list(n = 100), b = list(X1 = rnorm(control$k, 0, 1)))
one_dataset <- function(control = list(k = 10, nk = 10, n = 100), X_distributions){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
ds <- one_dataset(X_distributions = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
ds
lapply(list(), return)
lapply(list(), return) |> data.frame()
X <- lapply(list(), return) |> data.frame()
data.frame(data.frame(y = 1), X)
X <- lapply(list(), return) |> data.frame()
data.frame(data.frame(y = 1), X)
one_dataset <- function(control, X_distributions){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
one_dataset <- function(control, X_dists){
X_vars <- lapply(X_distributions, eval_one, control = control)
data.frame(X_vars)
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
ds <- one_dataset(X_dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(control, X_dists){
X_vars <- lapply(X_dists, eval_one, control = control)
data.frame(X_vars)
}
eval_one <- function(one_expression, control){
eval(one_expression)
}
ds <- one_dataset(X_dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
ds <- one_dataset(X_dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
ds
svycoxme::one_dataset
ds <- one_dataset(X_dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
M_dists = list(M1 = expression(rep(1:control$k, each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(control, X_dists, M_dists){
X_vars <- lapply(X_dists, eval_one, control = control)
data.frame(X_vars)
}
ds <- one_dataset(X_dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk))),
M_dists = list(M1 = expression(rep(1:control$k, each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
ds
ds <- one_dataset(dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
M1 = expression(rep(1:control$k, each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
one_dataset <- function(control, dists){
vars <- lapply(dists, eval_one, control = control)
data.frame(vars)
}
ds <- one_dataset(dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
M1 = expression(rep(1:control$k, each = control$nk))),
control = list(k = 10, nk = 10, n = 100))
ds
ds <- one_dataset(dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
M1 = expression(rep(1:control$k, each = control$nk)),
M2 = expression(rep(c("l", "r"), ceiling(n/2))[seq_len(control$k * control$nk)]),
control = list(k = 10, nk = 10, n = 100)))
ds <- one_dataset(dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
M1 = expression(rep(1:control$k, each = control$nk)),
M2 = expression(rep(c("l", "r"), ceiling(n/2))[seq_len(control$k * control$nk)]),
control = list(k = 10, nk = 10, n = 100)))
ds <- one_dataset(dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
M1 = expression(rep(1:control$k, each = control$nk)),
M2 = expression(rep(c("l", "r"), ceiling(n/2))[seq_len(control$k * control$nk)])),
control = list(k = 10, nk = 10, n = 100))
ds
ds <- one_dataset(dists = list(X1 = expression(rnorm(control$n, 0, 1)),
X2 = expression(rep(rnorm(control$k, 0, 1), each = control$nk)),
X3 = expression(rep(rep(c(1, 0), ceiling(control$k/2))[seq_len(control$k)], each = control$nk)),
M1 = expression(rep(1:control$k, each = control$nk)),
M2 = expression(rep(c("l", "r"), ceiling(control$n/2))[seq_len(control$k * control$nk)])),
control = list(k = 10, nk = 10, n = 100))
ds
lme4::lFormula
formula("Y ~ X1 + X2 + X3 + (1|M)")
test_formula <- formula("Y ~ X1 + X2 + X3 + (1|M)")
subbars(test_formula)
lme4:::subbars(test_formula)
lme4:::RHSForm(test_formula)
lme4:::splitFormula(test_formula)
lme4:::subbars(test_formula)
lme4:::getFixedFormula(test_formula)
lme4:::getRandomFormula(test_formula)
lme4:::getResponseFormula(test_formula)
lme4:::getCovariateFormula(test_formula)
lme4::lFormula
fr.form <- lme4:::subbars(testformula)
fr.form <- lme4:::subbars(test_formula)
fr.form
environment(fr.form) <- environment(test_formula)
mf$formula <- fr.form
mkReTrms
lme4:::findbars(findbars:::RHSForm(formula))
lme4:::findbars(lme4:::RHSForm(formula))
lme4:::findbars(lme4:::RHSForm(test_formula))
lme4::mkReTrms(lme4:::findbars(lme4:::RHSForm(test_formula)))
data("Pixel", package="nlme")
mform <- pixel ~ day + I(day^2) + (day | Dog) + (1 | Side/Dog)
(bar.f <- findbars(mform)) # list with 3 terms
library(lme4)
(bar.f <- findbars(mform)) # list with 3 terms
mf <- model.frame(subbars(mform),data=Pixel)
rt <- mkReTrms(bar.f,mf)
names(rt)
rt
findbars(test_formula)
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_theta = 0.5
my_k = 10
my_nk = 10
my_beta = c(1, -0.7, 0.5)
my_theta = 0.5
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
ests <- tail(test_loop$estimate_history, 1)[[1]]
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- c(my_X, paste0("Z", seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = my_X,
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
# and penalties?
fit$penalty - attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
dplyr::pull(parm)
my_hessian <- svycoxme::ppl_hessian(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
reordered_names <- colnames(my_hessian)[c(seq_len(my_k) + 3, 1:3)]
reord_hessian <- my_hessian[reordered_names, reordered_names]
# decompose my hessian
library(bdsmatrix)
gchol_reord_hessian <- gchol(reord_hessian)
gchol_my_hessian <- gchol(my_hessian)
L <- as.matrix(gchol_reord_hessian)
D <- diag(gchol_reord_hessian)
# maximum error
max(L %*% diag(D) %*% t(L) - reord_hessian)
L <- as.matrix(fit$hmat)
D <- diag(fit$hmat)
back_trans_hmat <- L %*% diag(D) %*% t(L)
max(back_trans_hmat - (-1 * reord_hessian))
vcov(fit)
solve(-my_hessian)[1:3, 1:3]
