my_loglik <- lp(parms = coxme_est_parms,
X = my_X,
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
devtools::load_all(".")
my_loglik <- lp(parms = coxme_est_parms,
X = my_X,
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- c(my_X, paste0("Z", seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = my_X,
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
# and penalties?
fit$penalty - attr(my_loglik, "penalty")
fit$penalty
attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
dplyr::pull(parm)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
ordered_my_u
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
dplyr::pull(parm)
my_hessian <- svycoxme::ppl_hessian(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
stat_time = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
reordered_names <- colnames(my_hessian)[c(seq_len(my_k) + 3, 1:3)]
reord_hessian <- my_hessian[reordered_names, reordered_names]
gchol_reord_hessian <- gchol(reord_hessian)
gchol_my_hessian <- gchol(my_hessian)
# decompose my hessian
library(bdsmatrix)
gchol_reord_hessian <- gchol(reord_hessian)
gchol_my_hessian <- gchol(my_hessian)
L <- as.matrix(gchol_reord_hessian)
D <- diag(gchol_reord_hessian)
# maximum error
max(L %*% diag(D) %*% t(L) - reord_hessian)
L <- as.matrix(fit$hmat)
D <- diag(fit$hmat)
back_trans_hmat <- L %*% diag(D) %*% t(L)
back_trans_hmat - (-1 * reord_hessian)
vcov(fit)
solve(-my_hessian)[1:3, 1:3]
# looking at the variances and ignoring non-diagonal terms, they are the same.
cbind(
myvar = diag(solve(-reord_hessian)),
coxmevar = diag(fit$variance))
# solve(hmat) == coxme$variance
# More precisely, the inverse of coxme$hmat differs from coxme$variance by less
# than machine error.
hmat_inv <- solve(fit$hmat, full = TRUE)
all.equal(fit$variance, hmat_inv)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
theta_ipl_gr(one_theta = ests$new_theta,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
theta_ipl_gr
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
library(bdsmatrix)
D <- diag(coxme_fit$hmat)
L <- as.matrix(coxme_fit$hmat)
hess <- L %*% diag(D) %*% t(L)
hess_22 <- hess[seq_len(my_k), seq_len(my_k)]
inv_hess_22 <- solve(hess_22)
theta_inv <- 1/coxme::VarCorr(coxme_fit)$M
0.5 * (inner(b) * (theta_inv)^2 - sum(my_k * theta_inv) - sum(diag(inv_hess_22)))
0.5 * (inner(coxme::ranef(coxme_fit)$M) * (theta_inv)^2 - sum(my_k * theta_inv) - sum(diag(inv_hess_22)))
theta_ipl_gr(one_theta = ests$new_theta,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
ests$new_theta
coxme::VarCorr(coxme_fit)
coxme::VarCorr(coxme_fit)$M
theta_ipl_gr
0.5 * (inner(coxme::ranef(coxme_fit)$M) * (theta_inv)^2 - sum(my_k * theta_inv) - sum(diag(inv_hess_22)))
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
ests$new_beta_b
c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M)
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
ests
theta_ipl_gr(one_theta = ests$new_theta,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
devtools::load_all(".")
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
theta_ipl_gr(one_theta = ests$new_theta,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
devtools::load_all(".")
test_loop2 <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
test_loop
test_loop2
tail(test_loop, 1)
tail(test_loop2, 1)
tail(test_loop$estimate_history, 1)
tail(test_loop2$estimate_history, 1)
start_time <- Sys.time()
test_loop2 <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
end_time <- Sys.time()
end_time - start_time
devtools::load_all(".")
start_time <- Sys.time()
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
end_time <- Sys.time()
end_time - start_time
source("~/PhD_local/svycoxme/other_scripts/scratchpad.R")
results <- readr::read_rds("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/outputs/simulations/data/results_coxme_vs_epl_50_4.rds")
thetas <- plyr::ldply(results, function(df){
df["theta",]
})
library(ggplot2)
library(tidyverse)
thetas %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(name, value)) + geom_boxplot()
thetas %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density()
thetas %>%
mutate(diff = estimate_parameters_loop-coxme) %>%
ggplot(aes(diff)) + geom_density()
fixed_effects <- plyr::ldply(results_coxme_vs_estimate_parmeters_loop, function(df){
df %>%
rownames_to_column() %>%
filter(grepl("^X", rowname))
})
fixed_effects <- plyr::ldply(results, function(df){
df %>%
rownames_to_column() %>%
filter(grepl("^X", rowname))
})
fixed_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_grid(rows = vars(rowname))
fixed_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_grid(rows = vars(rowname)) +
geom_vline(data = data.frame(rowname = "X1"), xintercept = 1)
fixed_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_grid(rows = vars(rowname)) +
geom_vline(data = data.frame(rowname = "X1"), aes(xintercept = 1))
fixed_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_grid(rows = vars(rowname)) +
geom_vline(data = data.frame(rowname = "X1"), aes(xintercept = 1)) +
geom_vline(data = data.frame(rowname = "X1"), aes(xintercept = -0.7)) +
geom_vline(data = data.frame(rowname = "X1"), aes(xintercept = 0.5))
fixed_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_grid(rows = vars(rowname)) +
geom_vline(data = data.frame(rowname = "X1"), aes(xintercept = 1)) +
geom_vline(data = data.frame(rowname = "X2"), aes(xintercept = -0.7)) +
geom_vline(data = data.frame(rowname = "X3"), aes(xintercept = 0.5))
thetas %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
geom_vline(xintercept = 1)
random_effects <- plyr::ldply(results_coxme_vs_estimate_parmeters_loop, function(df){
df %>%
rownames_to_column() %>%
filter(grepl("^Z", rowname))
})
random_effects <- plyr::ldply(results, function(df){
df %>%
rownames_to_column() %>%
filter(grepl("^Z", rowname))
})
random_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_wrap(facets = vars(rowname), nrow = 5, ncol = 2)
random_effects %>%
pivot_longer(cols = c("estimate_parameters_loop", "coxme")) %>%
ggplot(aes(value, colour = name)) + geom_density() +
facet_wrap(facets = vars(rowname), nrow = 5, ncol = 10)
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
ests
fit_theta <- optim(par = ests$new_theta,
fn = theta_ipl,
gr = theta_ipl_gr,
parms = ests$new_beta_b,
X = X,
stat_time = stat_time,
dij = dij,
cluster = cluster,
data = data,
method = "L-BFGS-B",
control = list(fnscale = -1),
lower = 0.00001,
upper = 1000,
hessian = TRUE)
fit_theta <- optim(par = ests$new_theta,
fn = theta_ipl,
gr = theta_ipl_gr,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = 'M',
data = data,
method = "L-BFGS-B",
control = list(fnscale = -1),
lower = 0.00001,
upper = 1000,
hessian = TRUE)
fit_theta <- optim(par = ests$new_theta,
fn = theta_ipl,
gr = theta_ipl_gr,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = 'M',
data = ds,
method = "L-BFGS-B",
control = list(fnscale = -1),
lower = 0.00001,
upper = 1000,
hessian = TRUE)
fit_theta$hessian
kbb <- bb(parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
theta = ests$new_theta,
cluster = M,
data = ds,
return_matrix = TRUE)
kbb <- bb(parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
theta = ests$new_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
kbb
solve(kbb)
sum(diag(solve(kbb)))
ests$new_beta_b[-seq_along(my_X)]
inner(ests$new_beta_b[-seq_along(my_X)])
inner(ests$new_beta_b[-seq_along(my_X)]) + sum(diag(solve(kbb)))
t(ests$new_beta_b[-seq_along(my_X)]) %*% ests$new_beta_b[-seq_along(my_X)]
sum(diag(solve(kbb)))
the <- ests$new_theta
the
inner(ests$new_beta_b[-seq_along(my_X)]) + sum(diag(solve(kbb)))
(inner(ests$new_beta_b[-seq_along(my_X)]) + sum(diag(solve(kbb))))/length(my_k)
length(my_k)
(inner(ests$new_beta_b[-seq_along(my_X)]) + sum(diag(solve(kbb))))/my_k
(inner(ests$new_beta_b[-seq_along(my_X)]) - sum(diag(solve(kbb))))/my_k
# closed form for theta
(inner(ests$new_beta_b[-seq_along(my_X)]) - sum(diag(solve(kbb))))/my_k
2 * the^@
theta_ipl_gr(one_theta = ests$new_theta,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
2 * the^2
q <- my_k
q
kbb_inv <- solve(kbb)
2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv * kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )^(-1)
2 * the^2 * (q - (1/the^2) * sum(diag(kbb_inv * kbb_inv)) + (2/the) * sum(diag(kbb_inv)) )^(-1)
# should i change the sign here too?
the_var <- 2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv * kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )^(-1)
1/the_var
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
fit_theta <- optim(par = ests$new_theta,
fn = theta_ipl,
gr = theta_ipl_gr,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = 'M',
data = ds,
method = "L-BFGS-B",
control = list(fnscale = -1),
lower = 0.00001,
upper = 1000,
hessian = TRUE)
fit_theta$hessian
solve(fit_theta$hessian)
solve(-fit_theta$hessian)
fit_theta
ests
solve(-fit_theta$hessian)
kbb <- bb(parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
theta = ests$new_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
# closed form for theta
(inner(ests$new_beta_b[-seq_along(my_X)]) - sum(diag(solve(kbb))))/my_k
the <- ests$new_theta
q <- my_k
kbb_inv <- solve(kbb)
# should i change the sign here too?
the_var <- 2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv * kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )^(-1)
the_var
solve(-fit_theta$hessian)
# should i change the sign here too?
the_var <- 2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv %*% kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )^(-1)
the_va
the_var
the^2
2 * the^2
q
(1/the^2) * sum(diag(kbb_inv %*% kbb_inv))
(2/the) * sum(diag(kbb_inv))
2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv %*% kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )
-fit_theta$hessian
(q + (1/the^2) * sum(diag(kbb_inv %*% kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )^(-1)
2 * the^2 *
# should i change the sign here too?
the_var <- 2 * the^2 * ((q + (1/the^2) * sum(diag(kbb_inv %*% kbb_inv)) - (2/the) * sum(diag(kbb_inv)) )^(-1))
the_var
# should i change the sign here too?
the_var <- (2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv %*% kbb_inv)) - (2/the) * sum(diag(kbb_inv)) ))^(-1)
the_var
# should i change the sign here too?
the_var <- 2 * the^2 * (q + (1/the^2) * sum(diag(kbb_inv %*% kbb_inv)) - (2/the) * sum(diag(kbb_inv)))^(-1)
the_var
