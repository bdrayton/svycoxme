cluster = "M",
dij = stat,
D = D,
data = sample_data)
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS")
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS")
fit_optim
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
lp_grd(my_parms, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, D = D)
lp_grd(start_parameters, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, D = D)
dlp_b(start_parameters, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, D = D)
debugonce(dlp_b)
dlp_b(start_parameters, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, D = D)
penalty
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
fit_coxph <-
tryCatch(
survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3 +
survival::frailty(M,
distribution = "gaussian",
method = "reml"),
control = survival::coxph.control(iter.max = 5000,
outer.max = 20,
timefix = FALSE),
data = sample_data),
warning = function(w) w,
error = function(e) e)
fit_coxph$penalty
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data)
b_fit <- coxme::ranef(fit_coxme)$M
theta_fit <- coxme::VarCorr(fit_coxme)$M
D_theta_fit <- theta_fit * diag(length(b_fit))
lp(c(coxme::fixef(fit_coxme), coxme::ranef(fit_coxme)$M),
X = c("X1", "X2", "X3"), t = t, cluster = M, dij = stat, D = D_theta_fit, data = sample_data)
fit_coxme$penalty
fit_coxme$loglik
fit_coxph$penalty
fit_coxph$penalty*2
fit_coxph$loglik
cbind(fit_optim$par,
c(coxme::fixef(fit_coxme), coxme::ranef(fit_coxme)))
coxme::ranef(fit_coxme))
coxme::ranef(fit_coxme)
cbind(fit_optim$par,
c(coxme::fixef(fit_coxme), coxme::ranef(fit_coxme)$M))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme),
coef(fit_coxph))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,vfixed = list(M = my_theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
my_beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
my_theta = 0.2
sample_data <- one_dataset(control = list(k = 10, nk = 4, beta = my_beta, theta = my_theta))
devtools::load_all(".")
getwd()
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
sample_data <- one_dataset(control = list(k = 10, nk = 4, beta = my_beta, theta = my_theta))
my_parms <- c(my_beta, b <- attr(sample_data, "random_effects"))
names(my_parms) <- c(paste0("X", 1:3), paste0("Z", seq_len(length(b))))
names(b) <- paste0("Z", seq_len(length(b)))
D = my_theta * diag(length(b))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = my_theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
my_beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
my_theta = 0.2
sample_data <- one_dataset(control = list(k = 10, nk = 4, beta = my_beta, theta = my_theta))
D = my_theta * diag(length(b))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
my_beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
my_theta = 0.2
my_k = 10
my_nk = 4
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
my_beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
my_theta = 0.2
my_k = 10
my_nk = 4
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# my_parms <- c(my_beta, b <- attr(sample_data, "random_effects"))
#
# names(my_parms) <- c(paste0("X", 1:3), paste0("Z", seq_len(length(b))))
# names(b) <- paste0("Z", seq_len(length(b)))
D = my_theta * diag(my_k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, my_k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(my_k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = my_theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
my_beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
my_theta = 0.2
my_k = 100
my_nk = 10
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# my_parms <- c(my_beta, b <- attr(sample_data, "random_effects"))
#
# names(my_parms) <- c(paste0("X", 1:3), paste0("Z", seq_len(length(b))))
# names(b) <- paste0("Z", seq_len(length(b)))
D = my_theta * diag(my_k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, my_k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(my_k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = my_theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
onerep <- function(beta, theta, k, nk){
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = my_theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
}
onerep(beta = my_beta, theta = my_theta, k = my_k, nk = my_nk)
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
my_beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
my_theta = 0.2
my_k = 100
my_nk = 10
onerep <- function(beta, theta, k, nk){
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = my_theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
}
onerep(beta = my_beta, theta = my_theta, k = my_k, nk = my_nk)
rep(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5)
theta = 0.2
k = 100
nk = 10),
2)
rep(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5),
theta = 0.2,
k = 100,
nk = 10),
2)
rep(list(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5),
theta = 0.2,
k = 100,
nk = 10)),
2)
parCombos <- rep(list(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5),
theta = 0.2,
k = 100,
nk = 10)),
2)
onerep <- function(control){
beta = control$beta
theta = control$theta
k = control$k
nk = control$nk
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = my_theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
cbind(fit_optim$par[1:3],
coxme::fixef(fit_coxme))
}
onerep(control = parCombos[[1]])
onerep <- function(control){
beta = control$beta
theta = control$theta
k = control$k
nk = control$nk
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = my_theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
data.frame(svycoxme = fit_optim$par[1:3],
coxme = coxme::fixef(fit_coxme))
}
onerep(control = parCombos[[1]])
lapply(parCombos, onerep)
cl <- parallel::makeCluster(parallel::detectCores()-1)
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
fits <- parallel::parLapply(cl, parCombos)
fits <- parallel::parLapply(cl, parCombos, onerep)
parallel::clusterEvalQ(cl, {
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
})
fits <- parallel::parLapply(cl, parCombos, onerep)
parCombos <- rep(list(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5),
theta = 0.2,
k = 100,
nk = 10)),
2)
onerep <- function(control){
beta = control$beta
theta = control$theta
k = control$k
nk = control$nk
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
data.frame(svycoxme = fit_optim$par[1:3],
coxme = coxme::fixef(fit_coxme))
}
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep"))
fits <- parallel::parLapply(cl, parCombos, onerep)
#stop the cluster
parallel::stopCluster(cl)
fits
parCombos <- rep(list(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5),
theta = 0.2,
k = 100,
nk = 10)),
1000)
onerep <- function(control){
beta = control$beta
theta = control$theta
k = control$k
nk = control$nk
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
data.frame(svycoxme = fit_optim$par[1:3],
coxme = coxme::fixef(fit_coxme))
}
onerep(control = parCombos[[1]])
cl <- parallel::makeCluster(parallel::detectCores()-1)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
})
fits <- parallel::parLapply(cl, parCombos, onerep)
#stop the cluster
parallel::stopCluster(cl)
parCombos <- rep(list(list(
beta = c(X1 = 1, X2 = -0.7, X3 = 0.5),
theta = 0.2,
k = 100,
nk = 10)),
10)
onerep <- function(control){
beta = control$beta
theta = control$theta
k = control$k
nk = control$nk
sample_data <- one_dataset(control = list(k = k, nk = nk, beta = beta, theta = theta))
D = theta * diag(k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
data.frame(svycoxme = fit_optim$par[1:3],
coxme = coxme::fixef(fit_coxme))
}
cl <- parallel::makeCluster(parallel::detectCores()-1)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
})
fits <- parallel::parLapply(cl, parCombos, onerep)
#stop the cluster
parallel::stopCluster(cl)
fits_df = purrr::reduce(fits, dplyr::bind_rows)
fits_df
res <- readr::read_rds(file = "C://Users/bdra011/OneDrive - The University of Auckland/PhD/outputs/simulations/data/results_optim_vs_coxph.rds")
res
library(tidyverse)
res %>%
pivot_longer()
res %>%
pivot_longer(cols = everything())
res %>%
rownames_to_column()
res %>%
rownames_to_column() %>%
mutate(coef = substr(rowname, 1, 2))
res %>%
res %>%
rownames_to_column() %>%
mutate(coef = substr(rowname, 1, 2), .before = everything()) %>%
select(-rowname) %>%
pivot_longer(cols = c("svycoxme", "coxme"))
tidyres <- res %>%
rownames_to_column() %>%
mutate(coef = substr(rowname, 1, 2), .before = everything()) %>%
select(-rowname) %>%
pivot_longer(cols = c("svycoxme", "coxme"))
ggplot(tidyres, aes(value, colour = name)) + facet_grid(cols = vars(coef))
ggplot(tidyres, aes(value, colour = name)) + geom_density() + facet_grid(cols = vars(coef))
ggplot(tidyres, aes(value, colour = name)) + geom_boxplot() + facet_grid(cols = vars(coef))
res <- readr::read_rds(file = "C://Users/bdra011/OneDrive - The University of Auckland/PhD/outputs/simulations/data/results_optim_vs_coxph.rds")
library(tidyverse)
tidyres <- res %>%
rownames_to_column() %>%
mutate(coef = substr(rowname, 1, 2), .before = everything()) %>%
select(-rowname) %>%
pivot_longer(cols = c("svycoxme", "coxme"))
ggplot(tidyres, aes(value, colour = name)) + geom_density() + facet_grid(cols = vars(coef))
ggplot(tidyres, aes(value, colour = name)) + geom_boxplot() + facet_grid(cols = vars(coef))
tidyres
tidyres %>%
group_by(coef, name) %>%
summarise(mean(value))
tidyres %>%
group_by(coef, name) %>%
summarise(mean = mean(value)) %>%
pivot_wider(names_from = name, values_from = mean)
