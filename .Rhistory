colSums(wi)
colSums(ui)
hist(ui - wi)
hist(ui - wi[1])
ui - wi
(ui - wi)[,1]
hist((ui - wi)[,1])
my_samp$rweights
debugonce(calc_wi.coxph_parts)
wi <- calc_wi(parts)
sum(parts$weights)
attach(parts)
term2 <- fast_risk_sets((stat * exp_risk_score/(N * S0)) *
(X - S1/S0))
N <- sum(parts$weights)
term2 <- fast_risk_sets((stat * exp_risk_score/(N * S0)) *
(X - S1/S0))
max(term2)
plot(term2, stat*(X - S1/S0))
revcumsum
install.packages("statstat.utils")
install.packages("spatstat.utils")
library(spatstat.utils)
fast_risk_sets()
fast_risk_sets
test_matrix <- matrix(rnorm(1000), ncol = 2)
fast_risk_sets(test_matrix)
revcumsum(test_matrix)
apply(test_matrix, 2, revcumsum)
r1 <- apply(test_matrix, 2, revcumsum)
r2 <- fast_risk_sets(test_matrix)
all.equal(r1, r2)
as.matrix(r1)
all.equal(as.matrix(r1), as.matrix(r2))
microbenchmark::microbenchmark(
apply(test_matrix, 2, revcumsum),
fast_risk_sets(test_matrix)
)
test_matrix <- matrix(rnorm(10000), ncol = 10)
r1 <- apply(test_matrix, 2, revcumsum)
r2 <- fast_risk_sets(test_matrix)
all.equal(as.matrix(r1), as.matrix(r2))
microbenchmark::microbenchmark(
apply(test_matrix, 2, revcumsum),
fast_risk_sets(test_matrix)
)
revcumsum
test_matrix <- matrix(rnorm(100000), ncol = 100)
r1 <- apply(test_matrix, 2, revcumsum)
r2 <- fast_risk_sets(test_matrix)
all.equal(as.matrix(r1), as.matrix(r2))
microbenchmark::microbenchmark(
apply(test_matrix, 2, revcumsum),
fast_risk_sets(test_matrix)
)
ScoreAll <- function(  beta0, XX, we, d){
eta_x  <-  as.vector((cbind(XX%*%beta0)) +mydata_sample1$b)
eta_xM <- cbind(eta_x)
S0  <-  as.vector(apply(eta_xM  , 2,   function(x) revcumsum(we*exp(x))))
Aux1  <-  exp(eta_x)*XX
Aux3a  <-  exp(eta_x)*XX/S0
S1x <- apply( Aux1*we ,   2, function(x) revcumsum( (x)))
Aux4a  <-  exp(eta_x)*S1x/(S0^2)
cum3a  <- apply( Aux3a*d*we ,   2, function(x) revcumsum( (x)))
cum4a  <- apply( Aux4a*d*we ,   2, function(x) revcumsum( (x)))
UX <- d* (XX-S1x/S0 ) - cum3a + cum4a
return( cbind(UX) )
}
# clauida's score.
names(parts)
ScoreAll(beta0 = coef(coxph.object),
XX = parts$X, we = parts$weights,
d = parts$stat)
coef(coxph_fit)
# clauida's score.
ScoreAll(beta0 = coef(coxph_fit),
XX = parts$X, we = parts$weights,
d = parts$stat)
ScoreAll <- function(  beta0, XX, we, d){
eta_x  <-  as.vector(cbind(XX%*%beta0))
eta_xM <- cbind(eta_x)
S0  <-  as.vector(apply(eta_xM  , 2,   function(x) revcumsum(we*exp(x))))
Aux1  <-  exp(eta_x)*XX
Aux3a  <-  exp(eta_x)*XX/S0
S1x <- apply( Aux1*we ,   2, function(x) revcumsum( (x)))
Aux4a  <-  exp(eta_x)*S1x/(S0^2)
cum3a  <- apply( Aux3a*d*we ,   2, function(x) revcumsum( (x)))
cum4a  <- apply( Aux4a*d*we ,   2, function(x) revcumsum( (x)))
UX <- d* (XX-S1x/S0 ) - cum3a + cum4a
return( cbind(UX) )
}
# clauida's score.
ScoreAll(beta0 = coef(coxph_fit),
XX = parts$X, we = parts$weights,
d = parts$stat)
# clauida's score.
wi2 <- ScoreAll(beta0 = coef(coxph_fit),
XX = parts$X, we = parts$weights,
d = parts$stat)
plot(ui, wi2)
plot(ui, wi2)
plot(wi2, score)
microbenchmark::microbenchmark(
apply(test_matrix, 2, revcumsum),
fast_risk_sets(test_matrix)
)
test_matrix <- matrix(rnorm(1000), ncol = 100)
r1 <- apply(test_matrix, 2, revcumsum)
r2 <- fast_risk_sets(test_matrix)
all.equal(as.matrix(r1), as.matrix(r2))
microbenchmark::microbenchmark(
apply(test_matrix, 2, revcumsum),
fast_risk_sets(test_matrix)
)
test_matrix <- matrix(rnorm(1000000), ncol = 100)
r1 <- apply(test_matrix, 2, revcumsum)
r2 <- fast_risk_sets(test_matrix)
all.equal(as.matrix(r1), as.matrix(r2))
microbenchmark::microbenchmark(
apply(test_matrix, 2, revcumsum),
fast_risk_sets(test_matrix)
)
abline(a = 0, b = 1, colour = "red")
abline(a = 0, b = 1, col = "red")
fast_risk_sets()
fast_risk_sets
parts$S0|> dim()
apply(parts$S0, 1 , tcrossprod)
v1 <- apply(parts$S0, 1 , tcrossprod)
v2 <- parts$S0^2
all.equal(v1, v2@x)
warnings()
all.equal(v1, v2@x)
term_2
names(parts)
term1 <- with(parts, {
stat * (X - S1/S0)
})
dim(term1)
class(term1)
term2 <- term1
term2 <- term1
term2@x <- NA_real_
parts$X[1,]
parts$exp_risk_score[1]
parts$exp_risk_score[1,]
dim(parts$exp_risk_score)
for (i in seq_len(n)) {
parts$X[i, ] * parts$exp_risk_score[i, ]
}
n = nrow(term2)
for (i in seq_len(n)) {
parts$X[i, ] * parts$exp_risk_score[i, ]
}
for (i in seq_len(n)) {
parts$X[i, ] * parts$exp_risk_score[i, ] / parts$S0[i:n,]
}
warnings()
i = 1
parts$X[i, ]
parts$X[i, ] * parts$exp_risk_score[i, ]
parts$X[i, ] * parts$exp_risk_score[i, ] / parts$S0[i:n,]
parts$X[i, , drop = FALSE]
i = 1
with(parts, {
X[i, , drop = FALSE] * exp_risk_score[i, , drop = FALSE] / S0[i:n,, drop=FALSE]
})
i = 1
X[i, , drop = FALSE] * exp_risk_score[i, , drop = FALSE]
S0[i:n,, drop=FALSE]
length(i:n)
length(2:n)
n - i
n - 2
with(parts, {
index = rep(i, n - i + 1)
X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[i:n,, drop=FALSE]
})
i = 1000
with(parts, {
index = rep(i, n - i + 1)
nrow(
X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[i:n,, drop=FALSE]
)
}) |> print()
i = 1
with(parts, {
index = rep(i, n - i + 1)
nrow(
X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[i:n,, drop=FALSE]
)
}) |> print()
i = 2000
index = rep(i, n - i + 1)
nrow(
X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[i:n,, drop=FALSE]
)
}) |> print()
with(parts, {
index = rep(i, n - i + 1)
nrow(
X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[i:n,, drop=FALSE]
)
}) |> print()
for (i in seq_len(n)) {
with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weight * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> head()
}
for (i in seq_len(n)) {
with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> head()
}
i = 1
with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> head()
with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> colSums()
for (i in seq_len(n)) {
terms2[i, ] <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> colSums()
}
for (i in seq_len(n)) {
term2[i, ] <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> colSums()
}
i = 1
term2[i, ]
term2 <- term1
term2 <- term1
term2@x <- rep(NA_real_, length(term2@x))
parts$X[1,]
n = nrow(term2)
n
term2[i, ]
for (i in seq_len(n)) {
term2[i, ] <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> colSums()
}
with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> colSums() |> dim()
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
i = 1
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
temp
colSums(temp)
i = 2000
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
temp
colSums(temp)
term2[1, ] <- colSums(temp)
term2 <- term1
term2@x <- rep(NA_real_, length(term2@x))
n = nrow(term2)
for (i in seq_len(n)) {
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> colSums()
term2[i, ] <- colSums(temp)
}
for (i in seq_len(n)) {
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
}) |> Matrix::colSums()
term2[i, ] <- colSums(temp)
}
for (i in seq_len(n)) {
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
term2[i, ] <- colSums(temp)
}
for (i in seq_len(n)) {
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
print(i)
term2[i, ] <- colSums(temp)
}
i = 1985
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
temp
colSums(temp)
term2[i, ] <- colSums(temp)
term2 <- term1
term2@x <- rep(NA_real_, length(term2@x))
n = nrow(term2)
for (i in seq_len(n)) {
temp <- with(parts, {
index = rep(i, n - i + 1)
index2 = i:n
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
print(i)
term2[i, ] <- colSums(temp)
}
for (i in seq_len(n)) {
temp <- with(parts, {
index2 = i:n
index = rep(i, length(i:n))
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
print(i)
term2[i, ] <- colSums(temp)
}
dim(term2)
make_term2_row <- function(i, parts){
temp <- with(parts, {
index2 = i:n
index = rep(i, length(i:n))
stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
exp_risk_score[index, , drop = FALSE] /
S0[index2, , drop=FALSE]
})
colSums(temp)
}
make_term2_row(1985, parts)
make_term2_row(1986, parts)
make_term2_row <- function(i, n, parts){
# temp <- with(parts, {
#
#   index2 = i:n
#   index = rep(i, length(i:n))
#
#   stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
#     exp_risk_score[index, , drop = FALSE] /
#     S0[index2, , drop=FALSE]
#
#
# })
index2 = i:n
index = rep(i, length(i:n))
temp <- parts$stat[index2, ] *
parts$weights[index2, ] *
parts$X[index, , drop = FALSE] *
parts$exp_risk_score[index, , drop = FALSE] /
parts$S0[index2, , drop=FALSE]
colSums(temp)
}
make_term2_row(1986, parts)
make_term2_row(1986, n = nrow(term1) parts)
make_term2_row(1986, n = nrow(term1), parts)
debugonce(make_terms2_row)
debugonce(make_terms2_row)
make_term2_row <- function(i, n, parts){
# temp <- with(parts, {
#
#   index2 = i:n
#   index = rep(i, length(i:n))
#
#   stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
#     exp_risk_score[index, , drop = FALSE] /
#     S0[index2, , drop=FALSE]
#
#
# })
index2 = i:n
index = rep(i, length(i:n))
temp <- parts$stat[index2, ] *
parts$weights[index2, ] *
parts$X[index, , drop = FALSE] *
parts$exp_risk_score[index, , drop = FALSE] /
parts$S0[index2, , drop=FALSE]
colSums(temp)
}
debugonce(make_term2_row)
make_term2_row(1986, n = nrow(term1), parts)
parts$stat[index2, ] *
parts$weights[index2, ]
parts$stat[index2, ] *
parts$weights[index2, ] *
parts$X[index, , drop = FALSE]
make_term2_row <- function(i, n, parts){
# temp <- with(parts, {
#
#   index2 = i:n
#   index = rep(i, length(i:n))
#
#   stat[index2, ] * weights[index2, ] * X[index, , drop = FALSE] *
#     exp_risk_score[index, , drop = FALSE] /
#     S0[index2, , drop=FALSE]
#
#
# })
index2 = i:n
index = rep(i, length(i:n))
temp <- parts$stat[index2, , drop = FALSE] *
parts$weights[index2, , drop = FALSE] *
parts$X[index, , drop = FALSE] *
parts$exp_risk_score[index, , drop = FALSE] /
parts$S0[index2, , drop=FALSE]
colSums(temp)
}
make_term2_row(1986, n = nrow(term1), parts)
n = nrow(term1)
for (i in seq_len(n)) {
term2[i, ] <- make_term2_row(i = i, n = n, parts = parts)
}
term2_v2 <- with(parts, {
X * exp_risk_score * fast_risk_sets(stat * weights / S0)
})
warnings()
term2_v2 <- with(parts, {
X * exp_risk_score * fast_risk_sets(stat * weights / S0)
})
all.equal(term2, term2_v2)
term3 <- with(parts, {
exp_risk_score * fast_risk_sets( stat * weights * S1 / S0^2)
})
dim(term1)
dim(term2_v2)
dim(term3)
term1 - term2 + term3
my_score <- term1 - term2 + term3
dim(wi2)
plot(wi2[,1], my_score[,1])
plot(wi2[,1], my_score[,1])
plot(wi2[,2], my_score[,2])
plot(wi2[,3], my_score[,3])
