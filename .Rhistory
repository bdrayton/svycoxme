a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] = resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] = resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
}
resid
resid(fit, type = "score")
seq(1, 10)
person = 1
person = 1
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] = resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] = resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] = resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] = resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
}
n = nrow(parts3$stat)
people = seq(n)
a = vector("double", length = 2)
a2 = a
mean = a
resid = parts3$X
resid[] = 0
covar = parts3$X
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] = resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] = resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
}
debug(resid)
debug(one_resid)
one_resid(1)
resid
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] = resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] = resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
resid
}
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] = resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] = resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
resid
}
one_resid(1)
resid(fit, type = "score")
resid[] = 0
covar = parts3$X
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] <<- resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] <<- resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
}
one_resid(1)
resid
one_resid(2)
resid
resid(fit, type = "score")
debug(one_resid)
resid[] = 0
one_resid(1)
one_resid(2)
denom
parts
parts3$time_start
time
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < current_stop_time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] <<- resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==current_stop_time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] <<- resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
}
one_resid(1)
resid
resid[] = 0
one_resid(1)
resid
one_resid(2)
resid
resid(fit, type = "score")
resid[] = 0
for (person in people) {
one_resid()
}
resid[] = 0
for (person in people) {
one_resid(person)
}
people
for (person in people) {
print(person)
one_resid(person)
}
resid
resid(fit, type = "score")
resid[] = 0
for (person in people) {
print(person)
one_resid(person)
}
resid
resid(fit, type = "score")
# by hand walk through of the therneau agscore2.c script
test2 <- list(
# start=c(0,0,0,0,0,0,0,0,0,0),
start=c(1,2,5,2,1,7,3,4, 8, 8),
stop= c(2,3,6,7,8,9,10,11,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) |>
as.data.frame()
test2 <- test2[order(test2$stop, test2$start),]
test2$y <- rev(seq(n))
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
library(ggplot2)
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y)) + geom_segment()
resid[] = 0
one_resid(1)
resid
resid[] = 0
one_resid(1)
resid
one_resid(2)
resid
resid(fit, type = "score")
resid[] = 0
for (person in people) {
print(person)
one_resid(person)
}
resid
resid(fit, type = "score")
# by hand walk through of the therneau agscore2.c script
test2 <- list(
# start=c(0,0,0,0,0,0,0,0,0,0),
start=c(1,2,5,2,1,7,3,4, 8, 8),
stop= c(2,3,6,7,8,9,10,11,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) |>
as.data.frame()
test2 <- test2[order(test2$stop, test2$start),]
test2$y <- rev(seq(n))
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
library(ggplot2)
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y)) + geom_segment()
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
n = nrow(parts3$stat)
people = seq(n)
a = vector("double", length = 2)
a2 = a
mean = a
resid = parts3$X
resid[] = 0
covar = parts3$X
one_resid = function(person){
if(parts3$stat[person, ] == 0){
next
} else {
current_stop_time = parts3$time_stop[person, ]
denom =0;
e_denom =0;
meanwt =0;
deaths =0;
a[] =0;
a2[]=0;
mean[]=0
# loop through all the people after
for (k in seq(person, n)) {
# check if the start time is before the current start time.
if(parts3$time_start[k, ] < current_stop_time){
denom = denom + parts3$weighted_exp_risk_score[k, ]
a = a + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
if(parts3$time_stop[k, ] == current_stop_time & parts3$stat[k, ] == 1){
deaths = deaths + 1
e_denom = e_denom + parts3$weighted_exp_risk_score[k, ]
meanwt = meanwt + parts3$weights[k, ]
a2 = a2 + parts3$weighted_exp_risk_score[k, ] * parts3$X[k, ]
}
}
}
hazard = meanwt/denom
mean = a/denom
for (k in seq(person, n)) {
if (parts3$time_start[k, ] < current_stop_time) {
risk =  parts3$exp_risk_score[k,]
resid[k,] <<- resid[k,] - (covar[k,] -mean)*risk*hazard
if (parts3$time_stop[k,]==current_stop_time) {
# person gets incremented here for all tied times.
# person++
if (parts3$stat[k, ]==1){
resid[k, ] <<- resid[k, ] + (covar[k, ] -mean)
}
}
}
# if (strata[k]==1) break;
}
}
}
resid[] = 0
for (person in people) {
print(person)
one_resid(person)
}
resid
resid(fit, type = "score")
