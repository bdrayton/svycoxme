X = X,
stat_time = {{ stat_time }},
dij = {{ dij }},
cluster = cluster,
data = data,
method = "BFGS",
control = list(fnscale = -1))
fit_theta
}
optim_loop(theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
# start shit
optim_loop <- function(start_theta,
start_parms,
X,
stat_time,
cluster,
dij,
data = ds) {
fit_beta_b <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = X,
stat_time = {{ stat_time }},
cluster = cluster,
dij = {{ dij }},
theta = start_theta,
data = data,
method = "BFGS",
control = list(fnscale = -1))
fit_theta <- optim(par = c(start_theta),
parms = fit_beta_b$par,
X = X,
stat_time = {{ stat_time }},
dij = {{ dij }},
cluster = cluster,
data = data,
method = "BFGS",
control = list(fnscale = -1))
fit_theta
}
optim_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
# start shit
optim_loop <- function(start_theta,
start_parms,
X,
stat_time,
cluster,
dij,
data = ds) {
fit_beta_b <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = X,
stat_time = {{ stat_time }},
cluster = cluster,
dij = {{ dij }},
theta = start_theta,
data = data,
method = "BFGS",
control = list(fnscale = -1))
fit_theta <- optim(par = c(start_theta),
fn = theta_ipl,
gr = NULL,
parms = fit_beta_b$par,
X = X,
stat_time = {{ stat_time }},
dij = {{ dij }},
cluster = cluster,
data = data,
method = "BFGS",
control = list(fnscale = -1))
fit_theta
}
optim_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
devtools::load_all(".")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
my_D <- my_theta * diag(my_nk)
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
library(coxme)
coxfit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fit0 <- coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_nk))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
warnings()
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
my_D <- my_theta * diag(my_nk)
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# library(coxme)
# coxfit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fit0 <- coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_nk))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_nk))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
devtools::load_all(".")
devtools::load_all(".")
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
devtools::load_all(".")
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
devtools::load_all(".")
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop
library(coxme)
coxme_fit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fixed.effects(coxme_fit)
random.effects(coxme_fit)
VarCorr(coxme_fit)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
my_D <- my_theta * diag(my_nk)
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# library(coxme)
# coxfit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_nk))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
library(coxme)
coxme_fit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fixed.effects(coxme_fit)
random.effects(coxme_fit)
VarCorr(coxme_fit)
names(test_loop)
test_loop$converged
tail(test_loop$estimate_history, 1)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# library(coxme)
# coxfit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_nk))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
library(coxme)
coxme_fit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fixed.effects(coxme_fit)
random.effects(coxme_fit)
VarCorr(coxme_fit)
test_loop$converged
tail(test_loop$estimate_history, 1)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_nk))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
debugonce(estimate_parameters)
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
debugonce(lp)
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
debug(calcLinearPredictor)
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
long_data %>%
dplyr::mutate(
effects = rep(dplyr::all_of(parms), nrow(data)),
partial_linear_pred = value * effects
)
rep(dplyr::all_of(parms), nrow(data))
length(rep(dplyr::all_of(parms), nrow(data)))
parms
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# library(coxme)
# coxfit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_nk)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
library(coxme)
coxme_fit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fixed.effects(coxme_fit)
random.effects(coxme_fit)
VarCorr(coxme_fit)
test_loop$converged
tail(test_loop$estimate_history, 1)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
library(coxme)
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme::fixef(coxme_fit)
coxme::ranef(coxme_fit)
coxme::VarCorr(coxme_fit)
test_loop$converged
tail(test_loop$estimate_history, 1)
ests <- tail(test_loop$estimate_history, 1)
ests$new_beta_b
ests <- tail(test_loop$estimate_history, 1)
ests$new_beta_b
ests
ests <- tail(test_loop$estimate_history, 1)[[1]]
ests$new_beta_b
cbind(ests$new_beta_b,
c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)))
cbind(ests$new_beta_b,
c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M))
coxme::VarCorr(coxme_fit)
est$new_theta
ests$new_theta
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
test_loop$converged
ests <- tail(test_loop$estimate_history, 1)[[1]]
library(coxme)
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme::VarCorr(coxme_fit)
ests$new_theta
cbind(ests$new_beta_b,
c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M))
coxme::VarCorr(coxme_fit)
ests$new_theta
c(ests$new_beta_b, theta = ests$new_theta)
cbind(c(ests$new_beta_b, theta = ests$new_theta),
c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M, theta = coxme::VarCorr(coxme_fit)$M))
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
one_rep <- function(){
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
cbind(c(ests$new_beta_b, theta = ests$new_theta),
c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M, theta = coxme::VarCorr(coxme_fit)$M))
}
one_rep()
one_rep <- function(){
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
data.frame(estimate_parameters_loop = c(ests$new_beta_b, theta = ests$new_theta),
coxme = c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M,
theta = coxme::VarCorr(coxme_fit)$M))
}
one_rep()
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
# results_filepath <-  "/home/bdra011/data/results_coxme_vs_estimate_parameters_loop.rds"
results_filepath <-  "C:/Users/Bradley/OneDrive - The University of Auckland/PhD/outputs/simulations/data/results_coxme_vs_estimate_parameters_loop.rds"
nreps = 2
one_rep <- function(...){
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
data.frame(estimate_parameters_loop = c(ests$new_beta_b, theta = ests$new_theta),
coxme = c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M,
theta = coxme::VarCorr(coxme_fit)$M))
}
cl <- parallel::makeCluster(parallel::detectCores()-2)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep"))
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
# devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
# devtools::load_all(path = "/home/bdra011/svycoxme")
})
fits <- parallel::parLapply(cl, split(seq_len(nreps), seq_len(nreps)) , onerep)
fits <- parallel::parLapply(cl, split(seq_len(nreps), seq_len(nreps)) , one_rep)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep", "my_beta", "my_theta", "my_k", "my_nk", "my_X"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
# devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
# devtools::load_all(path = "/home/bdra011/svycoxme")
})
fits <- parallel::parLapply(cl, split(seq_len(nreps), seq_len(nreps)) , one_rep)
#stop the cluster
parallel::stopCluster(cl)
fits
