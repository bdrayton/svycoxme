<<<<<<< Updated upstream
kpp <- K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
kbb <- bb(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
-0.5 * log(det(kpp))
-0.5 * log(det(kbb))
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- coef(fitph)
start_parms
start_parms <- c(coef(fitph), rep(0, length(b)))
start_parms <- c(coef(fitph), rep(0, length(my_b)))
diag(length(my_b))
test_theta <- 0.8
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- c(coef(fitph), rep(0, length(my_b)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = cluster,
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
test_theta <- 0.8
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- c(coef(fitph), rep(0, length(my_b)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = M,
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
lp(parms = start_parms, X = my_X, dij = stat, theta = test_theta, cluster = "M", data = ds)
debugonce(lp)
lp(parms = start_parms, X = my_X, dij = stat, theta = test_theta, cluster = "M", data = ds)
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
lp(parms = start_parms, X = my_X, dij = stat, theta = test_theta, cluster = "M", data = ds)
lp(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
my_D <-  test_theta * diag(length(my_b))
-0.5 * ( log(det(my_D)) )
kpp <- K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds)
kpp
kbb <- bb(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
kbb
b <- fit_optim$par[-seq_len(length(my_X))]
b
fit_optim$par
start_parms
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
test_theta
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
lp(start_parms, my_X, "t", stat, test_theta, "M", ds)
start_parms <- c(coef(fitph), rep(0.1, length(my_b)))
lp(start_parms, my_X, "t", stat, test_theta, "M", ds)
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = 1))
fit_optim
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
debugonce(lp_grd)
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
debugonce(lp_grd)
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
theta
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
debugonce(lp_grd)
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
l5
debugonce(dlp_b)
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
ll_unpenalized
penalty
D
solve(D)
seq_len(nk)
seq_len(nk)
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
names(start_parms)
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
start_parms
start_parms <- c(coef(fitph), rep(0, length(my_b)))
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
kpp <- K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds)
kbb <- bb(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
kbb
b <- fit_optim$par[-seq_len(length(my_X))]
b
inner(b)
inner(b) * test_theta
b %*% my_D %*% b
inner(b) * test_theta == b %*% my_D %*% b
inner(b) * test_theta
-0.5 * ( log(det(my_D)) + log(det(kpp)) +  inner(b) * test_theta)
-0.5 * ( log(det(my_D)) + log(det(kbb)) +  inner(b) * test_theta)
-0.5 * ( log(det(my_D)) + log(det(kpp)) +  inner(b) * test_theta)
-0.5 * ( log(det(my_D)) + log(det(kbb)) +  inner(b) * test_theta)
devtools::load_all(".")
devtools::load_all(".")
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = t, cluster = "M", dij = stat, data = ds)
debugonce(optim_ipl)
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = t, cluster = "M", dij = stat, data = ds)
debugonce(optim_ipl)
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = t, cluster = "M", dij = stat, data = ds)
start_parms
X
t
debugonce(optim_ipl)
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = "t", cluster = "M", dij = stat, data = ds)
fit_optim
start_parms
-0.5 * ( log(det(my_D)) + log(det(kpp)) +  inner(b) * test_theta)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "BGFS", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "BFGS", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "BFG", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds, lower = 0, upper = 100)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "L-BFGS-B", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds, lower = 0, upper = 100)
coxfit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme::VarCorr(coxfit)
coxme::VarCorr(coxfit)$M
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "L-BFGS-B", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds,
lower = 0.01, upper = 100)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "L-BFGS-B", control = list(fnscale = 1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds,
lower = 0.01, upper = 100)
=======
library(grid)
grid.newpage()
pushViewport(viewport(width = 0.9, height = 0.9, yscale = c(0,1)))
with(tupuna, grid.text(name, col, row))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2.45, 2.45, NA)/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 4.75, 6, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(2.37, 2.53, NA)/4,
y =(c(5, 5, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
tupuna <- data.frame(
name = c("Ann Kaiaraki", "Ann (Makee) Lidiard", "Edward J Stevens", "John E Stevens",
"Te Ruahikihiki", "Taoka", "Te Auta", "Riria Te Auta", "Caroline (Kuini) Hunt",
"Kura", "Charles Taare Goodwillie",
"Catherine Goodwillie",
"Charles John Wilbur Smith", "Barbara Port", "Sharon de Jong", "Bradley Drayton"),
col = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2.45, rep(1.7, 4))/4,
row = c(3:6, 1:5, 4:5, 6, 7:10)/11
)
grid.newpage()
pushViewport(viewport(width = 0.9, height = 0.9, yscale = c(0,1)))
with(tupuna, grid.text(name, col, row))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2.45, 2.45, NA)/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 4.75, 6, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(2.37, 2.53, NA, )/4,
y =(c(5, 5, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(2.37, 2.53, NA, 1, 1.7)/4,
y =(c(5, 5, NA, 6.25, 6.75)) /11
)
with(line_coords, grid.lines(x= x, y = y))
tupuna <- data.frame(
name = c("Ann Kaiaraki", "Ann (Makee) Lidiard", "Edward J Stevens", "John E Stevens",
"Te Ruahikihiki", "Taoka", "Te Auta", "Riria Te Auta", "Caroline (Kuini) Hunt",
"Kura", "Charles Taare Goodwillie",
"Catherine Goodwillie",
"Charles John Wilbur Smith", "Barbara Port", "Sharon de Jong", "Bradley Drayton"),
col = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2, rep(2, 4))/4,
row = c(3:6, 1:5, 4:5, 6, 7:10)/11
)
library(grid)
grid.newpage()
pushViewport(viewport(width = 0.9, height = 0.9, yscale = c(0,1)))
with(tupuna, grid.text(name, col, row))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2.45, 2.45, NA)/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 4.75, 6, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
tupuna <- data.frame(
name = c("Ann Kaiaraki", "Ann (Makee) Lidiard", "Edward J Stevens", "John E Stevens",
"Te Ruahikihiki", "Taoka", "Te Auta", "Riria Te Auta", "Caroline (Kuini) Hunt",
"Kura", "Charles Taare Goodwillie",
"Catherine Goodwillie",
"Charles John Wilbur Smith", "Barbara Port", "Sharon de Jong", "Bradley Drayton"),
col = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2, rep(2, 4))/4,
row = c(3:6, 1:5, 4:5, 6, 7:10)/11
)
library(grid)
grid.newpage()
pushViewport(viewport(width = 0.9, height = 0.9, yscale = c(0,1)))
with(tupuna, grid.text(name, col, row))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2, 2, NA)/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 5, 6, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(3, 2, 2.53, NA, 1, 2, NA)/4,
y =(c(5, 5, NA, 6.25, 6.75)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(3, 2, 2.53, NA, 1, 2, NA)/4,
y =(c(5, 5, NA, 6.25, 6.75)) /11
)
#horizontal
line_coords <- data.frame(
x = c(3, 2, NA, 1, 2, NA)/4,
y =(c(5, 5, NA, 6.25, 6.75, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(3, 2, NA, 1, 2, NA)/4,
y =(c(5.25, 5.75, NA, 6.25, 6.75, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
grid.newpage()
pushViewport(viewport(width = 0.9, height = 0.9, yscale = c(0,1)))
with(tupuna, grid.text(name, col, row))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2, 2, NA,
7, 8, NA, 8, 9, NA, 9, 10, NA, 10, 11, NA)/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 5, 6, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(3, 2, NA, 1, 2, NA)/4,
y =(c(5.25, 5.75, NA, 6.25, 6.75, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
)
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2, 2, NA,
rep(c(2, 2, NA), 3))/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 5, 6, NA,
7, 8, NA, 8, 9, NA, 9, 10, NA, 10, 11, NA) + c(0.25, -0.25, NA)) /11
)
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2, 2, NA,
rep(c(2, 2, NA), 4))/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 5, 6, NA,
7, 8, NA, 8, 9, NA, 9, 10, NA, 10, 11, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2, 2, NA,
rep(c(2, 2, NA), 5))/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 5, 6, NA,
6, 7, NA, 7, 8, NA, 8, 9, NA, 9, 10, NA, 10, 11, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
tupuna <- data.frame(
name = c("Ann Kaiaraki", "Ann (Makee) Lidiard", "Edward J Stevens", "John E Stevens",
"Te Ruahikihiki", "Taoka", "Te Auta", "Riria Te Auta", "Caroline (Kuini) Hunt",
"Kura", "Charles Taare Goodwillie",
"Catherine Goodwillie",
"Charles John Wilbur Stevens", "Barbara Port", "Sharon de Jong", "Bradley Drayton"),
col = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 2, rep(2, 4))/4,
row = c(3:6, 1:5, 4:5, 6, 7:10)/11
)
library(grid)
grid.newpage()
pushViewport(viewport(width = 0.9, height = 0.9, yscale = c(0,1)))
with(tupuna, grid.text(name, col, row))
#vertical
line_coords <- data.frame(
x = c(2, 2, NA, 2, 2, NA, 2, 2, NA, 2, 2, NA,
1, 1, NA, 1, 1, NA, 1, 1, NA,
3, 3, NA, 2, 2, NA,
rep(c(2, 2, NA), 5))/4,
y =(c(1, 2, NA, 2, 3, NA, 3, 4, NA, 4, 5, NA,
3, 4, NA, 4, 5, NA, 5, 6, NA,
4, 5, NA, 5, 6, NA,
6, 7, NA, 7, 8, NA, 8, 9, NA, 9, 10, NA, 10, 11, NA) + c(0.25, -0.25, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
#horizontal
line_coords <- data.frame(
x = c(3, 2, NA, 1, 2, NA)/4,
y =(c(5.25, 5.75, NA, 6.25, 6.75, NA)) /11
)
with(line_coords, grid.lines(x= x, y = y))
install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme_2.2-16_source_files/coxme")
install.packages("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme_2.2-16_source_files/coxme",
type = "source")
install.packages()
install.packages("coxme", type = "source")
install.packages("coxme", type = "source")
install.packages("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme")
install.packages("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
repos = NULL)
install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme")
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme")
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
ymy_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
debugonce(coxme::coxme)
devtools::load_all(".")
source("~/PhD_local/svycoxme/R/run modified coxme.R")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
debugonce(coxme::coxme)
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
devtools::load_all(".")
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
>>>>>>> Stashed changes
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
<<<<<<< Updated upstream
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- c(coef(fitph), rep(0, length(my_b)))
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- c(coef(fitph), rep(0, length(my_b)))
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
start_parms <- c(coef(fitph), rep(0, my_nk))
start_parms
test_theta <- 0.8
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
kpp <- K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds)
kpp
fit_optim$par[-seq_along(my_X)]
pl_theta(theta = 0.8, b = fit_optim$par[-seq_along(my_X)], K_ppl = kpp)
pl_theta(theta = 0.8, b = fit_optim$par[-seq_along(my_X)], K_ppl = K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = 0.8,
cluster = "M",
data = ds))
seq(0.001, 5, by = 0.1)
lps <- sapply(seq(0.001, 5, by = 0.1), function(test_theta){
pl_theta(theta = test_theta, b = fit_optim$par[-seq_along(my_X)],
K_ppl = K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = 0.8,
cluster = "M",
data = ds))
})
plot(seq(0.001, 5, by = 0.1), lps, type = "l")
lps <- sapply(seq(0.001, 5, by = 0.1), function(test_theta){
pl_theta(theta = test_theta, b = fit_optim$par[-seq_along(my_X)],
K_ppl = K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds))
})
plot(seq(0.001, 5, by = 0.1), lps, type = "l")
plot(seq(-1, 5, by = 0.1), lps, type = "l")
lps <- sapply(seq(-1, 5, by = 0.1), function(test_theta){
pl_theta(theta = test_theta, b = fit_optim$par[-seq_along(my_X)],
K_ppl = K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds))
})
lps <- sapply(seq(0.00001, 0.002, by = 0.0001), function(test_theta){
pl_theta(theta = test_theta, b = fit_optim$par[-seq_along(my_X)],
K_ppl = K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds))
})
seq(0.00001, 0.002, by = 0.0001)
plot(seq(0.00001, 0.002, by = 0.0001), lps, type = "l")
vignette("laplace", "coxme")
coxfit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
devtools::load_all(".")
=======
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
exp(-2.508621)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
# debugonce(coxme::coxme)
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
list$theta
fit$theta
fit$logpar
fit$logfun
fit$fn
mfit <- do.call('optim', c(list(par= fit$theta, fn=fit$fn, gr=NULL),
fit$control, fit$logpar))
mfit
theta <- mfit$par
log(theta)
exp(theta)
source("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme/R/coxme.fit.R")
rm("coxme.fit")
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
>>>>>>> Stashed changes
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
<<<<<<< Updated upstream
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
coxfit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme::VarCorr(coxfit)$M
coxfit$loglik
logLik(coxfit)
coxfit$loglik
logLik.coxme(coxfit)
logLik(coxfit)
library(coxme)
logLik(coxfit)
LogLik(coxfit)
coxfit$loglik
VarCorr(coxfit)
pl_theta(theta = VarCorr(coxfit)$M, b = ranef(coxfit)$M,
K_ppl = K_prime_prime(parms = c(fixef(coxfit), ranef(coxfit)),
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds))
pl_theta(theta = VarCorr(coxfit)$M, b = ranef(coxfit)$M,
K_ppl = K_prime_prime(parms = c(fixef(coxfit), ranef(coxfit)),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds))
VarCorr(coxfit)$M
pl_theta(theta = VarCorr(coxfit)$M, b = ranef(coxfit)$M,
K_ppl = K_prime_prime(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds))
pl_theta(theta = VarCorr(coxfit)$M, b = ranef(coxfit)$M,
K_ppl = K_prime_prime(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds))
lp(parms = parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds)
lp(parms = parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds)
pl_theta(theta = VarCorr(coxfit)$M, b = ranef(coxfit)$M,
K_ppl = K_prime_prime(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds))
lp(parms = parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds)
lp(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds)
coxfit$loglik
pl_theta(theta = VarCorr(coxfit)$M, b = ranef(coxfit)$M,
K_ppl = K_prime_prime(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds))
lp(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds) -10.39223
inner(ranef(coxfit)$M) * VarCorr(coxfit)$M
lp(parms = c(fixef(coxfit), ranef(coxfit)$M),
X = my_X,
t = t,
dij = stat,
theta = VarCorr(coxfit)$M,
cluster = "M",
data = ds) -10.39223 + inner(ranef(coxfit)$M) * VarCorr(coxfit)$M
=======
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
devtools::load_all(".")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
real_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
real_fit
fit <- coxme:::coxme_mod(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
mfit <- do.call('optim', c(list(par= fit$theta, fn=fit$fn, gr=NULL),
fit$control, fit$logpar))
fit
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
fit <- coxme:::coxme_mod(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
devtools::install("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/code scratch pads/coxme",
build_vignettes = FALSE)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
real_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
real_fit
fit <- coxme:::coxme_mod(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
fit
mfit <- do.call('optim', c(list(par= fit$theta, fn=fit$fn, gr=NULL),
fit$control, fit$logpar))
mfit
theta <- mfit$par
exp(theta)
coxme::VarCorr(real_fit)
exp(theta)
exp(theta) == coxme::VarCorr(real_fit)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
real_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
real_fit
fit <- coxme:::coxme_mod(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
mfit <- do.call('optim', c(list(par= fit$theta, fn=fit$fn, gr=NULL),
fit$control, fit$logpar))
theta <- mfit$par
exp(theta) == coxme::VarCorr(real_fit)
exp(theta)
coxme::VarCorr(real_fit)
names(fit$logpar)
fit$fn(0.1,
varlist = fit$logpar$varlist,
vparm = fit$logpar$vparm,
ntheta = fit$logpar$ntheta,
ncoef = fit$logpar$ncoef,
kfun = fit$logpar$kfun,
init = fit$logpar$init,
fit0 = fit$logpar$fit0,
iter = fit$logpar$iter,
timedep = fit$logpar$timedep)
fit$fn(0.3,
varlist = fit$logpar$varlist,
vparm = fit$logpar$vparm,
ntheta = fit$logpar$ntheta,
ncoef = fit$logpar$ncoef,
kfun = fit$logpar$kfun,
init = fit$logpar$init,
fit0 = fit$logpar$fit0,
iter = fit$logpar$iter,
timedep = fit$logpar$timedep)
theta
exp(theta) == coxme::VarCorr(real_fit)
theta
logliks <- sapply(c(0.1, 0.2), function(x){
fit$fn(x,
varlist = fit$logpar$varlist,
vparm = fit$logpar$vparm,
ntheta = fit$logpar$ntheta,
ncoef = fit$logpar$ncoef,
kfun = fit$logpar$kfun,
init = fit$logpar$init,
fit0 = fit$logpar$fit0,
iter = fit$logpar$iter,
timedep = fit$logpar$timedep)
})
logliks
logliks <- sapply(seq(0.01, 10, by = 0.001), function(x){
fit$fn(x,
varlist = fit$logpar$varlist,
vparm = fit$logpar$vparm,
ntheta = fit$logpar$ntheta,
ncoef = fit$logpar$ncoef,
kfun = fit$logpar$kfun,
init = fit$logpar$init,
fit0 = fit$logpar$fit0,
iter = fit$logpar$iter,
timedep = fit$logpar$timedep)
})
plot(seq(0.01, 10, by = 0.001), logliks)
logliks <- sapply(seq(0.01, 1, by = 0.001), function(x){
fit$fn(x,
varlist = fit$logpar$varlist,
vparm = fit$logpar$vparm,
ntheta = fit$logpar$ntheta,
ncoef = fit$logpar$ncoef,
kfun = fit$logpar$kfun,
init = fit$logpar$init,
fit0 = fit$logpar$fit0,
iter = fit$logpar$iter,
timedep = fit$logpar$timedep)
})
plot(seq(0.01, 1, by = 0.001), logliks,)
min(logliks)
seq(0.01, 1, by = 0.001)[min(logliks) == logliks]
exp(theta)
exp(0.221)
seq(0.01, 1, by = 0.001)[min(logliks) == logliks] |> exp()
coxme::VarCorr(real_fit)
?breslow
??breslow
??hazard
?basehaz
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
devtools::load_all(".")
library(survival)
fit <- coxph(Surv(t, stat) ~ X1 + X2 + X3 + M, data = sample_data)
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxph(Surv(t, stat) ~ X1 + X2 + X3 + M, data = sample_data)
names(fit)
survfit(fit)
surv <- survfit(fit)
names(surv)
surv$cumhaz
sortAndIndex(sample_data, t)
d1 <- sortAndIndex(sample_data, t)
calcLinearPredictor
d1 <- add_Z(sample_data, "M")
d2 <- sortAndIndex(d1, t)
attr(d1)
attributes(d1)
fit$coefficients
fit <- coxph(Surv(t, stat) ~ X1 + X2 + X3 + as.factor(M), data = sample_data)
fit$coefficients
fit <- coxme(Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data)
fit <- coxme::coxme(Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data)
surv <- survfit(fit)
d1 <- add_Z(sample_data, "M")
d2 <- sortAndIndex(d1, t)
library(coxme)
fit <- coxme::coxme(Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data)
calcLinearPredictor(d2, my_X, attr(d1, "Z_names"), parms = c(fixef(fit), ranef(fit)))
calcLinearPredictor
calcLinearPredictor(d2, my_X, attr(d1, "Z_names"), parms = c(fixef(fit), ranef(fit)$M))
d3 |>
dplyr::arrange(desc(index)) |>
dplyr::mutate(cumsum_A = cumsum(A))
d3 <- calcLinearPredictor(d2, my_X, attr(d1, "Z_names"), parms = c(fixef(fit), ranef(fit)$M))
d3 |>
dplyr::arrange(desc(index)) |>
dplyr::mutate(cumsum_A = cumsum(A))
d3 |>
dplyr::arrange(desc(index)) |>
dplyr::mutate(cumsum_A = cumsum(A)) |>
dplyr::arrange(index)
d3 |>
dplyr::arrange(desc(index)) |>
dplyr::mutate(cumsum_A = cumsum(A)) |>
dplyr::arrange(index) |>
mutate(d_Hazard = stat/cumsum_A,
cumsum_Hazard = cumsum(d_Hazard))
d3 |>
dplyr::arrange(desc(index)) |>
dplyr::mutate(cumsum_A = cumsum(A)) |>
dplyr::arrange(index) |>
dplyr::mutate(d_Hazard = stat/cumsum_A,
cumsum_Hazard = cumsum(d_Hazard))
d4 <- d3 |>
dplyr::arrange(desc(index)) |>
dplyr::mutate(cumsum_A = cumsum(A)) |>
dplyr::arrange(index) |>
dplyr::mutate(d_Hazard = stat/cumsum_A,
cumsum_Hazard = cumsum(d_Hazard))
d4$cumsum_Hazard
fit <- coxph(Surv(t, stat) ~ X1 + X2 + X3 +  as.factor(M), data = sample_data)
fit$linear.predictors
exp(fit$linear.predictors)
fit <- coxph(Surv(t, stat) ~ X1 + X2 + X3 +  as.factor(M), data = sortAndIndex(sample_data, t))
exp(fit$linear.predictors)
predict(fit, type = "risk")
View(d2)
View(d3)
sum(d3$A)
sum(predict(fit, type = "risk"))
fit <- coxme(Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sortAndIndex(sample_data, t))
predict(fit, type = "risk")
cbind(d3$A, predict(fit, type = "risk"))
plot(fit)
d4$cumsum_Hazard
>>>>>>> Stashed changes
