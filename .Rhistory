M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
test$index = seq(nrow(test))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = test)
res <- ranef(fit_test)
offset_data <- data.frame(test[, c(re_names, "index")], offset = 0)
i = 2
for(i in seq_along(res)){
values <- res[[i]]
var_names <- unlist(strsplit(names(res)[i], split = "/"))
var_level <- unlist(strsplit(names(res[[i]]), "/"))
return_data <- data.frame(var_level, values)
names(return_data) <- c(var_names, "value")
merged_df <- merge(offset_data, return_data, by = var_names, all.x = TRUE)
offset_data$offset <- merged_df$offset + merged_df$value
}
rm(i, values, var_names, var_level, return_data, merged_df)
test2 <- merge(test, offset_data, by = "index")
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test2 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset), data = test2)
cbind(
coef(fit_test),
coef(fit_test2))
devtools::load_all(".")
library(coxme)
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
test$index = seq(nrow(test))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = test)
res <- ranef(fit_test)
offset_data <- data.frame(test[, c(re_names, "index")], offset = 0)
re_names <- names(res)
offset_data <- data.frame(test[, c(re_names, "index")], offset = 0)
for(i in seq_along(res)){
values <- res[[i]]
var_names <- unlist(strsplit(names(res)[i], split = "/"))
var_level <- unlist(strsplit(names(res[[i]]), "/"))
return_data <- data.frame(var_level, values)
names(return_data) <- c(var_names, "value")
merged_df <- merge(offset_data, return_data, by = var_names, all.x = TRUE)
offset_data$offset <- merged_df$offset + merged_df$value
}
rm(i, values, var_names, var_level, return_data, merged_df)
test2 <- merge(test, offset_data, by = "index")
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test2 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset), data = test2)
# not the same! am i combining the offsets wrongly?
cbind(
coef(fit_test),
coef(fit_test2))
# try by hand
res[[1]]
# try by hand
data.frame(res[[1]])
# try by hand
re1 <- data.frame(offset_1 = res[[1]])
re_names
re1$M1 <- rownames(re1)
re2 <- data.frame(offset_2 = res[[2]])
re2
re2$M2 <- rownames(re2)
re2$M2
re2
test3 <- dplyr::left_join(
dplyr::left_join(test, re1, by = "M1"),
re2, by = "M2")
# try by hand
re1 <- data.frame(offset_1 = res[[1]])
re1$M1 <- as.integer(rownames(re1))
re2 <- data.frame(offset_2 = res[[2]])
re2$M2 <- as.interger(rownames(re2))
re2$M2 <- as.integer(rownames(re2))
re2$M2 <- rownames(re2)
test3 <- dplyr::left_join(
dplyr::left_join(test, re1, by = "M1"),
re2, by = "M2")
View(test3)
fit_test3 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset_1 + offset_2), data = test3)
# not the same! am i combining the offsets wrongly?
cbind(
coef(fit_test),
coef(fit_test2),
coef(fit_test3))
offset_list <- lapply(seq_along(res), function(re){
re <- data.frame(offset = res[[i]])
re$levels <- as.integer(rownames(re))
})
offset_list <- lapply(seq_along(res), function(i){
re <- data.frame(offset = res[[i]])
re$levels <- as.integer(rownames(re))
})
offset_list <- lapply(seq_along(res), function(i){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
})
offset_list
offset_list <- lapply(seq_along(res), function(i){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
re
})
offset_list
re_names
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
test4 <- dplyr::left_join(test4, re, by = c(re_names[i] = levels))
}
i = 1
dplyr::left_join(test4, re, by = c(re_names[i] = levels))
bquote(dplyr::left_join(test4, re, by = c(.(re_names[i]) = levels)))
bquote("dplyr::left_join(test4, re, by = c(.(re_names[i]) = levels))")
bquote(expr(dplyr::left_join(test4, re, by = c(.(re_names[i]) = levels))))
bquote(dplyr::left_join(test4, re, by = c(.(re_names[i]) == levels)))
bquote(dplyr::left_join(test4, re, by = c(.(re_names[i]) = "levels")))
bquote(.(re_names[i]) = "levels")
bquote(.(re_names[i] = "levels"))
paste0("dplyr::left_join(test4, re, by = ", .(re_names[i]), "=levels")
paste0("dplyr::left_join(test4, re, by = ", re_names[i], "=levels")
paste0("dplyr::left_join(test4, re, by = c(", re_names[i], "=\"levels\")")
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
test4 <- eval(parse(text = paste0("dplyr::left_join(test4, re, by = c(", re_names[i], "=\"levels\")")))
}
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
test4 <- eval(parse(text = paste0("dplyr::left_join(test4, re, by = c(", re_names[i], "=\"levels\"))")))
}
test4 <- test
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
test4 <- eval(parse(text = paste0("dplyr::left_join(test4, re, by = c(", re_names[i], "=\"levels\"))")))
}
re <- data.frame(offset = res[[i]])
re[,"M1"] <- rownames(re)
re[,"M1"]
re[,"M1"]
class(test4[,"M1"])
class(re[,"M1"])
class(re[,"M1"]) <- class(test4[,"M1"])
dplyr::left_join(test4, re)
re_names[i]
test4 <- test
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
re[,re_names[i]] <- rownames(re)
class(re[,re_names[i]]) <- class(test4[,re_names[i]])
test4 <- dplyr::left_join(test4, re)
}
test4 <- test
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re$levels <- rownames(re)
re[,re_names[i]] <- rownames(re)
class(re[,re_names[i]]) <- class(test4[,re_names[i]])
test4 <- dplyr::left_join(test4, re, by = re_names[i])
}
test4 <- test
for(i in seq_along(res)){
re <- data.frame(offset = res[[i]])
re[,re_names[i]] <- rownames(re)
class(re[,re_names[i]]) <- class(test4[,re_names[i]])
test4 <- dplyr::left_join(test4, re, by = re_names[i])
}
names(test4)
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test4 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset.x + offset.y), data = test4)
# not the same! am i combining the offsets wrongly? Yes, you must be.
cbind(
coef(fit_test),
coef(fit_test4))
test4$total_offset = with(test4, offset.x + offset.y)
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test4 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(total_offset), data = test4)
# not the same! am i combining the offsets wrongly? Yes, you must be.
cbind(
coef(fit_test),
coef(fit_test4))
test4 <- test
test4$offset = 0
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re[,re_names[i]] <- rownames(re)
class(re[,re_names[i]]) <- class(test4[,re_names[i]])
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test4 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset), data = test4)
# not the same! am i combining the offsets wrongly? Yes, you must be.
cbind(
coef(fit_test),
coef(fit_test4))
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M1:M2` = 2)
)
test$`M1:M2` = with(test, interaction(M1, M2))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1:M2`), data = test)
res <- ranef(fit_test)
re_names <- names(res)
re_names
res
test$`M1.M2` = with(test, interaction(M1, M2))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1.M2`), data = test)
res <- ranef(fit_test)
re_names <- names(res)
test4 <- test
test4$offset = 0
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re[,re_names[i]] <- rownames(re)
class(re[,re_names[i]]) <- class(test4[,re_names[i]])
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re[,re_names[i]] <- as.vector(rownames(re), mode = class(test4[,re_names[i]]))
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
as.character
as.factor
factor
class(test$M1.M2)
test4 <- test
test4$offset = 0
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re[,re_names[i]] <- as(rownames(re), Class = class(test4[,re_names[i]]))
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
test4$M1.M2
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re_class <- class(test4[,re_names[i]])
if (re_class == "factor"){
re[,re_names[i]] <- factor(rownames(re))
} else {
re[,re_names[i]] <- as(rownames(re), Class = re_class)
}
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test4 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset), data = test4)
# not the same! am i combining the offsets wrongly? Yes, you must be.
cbind(
coef(fit_test),
coef(fit_test4))
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M1:M2` = 2)
)
test$`M1.M2` = with(test, interaction(M1, M2))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1.M2`), data = test)
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M1:M2` = 2)
)
test$`M1.M2` = with(test, interaction(M1, M2))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1.M2`), data = test)
res <- ranef(fit_test)
re_names <- names(res)
test4 <- test
test4$offset = 0
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re_class <- class(test4[,re_names[i]])
if (re_class == "factor"){
re[,re_names[i]] <- factor(rownames(re))
} else {
re[,re_names[i]] <- as(rownames(re), Class = re_class)
}
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test4 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset), data = test4)
# not the same! am i combining the offsets wrongly? Yes, you must be.
cbind(
coef(fit_test),
coef(fit_test4))
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1/M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M1:M2` = 2)
)
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1/M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M1:M2` = 2)
)
test <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M1/M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M2:M1` = 2)
)
test$`M2.M1` = with(test, interaction(M1, M2))
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | `M1.M2`), data = test)
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2.M1), data = test)
res <- ranef(fit_test)
re_names <- names(res)
re_names
fit_test <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2) + (1 | M2.M1), data = test)
res <- ranef(fit_test)
re_names <- names(res)
test4 <- test
test4$offset = 0
for(i in seq_along(res)){
re <- data.frame(new_offset = res[[i]])
re_class <- class(test4[,re_names[i]])
if (re_class == "factor"){
re[,re_names[i]] <- factor(rownames(re))
} else {
re[,re_names[i]] <- as(rownames(re), Class = re_class)
}
test4 <- dplyr::left_join(test4, re, by = re_names[i])
test4$offset = test4$offset + test4$new_offset
test4$new_offset <- NULL
}
# the coxph with offset should estimate the same coefs as coxme with the random effects.
fit_test4 <- coxph(Surv(stat_time, stat) ~ X1 + X2 + X3 + offset(offset), data = test4)
# not the same! am i combining the offsets wrongly? Yes, you must be.
cbind(
coef(fit_test),
coef(fit_test4))
devtools::load_all(".")
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
my_k <- 50
my_nk <- 10
my_coefficients <- c(1, -0.7, 0.5)
my_theta <- c(M = 1)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)
dist_args = list(k = my_k, nk = my_nk,
n = k * nk),
coefficients = my_coefficients,
random_effect_variance = my_theta))
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n))
dist_args = list(k = my_k, nk = my_nk,
n = k * nk),
coefficients = my_coefficients,
random_effect_variance = my_theta)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n))
dist_args = list(k = my_k, nk = my_nk,
n = k * nk),
coefficients = my_coefficients,
random_effect_variance = my_theta)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n))
dist_args = list(k = my_k, nk = my_nk,
n = my_k * my_nk),
coefficients = my_coefficients,
random_effect_variance = my_theta)
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = my_k, nk = my_nk,
n = my_k * my_nk),
coefficients = my_coefficients,
random_effect_variance = my_theta)
View(the_data)
coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M), data = the_data)
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M), data = the_data)
coxme::VarCorr(coxme_fit)
my_formula <- survival::Surv(stat_time, stat)~X1 + X2 + X3 + (1 | M1) + (1 | M2)
my_k = 50
my_nk = 10
my_theta = c(M1 = 2, M2 = 1)
my_beta = c(1, -0.7, 0.5)
ds <- one_dataset(my_formula,
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = my_k, nk = my_nk, n = my_k * my_nk),
coefficients = my_beta,
random_effect_variance = my_theta
)
coxme_fit <- coxme::coxme(my_formula, data = ds)
ests <- est_parameters(my_formula, ds, control = control.list(grad = FALSE))
my_ndeps = rep(0.001, length(my_theta))
ests <- est_parameters(my_formula, ds, control = control.list(grad = FALSE))
ests <- est_parameters(my_formula, ds, control = control.list(grad = FALSE, ndeps = my_ndeps))
ests_w_gr  <- est_parameters(my_formula, ds, control = control.list(grad = TRUE, ndeps = my_ndeps))
ests_w_gr
