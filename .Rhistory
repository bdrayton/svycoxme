)
ests <- est_parameters(my_formula, data = ds, control = control.list(grad = TRUE))
b <- Matrix(ests$b, ncol = 1)
beta <- Matrix(ests$beta, ncol = 1)
q <- length(b)
dD <- diag(q)
ana_hess <- calc_hessian_cell(dD_i = dD,
dD_j = dD,
q = q,
D_inv = solve(ests$theta * dD),
theta = ests$theta,
b = b,
Kbb_inv = solve(attr(ests, "beta_b_est")$hessian[-1, -1]))
ds_sorted <- sortAndIndex(ds, sort_vars = stat_time)
parsed_data <- lme4::lFormula(my_formula, data = ds_sorted)
stat <- Matrix(unclass(parsed_data$fr[,1])[, "status"], ncol = 1)
K <- Kpp(theta = ests$theta, beta = beta, b = b, parsed_data = parsed_data, stat = stat)
K_inv <- solve(K)
v2 <- q/(2*ests$theta^2) - tr(K_inv)/(ests$theta^3) + tr(K_inv%*%K_inv)/(2*ests$theta^4) - (t(b) %*% b)/ests$theta^3
coxme_fit <- coxme::coxme(my_formula, data = ds)
coxme_fit_ests <- list(par = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M1),
hessian = -unchol(coxme_fit$hmat))
ses <- c(theta = ests$theta,
numeric = diag(sqrt(solve(-attr(ests, "theta_est")$hessian))),
analytical_se = sqrt(solve(-ana_hess)),
analytical_se2 = sqrt(solve(-v2@x)))
ses
}
(res <- one_rep(0.5, 200, 20))
in_ci <- function(res){
lower = res[1] - 1.96 * res[-1]
upper = res[1] + 1.96 * res[-1]
true_theta >= lower & true_theta <= upper
}
in_ci(res)
in_ci(res)
# are the analytical ses systematically smaller?
ress <- replicate(n = 100, try(one_rep(0.5, 50, 4)), simplify = FALSE)
hit_list <- lapply(ress, in_ci)
Reduce(rbind, hit_list) |> colMeans()
# are the analytical ses systematically smaller?
ress <- replicate(n = 100, try(one_rep(0.5, 50, 10)), simplify = FALSE)
hit_list <- lapply(ress, in_ci)
Reduce(rbind, hit_list) |> colMeans()
survey::svycoxph
survey::svycoxph.survey.design2
survey:::svycoxph.survey.design2
survey:::svycoxph.survey.design
svyrecvar
multistage
survey:::multistage
qr.resid
?qr.resid
14.18/42.96
library(survey)
methods("resid")
library(coxme)
devtools::load_all(".")
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
residuals.coxme <- function (object, data,
type = c("martingale", "deviance",
"score", "schoenfeld", "dfbeta", "dfbetas",
"scaledsch", "partial"),
collapse = FALSE,
weighted = (type %in% c("dfbeta", "dfbetas")), ...){
offset <- svycoxme::re_to_offset(data = data, coxme_model = object)
survival::coxph()
}
offset <- svycoxme::re_to_offset(lung, fit2)
nrow(lung)
lung$offset <- svycoxme::re_to_offset(lung, fit2)
fit2$call
fit2$call[1]
fit2$call[2]
fit2$call[[2]]
formula(fit2)
update(formula(fit2), ~ . + offset(offset))
f <- formula(fit2)
update(f, ~ . + offset(offset))
update.formula(f, ~ . + offset(offset))
update.formula(formula(fit2), ~ . + offset(offset))
new_form <- update.formula(formula(fit2), ~ . + offset(offset))
coxme:::formula2
og_form <- formula(fit2)
coxme:::formula2(og_form)
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
og_form <- formula(fit2)
og_form
coxme:::formula1(og_form)
coxme
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
og_form <- formula(fit2)
coxme::formula1(og_form)
coxme:::formula1(og_form)
coxme:::formula1
inherits(og_form, "(")
coxme:::formula1(Surv(time, status) ~ ph.ecog + age + (1|inst))
og_form
identical(og_form, Surv(time, status) ~ ph.ecog + age + (1|inst))
str(og_form)
str(Surv(time, status) ~ ph.ecog + age + (1|inst))
class(og_form)
as.formula(og_form)
str(as.formula(og_form))
inherits(og_form, "(")
og_form <- as.formula(formula(fit2))
coxme:::formula1(og_form)
lung$offset <- svycoxme::re_to_offset(lung, fit2)
new_form <- update.formula(og_form, ~ . + offset(offset))
new_form
fixed_part <- coxme:::formula1(og_form)$fixed
fixed_part
# add offset
new_form <- update.formula(fixed_part, ~ . + offset(offset))
new_form
fit_coxph <- coxph(new_form, data = lung)
formula(fit_coxph)
summary(fit_coxph)
# evaluate this way to get the call to show the formula
fit_coxph <- eval(bquote(coxph(.(new_form), data = lung)))
summary(fit_coxph)
summary(fit2)
resid(fit_coxph, "dfbeta")
svycoxme.svyrep.design
weights(fit2)
call(fit2)
fit2$call
og_call <- fit2$call
data(og_call)
og_call[["data"]]
match.call(fit2)
og_call <- match.call(fit2$call)
match.call(coxme, og_call)
og_call <- match.call(coxme, fit2$call)
og_call[[1]]
og_call <- match.call(coxme, fit2$call)
coxph_call <- og_call
coxph_call[[1]] <- og_call
coxph_call
coxph_call$formula
class(coxph_call$formula)
fix_formula <- function(formula){
if(!inherits(formula, "formula")) formula <- as.formula(formula)
# keep the bit with fixed effects.
fixed_part <- coxme:::formula1(formula)$fixed
# add offset(offset)
new_form <- update.formula(fixed_part, ~ . + offset(offset))
return(new_form)
}
coxph_call$formula <- fix_formula(coxph_call$formula)
coxph_call
coxph_call$formula
fix_formula(coxph_call$formula)
og_call <- match.call(coxme, fit2$call)
coxph_call <- og_call
coxph_call[[1]] <- og_call
coxph_call
og_call <- match.call(coxme, fit2$call)
coxph_call <- og_call
coxph_call
coxph_call[[1]] <- og_call
coxph_call
og_call <- match.call(coxme, fit2$call)
coxph_call <- og_call
coxph_call[[1]] <- quote(coxph)
coxph_call$formula <- fix_formula(coxph_call$formula)
coxph_call
fit_coxph <- with(data, eval(coxph_call))
fit_coxph <- with(lung, eval(coxph_call))
resid(fit_coxph, "dfbeta")
fit2
resid(fit2, data = lung, type = "dfbeta")
resid(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
resid(fit2, data = lung, type = "dfbeta")
residuals.coxme <- function (object, data,
type = c("martingale", "deviance",
"score", "schoenfeld", "dfbeta", "dfbetas",
"scaledsch", "partial"),
collapse = FALSE,
weighted = (type %in% c("dfbeta", "dfbetas")), ...){
# not needed because this method is dispatched based on class.
# if(!inherits(object, "coxme")) stop("object must be of class coxme")
# add random effects as offset to data
data$offset <- svycoxme::re_to_offset(data = data, coxme_model = object)
# modify the call for to a coxph model with offsets
coxph_call <- match.call(coxme, object$call)
coxph_call[[1]] <- quote(coxph)
coxph_call$formula <- fix_formula(coxph_call$formula)
fit_coxph <- with(data, eval(coxph_call))
resid(fit_coxph, type = type, collapse = collapse, weighted = weighted, ... = ...)
}
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
resid(fit2, data = lung, type = "dfbeta")
svycoxme::re_to_offset
residuals.coxme <- function (object, data,
type = c("martingale", "deviance",
"score", "schoenfeld", "dfbeta", "dfbetas",
"scaledsch", "partial"),
collapse = FALSE,
weighted = (type %in% c("dfbeta", "dfbetas")), ...){
# not needed because this method is dispatched based on class.
# if(!inherits(object, "coxme")) stop("object must be of class coxme")
# add random effects as offset to data
data$offset <- svycoxme::re_to_offset(data = data, model = object)
# modify the call for to a coxph model with offsets
coxph_call <- match.call(coxme, object$call)
coxph_call[[1]] <- quote(coxph)
coxph_call$formula <- fix_formula(coxph_call$formula)
fit_coxph <- with(data, eval(coxph_call))
resid(fit_coxph, type = type, collapse = collapse, weighted = weighted, ... = ...)
}
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
resid(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
library(coxme)
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
resid(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
resid(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
resid(fit2, data = lung, type = "dfbeta")
methods(residuals)
resid(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
resid(fit2, data = lung, type = "dfbeta")
class(fit2)
residuals
resid
residuals.glm
resid(fit2, data = lung, type = "dfbeta")
library(coxme)
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
resid(fit2, data = lung, type = "dfbeta")
data(lung)
lung <- lung
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
resid(fit2, data = lung, type = "dfbeta")
resid(fit2, data = lung, type = "dfbeta")
residuals.coxme(fit2, data = lung, type = "dfbeta")
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
head(data)
coxph_call$data
svycoxme
svycoxme.svyrep.design
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
names(lung)
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
summary(fit_coxph)
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
coxph_call
coxph_call$data
coxph_call$data <- as.symbol("data")
coxph_call$data
coxph_call
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
summary(fit_coxph)
devtools::load_all(".")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
class(fit_coxph)
type
collapse
weighted
resid(fit_coxph, type = type, collapse = collapse, weighted = weighted, ... = ...)
debugonce(residuals.coxph)
debugonce(survival::residuals.coxph)
debugonce(survival:::residuals.coxph)
resid(fit_coxph, type = type, collapse = collapse, weighted = weighted, ... = ...)
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
library(coxme)
lung <- lung
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
methods(residuals)
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
as.name("data")
identical(as.name("data"), as.symbol("data"))
eval(coxph_call)
resid(fit_coxph, type = type, ... = ...)
fit_coxph <- eval(coxph_call)
resid(fit_coxph, type = type, ... = ...)
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
class(fit_coxph)
type
...
resid(fit_coxph, type = type, ... = ...)
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
debugonce(residuals.coxph)
debugonce(coxph.getdata)
residuals.coxme(fit2, data = lung, type = "dfbeta")
library(survival)
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
debugonce(residuals.coxph)
debugonce(survival:::residuals.coxph)
debugonce(coxph.getdata)
debugonce(survival:::coxph.getdata)
residuals.coxme(fit2, data = lung, type = "dfbeta")
otype
debugonce(residuals.coxme)
debugonce(survival:::residuals.coxph)
debugonce(survival:::coxph.getdata)
residuals.coxme(fit2, data = lung, type = "dfbeta")
fit
str(fit)
stats::model.frame(fit)
?model.frame
model.frame.coxph
lung$offset <- re_to_offset(lung, fit2)
fit <- coxph(Surv(time, status) ~ ph.ecog + age + offset(offset), data = lung)
resid(fit, type = "dfbeta")
fit <- coxph(Surv(time, status) ~ ph.ecog + age + offset(offset), data = lung)
residuals.coxme
coxph_call <- match.call(coxme, fit2$call)
coxph_call
coxph_call[[1]] <- quote(coxph)
coxph_call$formula
eval(coxph_call$formula)
eval(coxph_call$formula) |> class()
fix_formula
class(coxph_call$formula)
devtools::load_all(".")
coxph_call$formula <- fix_formula(coxph_call$formula)
coxph_call$formula
# now should work.
coxph_call$data <- as.name("data")
data = lung
fit_coxph <- eval(coxph_call)
identical(fit, fit_coxph)
all.equal(fit, fit_coxph)
fit$call
fit_coxph$call
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
library(coxme)
lung <- lung
fit2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
library(survival)
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
environment(coxph_call$formula)
environment(eval(coxph_call$formula))
environment(coxph_call$formula)
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
str(eval(coxph_call))
str(eval(coxph_call$formula))
str(as.formula(coxph_call$formula))
as.formula
str(eval(coxph_call$formula))
str(coxph_call$formula)
resid(fit_coxph, type = type)
devtools::load_all(".")
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
ls
ls()
ls(parent.frame())
debugonce(residuals.coxme)
residuals.coxme(fit2, data = lung, type = "dfbeta")
environment(coxph_call$formula)
environment(eval(coxph_call$formula))
eval(coxph_call$formula)
new_call <- call(coxph(Surv(time, status) ~ ph.ecog + age + (1 | inst)))
new_call <- expression(coxph(Surv(time, status) ~ ph.ecog + age + (1 | inst)))
class(new_call)
new_call <- quote(coxph(Surv(time, status) ~ ph.ecog + age + (1 | inst)))
new_call
class(new_call)
new_call$formula
new_call <- quote(coxph(Surv(time, status) ~ ph.ecog + age + (1 | inst), data = data))
match.call(coxph, new_call)
new_call <- quote(coxph(formula = Surv(time, status) ~ ph.ecog + age + (1 | inst), data = data))
new_call$formula
eval(new_call$formula)
fit_coxph_new_call <- eval(new_call)
resid(fit_coxph_new_call)
all.equal(fit_coxph, fit_coxph_new_call)
all.equal(coxph_call, fit_coxph_new_call)
coxph_call
all.equal(coxph_call, new_call)
coxph_call
new_call
new_call <- quote(coxph(formula = Surv(time, status) ~ ph.ecog + age + offset(offset), data = data))
coxph_call
new_call
all.equal(coxph_call, new_call)
coxph_call$formula
all.equal(coxph_call$formula, new_call$formula
)
coxph_call$formula; new_call$formula
coxph_call$formula
new_call$formula
attributes(coxph_call$formula)
attributes(new_call)
str(new_call)
is.call(new_call)
as.call(coxph_call$formula)
attributes( as.call(coxph_call$formula) )
str(coxph_call$formula)
attr(coxph_call$formula, "class") <- NULL
attr(coxph_call$formula, ".Environment") <- NULL
str(coxph_call$formula)
new_call
new_call$formula
str(new_call$formula)
is.call(new_call$formula)
is.call(coxph_call$formula)
is.formula(coxph_call$formula)
identical(new_call, coxph_call)
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
resid(fit2, data = lung, type = "dfbeta")
?residuals
residuals(fit2, data = lung, type = "dfbeta")
class(fit2)
lung <- lung
data(cancer, package = "survival")
lung
force(aml)
invisible(lung)
fit2 <- coxme::coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
fit2 <- coxme::coxme(survival::Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
residuals(fit2, data = lung, type = "dfbeta")
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
residuals(fit2, data = lung, type = "dfbeta")
formals(residuals)
formals(residuals.coxme)
formals(residuals.coxph)
formals(coxph::residuals.coxph)
formals(survival:::residuals.coxph)
debugonce(resid)
residuals(fit2, data = lung, type = "dfbeta")
resid(fit2, data = lung, type = "dfbeta")
debugonce(residuals)
naresid
debugonce(naresid)
debugonce(naresid)
x
fit2$na.action
methods(residuals)
?methods
methods(residuals, class = "coxme")
methods(class = "coxme")
resid(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
residuals.coxme(fit2, data = lung, type = "dfbeta")
methods(class = "coxme")
residuals(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
invisible(lung)
data(cancer, package = "survival")
invisible(lung)
fit2 <- coxme::coxme(survival::Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
residuals.coxme(fit2, data = lung, type = "dfbeta")
residuals(fit2, data = lung, type = "dfbeta")
residuals.coxme(fit2, data = lung, type = "dfbeta")
residuals(fit2, data = lung, type = "dfbeta")
methods(class = "coxme")
getS3method(f = "residual", class = "coxme")
getS3method(f = "residual", class = "coxme", envir = 'svycoxme')
getS3method(f = "residual", class = "coxme")
getS3method(f = "residuals", class = "coxme")
getS3method(f = "residuals", class = "coxph")
residuals(fit2, data = lung, type = "dfbeta")
.S3methods(residuals, class = "coxme")
devtools::load_all(".")
residuals(fit2, data = lung, type = "dfbeta")
residuals.coxme(fit2, data = lung, type = "dfbeta")
resid(fit2, data = lung, type = "dfbeta")
devtools::load_all(".")
devtools::load_all(".")
