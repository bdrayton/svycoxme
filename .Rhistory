X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 1)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, censoring_time,
stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
mean(dataset$stat) |> round(2)
set.seed(9867)
k = 20000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 1)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, censoring_time,
stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
mean(dataset$stat) |> round(2)
set.seed(9867)
k = 20000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.8)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, censoring_time,
stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
mean(dataset$stat) |> round(2)
set.seed(9867)
k = 20000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.8)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, censoring_time,
stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
mean(dataset$stat) |> round(2)
set.seed(9867)
k = 20000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, censoring_time,
stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
mean(dataset$stat) |> round(2)
set.seed(9867)
k = 20000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, censoring_time,
stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
mean(dataset$stat) |> round(2)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), event_time, group_id, obs_id)
head(dataset) |> print(digits = 2)
dataset = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(dataset) |> print(digits = 2)
dsamp <- dataset |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
# use survey models.
impdes = svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = dsamp, fpc = ~fpc1)
impmodel1 <- svyglm(X1~Z1 + Z2 + Z3, design = impdes, family = gaussian)
impmodel2 <- svyglm(X2~Z1 + Z2 + Z3, design = impdes, family = gaussian)
impmodel3 <- svyglm(X3~Z1 + Z2 + Z3, design = impdes, family = binomial)
impmodel3 <- svyglm(X3~Z1 + Z2 + Z3, design = impdes, family = quasibinomial)
pop_data$impX1 <- predict(impmodel1, newdata = pop_data, type = "response")
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(pop) |> print(digits = 2)
mean(pop$stat) |> round(2)
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
dsamp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
# use survey models.
impdes = svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp, fpc = ~fpc1)
impdes = svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp, fpc = ~fpc1)
impmodel1 <- svyglm(X1~Z1 + Z2 + Z3, design = impdes, family = gaussian)
impmodel2 <- svyglm(X2~Z1 + Z2 + Z3, design = impdes, family = gaussian)
impmodel3 <- svyglm(X3~Z1 + Z2 + Z3, design = impdes, family = quasibinomial)
pop$impX1 <- predict(impmodel1, newdata = pop, type = "response")
pop$impX2 <- predict(impmodel2, newdata = pop, type = "response")
pop$impX3 <- predict(impmodel3, newdata = pop, type = "response")
if_full_model <- coxme::coxme(Surv(event_time, stat) ~ impX1 + impX2 + impX3 + (1 | group_id),
data = pop_data)
if_full_model <- coxme::coxme(Surv(event_time, stat) ~ impX1 + impX2 + impX3 + (1 | group_id),
data = pop)
if_full_model
set.seed(9867)
k = 2000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(pop) |> print(digits = 2)
mean(pop$stat) |> round(2)
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
set.seed(9867)
k = 2000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(pop) |> print(digits = 2)
mean(pop$stat) |> round(2)
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
set.seed(9867)
k = 2000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(pop) |> print(digits = 2)
mean(pop$stat) |> round(2)
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
set.seed(9867)
k = 2000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(7000, 6000, 4000, 2000, 1000)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(pop) |> print(digits = 2)
mean(pop$stat) |> round(2)
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
set.seed(9867)
k = 2000
nk = 10
n = nk * k
Z1 = rep(rep(1:5, c(700, 600, 400, 200, 100)), each = nk)
Z2 = rnorm(k)
Z3 = runif(k)
mu_X1 = 0.5 * (Z1 + 1)
mu_X2 = 0.5 * (Z2 + Z3)
mu_X3 = Z3
X1 = rnorm(n, mean = mu_X1, sd = 0.25)
X2 = rep(rnorm(k, mean = mu_X2, sd = 0.25), each = nk)
X3 = rep(rbinom(k, 1, mu_X3), each = nk)
X = cbind(X1, X2, X3)
beta = matrix(c(1, -0.7, 0.5))
theta = 0.5
b = rep(rnorm(k, sd = sqrt(theta)), each = nk)
baseline_hazard = 1.5
hazard = baseline_hazard * exp(X %*% beta + b)
event_time = - (log(runif(n)) / hazard)
censoring_time = runif(n, 0, 0.9)
stat = event_time <= censoring_time
stat_time = ifelse(stat, event_time, censoring_time)
group_id = rep(1:k, each = nk)
obs_id = seq(n)
pop = data.frame(X1, X2, X3, Z1, Z2 = rep(Z2, each = nk),
Z3 = rep(Z3, each = nk), stat_time, stat, group_id, obs_id)
head(pop) |> print(digits = 2)
mean(pop$stat) |> round(2)
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
# use survey models.
impdes = svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp, fpc = ~fpc1)
impmodel1 <- svyglm(X1~Z1 + Z2 + Z3, design = impdes, family = gaussian)
impmodel2 <- svyglm(X2~Z1 + Z2 + Z3, design = impdes, family = gaussian)
impmodel3 <- svyglm(X3~Z1 + Z2 + Z3, design = impdes, family = quasibinomial)
pop$impX1 <- predict(impmodel1, newdata = pop, type = "response")
pop$impX2 <- predict(impmodel2, newdata = pop, type = "response")
pop$impX3 <- predict(impmodel3, newdata = pop, type = "response")
if_full_model <- coxme::coxme(Surv(event_time, stat) ~ impX1 + impX2 + impX3
+ (1 | group_id),data = pop)
inffun <- resid(if_full_model, data = pop_data, type = "dfbeta") |> as.matrix()
# append influence functions to the pop data
# if coxme was used, need to load svycoxme for the residual function coxme.residuals
inffun <- resid(if_full_model, data = pop_data, type = "dfbeta") |> as.matrix()
# append influence functions to the pop data
# if coxme was used, need to load svycoxme for the residual function coxme.residuals
inffun <- resid(if_full_model, data = pop, type = "dfbeta") |> as.matrix()
source("C:/Users/bdra011/OneDrive - The University of Auckland/PhD/outputs/Thesis/R code in thesis 2.R")
devtools::load_all(".")
# append influence functions to the pop data
# if coxme was used, need to load svycoxme for the residual function coxme.residuals
inffun <- resid(if_full_model, data = pop, type = "dfbeta") |> as.matrix()
resid(if_full_model, data = pop, type = "dfbeta")
if_full_model <- coxme::coxme(Surv(stat_time, stat) ~ impX1 + impX2 + impX3
+ (1 | group_id),data = pop)
# append influence functions to the pop data
# if coxme was used, need to load svycoxme for the residual function coxme.residuals
inffun <- resid(if_full_model, data = pop, type = "dfbeta") |> as.matrix()
colnames(inffun) <- paste0("iff", seq(ncol(inffun)))
pop_if <- cbind(pop, inffun)
samp_if <- dplyr::left_join(samp, dplyr::select(pop_if, unique_id, iff1, iff2, iff3),
by = "obs_id")
samp_if <- dplyr::left_join(samp, dplyr::select(pop_if, obs_id, iff1, iff2, iff3),
by = "obs_id")
# design with sample data
if_design <- svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = dsamp_if, fpc = ~fpc1)
# design with sample data
if_design <- svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp_if, fpc = ~fpc1)
samp <- pop |>
dplyr::group_by(Z1) |>
dplyr::mutate(sampled = group_id %in% sample(unique(group_id), size = 20),
weight = dplyr::n_distinct(group_id)/20,
fpc1 = dplyr::n_distinct(group_id)) |>
dplyr::filter(sampled) |>
dplyr::ungroup()
samp_if <- dplyr::left_join(samp, dplyr::select(pop_if, obs_id, iff1, iff2, iff3),
by = "obs_id")
# design with sample data
if_design <- svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp_if, fpc = ~fpc1)
if_design_svrep <- as.svrepdesign(if_design)
inffun <- resid(if_full_model, data = pop, type = "dfbeta") |> as.matrix()
colnames(inffun) <- paste0("iff", seq(ncol(inffun)))
pop_if <- cbind(pop, inffun)
samp_if <- dplyr::left_join(samp, dplyr::select(pop_if, obs_id, iff1, iff2, iff3),
by = "obs_id")
# design with sample data
if_design <- svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp_if, fpc = ~fpc1)
if_design_svrep <- as.svrepdesign(if_design)
# calibrate with IF from model fully imputed histol
cal_form_full <- ~ iff1 + iff2 + iff3 - 1
pop_totals_full <- colSums(model.matrix(cal_form_full,
data = pop_data_if))
inffun <- resid(if_full_model, data = pop, type = "dfbeta") |> as.matrix()
colnames(inffun) <- paste0("iff", seq(ncol(inffun)))
pop_if <- cbind(pop, inffun)
samp_if <- dplyr::left_join(samp, dplyr::select(pop_if, obs_id, iff1, iff2, iff3),
by = "obs_id")
# design with sample data
if_design <- svydesign(~group_id, weights = ~weight, strata = ~ Z1,
data = samp_if, fpc = ~fpc1)
if_design_svrep <- as.svrepdesign(if_design)
# calibrate with IF from model fully imputed histol
cal_form_full <- ~ iff1 + iff2 + iff3 - 1
pop_totals_full <- colSums(model.matrix(cal_form_full,
data = pop_if))
if_design_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_full,
population = pop_totals_full)
if_design_svrep_cal <- calibrate(if_design_svrep, calfun = "raking",
formula = cal_form_full,
population = pop_totals_full)
f1 <- svycoxme(Surv(event_time, stat) ~ X1 + X2 + X3 + (1 | group_id), design = if_design,
control = coxme::coxme.control(sparse = c(0,0)))
f1 <- svycoxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | group_id), design = if_design,
control = coxme::coxme.control(sparse = c(0,0)))
f2 <- svycoxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | group_id), design = if_design_svrep,
control = coxme::coxme.control(sparse = c(0,0)))
f3 <- svycoxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | group_id), design = if_design_cal,
control = coxme::coxme.control(sparse = c(0,0)))
f4 <- svycoxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | group_id),
design = if_design_svrep_cal,control = coxme::coxme.control(sparse = c(0,0)))
res <- data.frame(design = rep(c("survey.design", "svyrep.design",
"survey.design", "svyrep.design"), each = 3),
calibrated = rep(c("no", "yes"), each = 6),
covariate = c(names(coef(f1)), names(coef(f2)),
names(coef(f3)), names(coef(f4))),
var = c(diag(vcov(f1)), diag(vcov(f2)),
diag(vcov(f3)), diag(vcov(f4))))
res |>
dplyr::arrange(covariate, design, calibrated) |>
tidyr::pivot_wider(names_from = "calibrated", values_from = "var") |>
dplyr::mutate(var_change = yes - no,
var_change_pct = var_change / no * 100)
