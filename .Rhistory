nwts_pop$imphist_partial[nwts_pop$in.subsample] <- nwts_pop$histol[nwts_pop$in.subsample]
# fit a model to the population data supplemented with the imputed histology
if_full_model <- coxph(Surv(trel, relaps) ~ imphist_full * age + stage * tumdiam, data = nwts_pop)
if_partial_model <- coxph(Surv(trel, relaps) ~ imphist_partial * age + stage * tumdiam, data = nwts_pop)
# append influence functions to the pop data
inffun_full <- resid(if_full_model, "dfbeta")
colnames(inffun_full) <- paste0("iff", seq(ncol(inffun_full)))
inffun_partial <- resid(if_partial_model, "dfbeta")
colnames(inffun_partial) <- paste0("ifp", seq(ncol(inffun_partial)))
nwts_pop_if <- cbind(nwts_pop, inffun_full, inffun_partial)
# design with sample data
if_design <- svydesign(~1, strata = ~strat4, weights = ~weight, data = nwts_pop_if) |>
subset(in.subsample)
# calibrate with IF from model fully imputed histol
cal_form_full <- ~ iff1 + iff2 + iff3 + iff4 + iff5 + iff6 + strat4
pop_totals_full <- colSums(model.matrix(cal_form_full,
data = nwts_pop_if))
if_full_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_full,
population = pop_totals_full)
# calibrate with IF from model with partly imputed histol
cal_form_partial <- ~ ifp1 + ifp2 + ifp3 + ifp4 + ifp5 + ifp6 + strat4
pop_totals_partial <- colSums(model.matrix(cal_form_partial,
data = nwts_pop_if))
if_partial_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_partial,
population = pop_totals_partial)
# fit a model using the uncalibrated design
m0 <- svycoxph(Surv(trel, relaps) ~  histol * age + stage * tumdiam, design = if_design)
# fully imputed histology
m1 <- svycoxph(Surv(trel, relaps) ~ histol * age + stage * tumdiam, design = if_full_cal)
# partly imputed histology
m2 <- svycoxph(Surv(trel, relaps) ~ histol * age + stage * tumdiam, design = if_partial_cal)
# return the coefficients
cbind(coef = names(coef(m0)), no_cal = coef(m0), full_imp = coef(m1), part_imp = coef(m2))
}
reps <- replicate(10, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps_df <- Reduce(rbind, reps)
reps_df
one_rep <- function(nwts_pop){
# draw the complex sample.
nwts_samp <- dplyr::bind_rows(
dplyr::filter(nwts_pop, strat4 == 1) |>
dplyr::slice_sample(n = 120),
dplyr::filter(nwts_pop, strat4 == 2) |>
dplyr::slice_sample(n = 160),
dplyr::filter(nwts_pop, strat4 == 3) |>
dplyr::slice_sample(n = 120),
dplyr::filter(nwts_pop, strat4 == 4))
nwts_pop$in.subsample <- nwts_pop$id %in% nwts_samp$id
# fit imputation model
impmodel <- glm(histol~instit + age_bin + stage4*study, data = nwts_pop,
subset = in.subsample, family = binomial)
# predict histology for everyone
nwts_pop$imphist_full <- predict(impmodel, newdata = nwts_pop, type = "response")
nwts_pop$imphist_partial <- nwts_pop$imphist_full
# replace predicted histology with actual histology where available (i.e. sampled children)
nwts_pop$imphist_partial[nwts_pop$in.subsample] <- nwts_pop$histol[nwts_pop$in.subsample]
# fit a model to the population data supplemented with the imputed histology
if_full_model <- coxph(Surv(trel, relaps) ~ imphist_full * age + stage * tumdiam, data = nwts_pop)
if_partial_model <- coxph(Surv(trel, relaps) ~ imphist_partial * age + stage * tumdiam, data = nwts_pop)
# append influence functions to the pop data
inffun_full <- resid(if_full_model, "dfbeta")
colnames(inffun_full) <- paste0("iff", seq(ncol(inffun_full)))
inffun_partial <- resid(if_partial_model, "dfbeta")
colnames(inffun_partial) <- paste0("ifp", seq(ncol(inffun_partial)))
nwts_pop_if <- cbind(nwts_pop, inffun_full, inffun_partial)
# design with sample data
if_design <- svydesign(~1, strata = ~strat4, weights = ~weight, data = nwts_pop_if) |>
subset(in.subsample)
# calibrate with IF from model fully imputed histol
cal_form_full <- ~ iff1 + iff2 + iff3 + iff4 + iff5 + iff6 + strat4
pop_totals_full <- colSums(model.matrix(cal_form_full,
data = nwts_pop_if))
if_full_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_full,
population = pop_totals_full)
# calibrate with IF from model with partly imputed histol
cal_form_partial <- ~ ifp1 + ifp2 + ifp3 + ifp4 + ifp5 + ifp6 + strat4
pop_totals_partial <- colSums(model.matrix(cal_form_partial,
data = nwts_pop_if))
if_partial_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_partial,
population = pop_totals_partial)
# fit a model using the uncalibrated design
m0 <- svycoxph(Surv(trel, relaps) ~  histol * age + stage * tumdiam, design = if_design)
# fully imputed histology
m1 <- svycoxph(Surv(trel, relaps) ~ histol * age + stage * tumdiam, design = if_full_cal)
# partly imputed histology
m2 <- svycoxph(Surv(trel, relaps) ~ histol * age + stage * tumdiam, design = if_partial_cal)
# return the coefficients
cbind(no_cal = coef(m0), full_imp = coef(m1), part_imp = coef(m2))
}
reps <- replicate(10, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps_df <- Reduce(rbind, reps)
reps_df |>
tibble::rownames_to_column(var = "coef")
reps_df |>
as.data.frame() |>
tibble::rownames_to_column(var = "coef")
reps_df |>
as.data.frame(optional = TRUE) |>
tibble::rownames_to_column(var = "coef")
reps_df |>
data.frame(optional = TRUE) |>
tibble::rownames_to_column(var = "coef")
one_rep <- function(nwts_pop){
# draw the complex sample.
nwts_samp <- dplyr::bind_rows(
dplyr::filter(nwts_pop, strat4 == 1) |>
dplyr::slice_sample(n = 120),
dplyr::filter(nwts_pop, strat4 == 2) |>
dplyr::slice_sample(n = 160),
dplyr::filter(nwts_pop, strat4 == 3) |>
dplyr::slice_sample(n = 120),
dplyr::filter(nwts_pop, strat4 == 4))
nwts_pop$in.subsample <- nwts_pop$id %in% nwts_samp$id
# fit imputation model
impmodel <- glm(histol~instit + age_bin + stage4*study, data = nwts_pop,
subset = in.subsample, family = binomial)
# predict histology for everyone
nwts_pop$imphist_full <- predict(impmodel, newdata = nwts_pop, type = "response")
nwts_pop$imphist_partial <- nwts_pop$imphist_full
# replace predicted histology with actual histology where available (i.e. sampled children)
nwts_pop$imphist_partial[nwts_pop$in.subsample] <- nwts_pop$histol[nwts_pop$in.subsample]
# fit a model to the population data supplemented with the imputed histology
if_full_model <- coxph(Surv(trel, relaps) ~ imphist_full * age + stage * tumdiam, data = nwts_pop)
if_partial_model <- coxph(Surv(trel, relaps) ~ imphist_partial * age + stage * tumdiam, data = nwts_pop)
# append influence functions to the pop data
inffun_full <- resid(if_full_model, "dfbeta")
colnames(inffun_full) <- paste0("iff", seq(ncol(inffun_full)))
inffun_partial <- resid(if_partial_model, "dfbeta")
colnames(inffun_partial) <- paste0("ifp", seq(ncol(inffun_partial)))
nwts_pop_if <- cbind(nwts_pop, inffun_full, inffun_partial)
# design with sample data
if_design <- svydesign(~1, strata = ~strat4, weights = ~weight, data = nwts_pop_if) |>
subset(in.subsample)
# calibrate with IF from model fully imputed histol
cal_form_full <- ~ iff1 + iff2 + iff3 + iff4 + iff5 + iff6 + strat4
pop_totals_full <- colSums(model.matrix(cal_form_full,
data = nwts_pop_if))
if_full_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_full,
population = pop_totals_full)
# calibrate with IF from model with partly imputed histol
cal_form_partial <- ~ ifp1 + ifp2 + ifp3 + ifp4 + ifp5 + ifp6 + strat4
pop_totals_partial <- colSums(model.matrix(cal_form_partial,
data = nwts_pop_if))
if_partial_cal <- calibrate(if_design, calfun = "raking",
formula = cal_form_partial,
population = pop_totals_partial)
# fit a model using the uncalibrated design
m0 <- svycoxph(Surv(trel, relaps) ~  histol * age + stage * tumdiam, design = if_design)
# fully imputed histology
m1 <- svycoxph(Surv(trel, relaps) ~ histol * age + stage * tumdiam, design = if_full_cal)
# partly imputed histology
m2 <- svycoxph(Surv(trel, relaps) ~ histol * age + stage * tumdiam, design = if_partial_cal)
# return the coefficients
data.frame(coef = names(coef(m0)), no_cal = coef(m0), full_imp = coef(m1), part_imp = coef(m2))
}
reps <- replicate(10, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps_df <- Reduce(rbind.data.frame, reps)
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp"))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(value, colour = name)) + geom_density() + facet_wrap(vars(coef))
reps <- replicate(10, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps <- replicate(1000, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps <- replicate(500, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp"), names_to = "method") |>
dplyr::group_by(coef, method) |>
dplyr::summarise(mean(value),
empiracal_se  var(value))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp"), names_to = "method") |>
dplyr::group_by(coef, method) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value)))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(value, colour = name)) + geom_density() + facet_wrap(vars(coef))
reps_df <- Reduce(rbind.data.frame, reps)
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(value, colour = name)) + geom_density() + facet_wrap(vars(coef))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp"), names_to = "method") |>
dplyr::group_by(coef, method) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value)))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(value, colour = name)) + geom_density() + facet_wrap(vars(coef))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(value, colour = name)) + geom_boxplot() + facet_wrap(vars(coef))
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(value, colour = name)) + geom_boxplot() + facet_wrap(vars(coef), scales = "free")
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(y = value, x = name)) + geom_boxplot() + facet_wrap(vars(coef), scales = "free")
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(x = value, y = name)) + geom_boxplot() + facet_wrap(vars(coef), scales = "free")
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(x = value, colour = name)) + geom_density() + facet_wrap(vars(coef), scales = "free")
pop_coef <- coxph(Surv(trel, relaps) ~  histol * age + stage * tumdiam, data = nwts_pop) |> coef()
pop_coef
reps_df_long <- reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp"))
pop_coef
pop_coef[names(pop_coef) == "histol"]
# histology
dplyr::filter(reps_df_long, coef == "histol") |>
ggplot(aes(x = value, colour = name)) + geom_density() +
geom_vline(xintercept = pop_coef[names(pop_coef) == "histol"])
for(x in names(pop_coef)){
the_plot <- dplyr::filter(reps_df_long, coef == x) |>
ggplot(aes(x = value, colour = name)) + geom_density() +
geom_vline(xintercept = pop_coef[names(pop_coef) == x])
print(the_plot)
}
for(x in names(pop_coef)){
the_plot <- dplyr::filter(reps_df_long, coef == x) |>
ggplot(aes(x = value, colour = name)) + geom_density() +
geom_vline(xintercept = pop_coef[names(pop_coef) == x]) +
ggtitle(x)
print(the_plot)
}
reps <- replicate(1000, one_rep(nwts_pop = nwts_pop), simplify = FALSE)
reps_df <- Reduce(rbind.data.frame, reps)
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(x = value, y = name)) + geom_boxplot() + facet_wrap(vars(coef), scales = "free")
reps_df |>
tidyr::pivot_longer(cols = c("no_cal", "full_imp", "part_imp")) |>
ggplot(aes(x = value, colour = name)) + geom_density() + facet_wrap(vars(coef), scales = "free")
# pop data coefs
pop_coef <- coxph(Surv(trel, relaps) ~  histol * age + stage * tumdiam,
data = nwts_pop) |> coef()
for(x in names(pop_coef)){
the_plot <- dplyr::filter(reps_df_long, coef == x) |>
ggplot(aes(x = value, colour = name)) +
geom_density() +
geom_vline(xintercept = pop_coef[names(pop_coef) == x]) +
ggtitle(x)
print(the_plot)
}
reps_df_long |>
dplyr::group_by(coef, name) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value)))
pop_coef_df <- data.frame(coef = names(pop_coef), true_value = pop_coef)
reps_df_long |>
dplyr::group_by(coef, name) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value))) |>
dplyr::left_join(pop_coef_df)
reps_df_long |>
dplyr::group_by(coef, name) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value))) |>
dplyr::left_join(pop_coef_df) |>
dplyr::mutate(bias = empirical_mean - true_value)
# bias table
dplyr::select(coef, name, bias) |>
tidyr::pivot_wider(names_from = name, values_from = bias)
# bias table
dplyr::select(coef, name, bias) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
summary_stats <- reps_df_long |>
dplyr::group_by(coef, name) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value))) |>
dplyr::left_join(pop_coef_df) |>
dplyr::mutate(bias = empirical_mean - true_value)
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias") |>
as.table()
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
mutate(bias = round(bias, 2))
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
dplyr::mutate(bias = round(bias, 2))
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
dplyr::mutate(bias = round(bias, 2)) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias") |>
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
dplyr::mutate(bias = round(bias, 2)) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
dplyr::mutate(bias = round(bias, 3)) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
pop_coef
summary_stats <- reps_df_long |>
dplyr::group_by(coef, name) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value))) |>
dplyr::left_join(pop_coef_df) |>
dplyr::mutate(bias = empirical_mean - true_value,
bias_prop = bias/true_value)
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
dplyr::mutate(bias = round(bias, 3)) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
# bias proportion
summary_stats |> dplyr::select(coef, name, bias_prop) |>
dplyr::mutate(bias = round(bias, 3)) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias_prop")
summary_stats <- reps_df_long |>
dplyr::group_by(coef, name) |>
dplyr::summarise(empirical_mean = mean(value),
empirical_se = sqrt(var(value))) |>
dplyr::left_join(pop_coef_df) |>
dplyr::mutate(bias = empirical_mean - true_value,
bias_pct = paste(round(bias/true_value*100, 1), "%"))
# bias table
summary_stats |> dplyr::select(coef, name, bias) |>
dplyr::mutate(bias = round(bias, 3)) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias")
# bias proportion
summary_stats |> dplyr::select(coef, name, bias_prop) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias_prop")
# bias proportion
summary_stats |> dplyr::select(coef, name, bias_pct) |>
tidyr::pivot_wider(names_from = "name", values_from = "bias_pct")
library(lme4)
(fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy))
IF <- influence(fm1)
dfbeta(IF)
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a stratified model
coxfit <- coxph(Surv(time, status) ~ x + strata(sex), test1)
influence(coxfit)
install.packages("influence.ME")
# cluster structure in the population.
cluster_str <- data.frame(table(Size = rpois(2.5e5, 2) + 6)) |>
dplyr::filter(Freq >=10)
cluster_str_list <- split(cluster_str, seq(nrow(cluster_str)))
max_cluster_digits <- max(nchar(as.character(cluster_str$Size)))
max_cluster_freq_digits <- max(nchar(as.character(cluster_str$Freq)))
pop_list <- lapply(cluster_str_list, function(cluster_info){
k <- cluster_info$Freq
nk <- as.numeric(as.character(cluster_info$Size))
k_id <- formatC(k, width = max_cluster_freq_digits, flag = "0")
nk_id <- formatC(nk, width = max_cluster_digits, flag = "0")
the_data <- one_dataset(~X1 + X2 + X3 + stratum + (1 | M1) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(rep(c("l","r"), ceiling(nk/2))[seq(nk)], k),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
stratum = ~rep(c(0, 1), c(floor(2/3 * k) * nk, ceiling(1/3 * k) * nk))),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = c(1, -0.7, 0.5, -0.5),
random_effect_variance = list(M1 = 1, `M1:M2` = 1)
)
dplyr::mutate(the_data, id = paste(nk_id,k_id, M1, sep = "_" ))
})
devtools::load_all(".")
pop_list <- lapply(cluster_str_list, function(cluster_info){
k <- cluster_info$Freq
nk <- as.numeric(as.character(cluster_info$Size))
k_id <- formatC(k, width = max_cluster_freq_digits, flag = "0")
nk_id <- formatC(nk, width = max_cluster_digits, flag = "0")
the_data <- one_dataset(~X1 + X2 + X3 + stratum + (1 | M1) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(rep(c("l","r"), ceiling(nk/2))[seq(nk)], k),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
stratum = ~rep(c(0, 1), c(floor(2/3 * k) * nk, ceiling(1/3 * k) * nk))),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = c(1, -0.7, 0.5, -0.5),
random_effect_variance = list(M1 = 1, `M1:M2` = 1)
)
dplyr::mutate(the_data, id = paste(nk_id,k_id, M1, sep = "_" ))
})
pop <- Reduce(rbind.data.frame, pop_list)
sample_clusters <- dplyr::bind_rows(
pop |>
dplyr::filter(stratum == 0) |>
dplyr::distinct(stratum, id) |>
dplyr::mutate(prob = 250/dplyr::n()) |>
dplyr::slice_sample(n = 250),
pop |>
dplyr::filter(stratum == 1) |>
dplyr::distinct(stratum, id) |>
dplyr::mutate(prob = 250/dplyr::n()) |>
dplyr::slice_sample(n = 250)
) |> dplyr::select(stratum, id, prob)
sample_data2 <- dplyr::left_join(sample_clusters, pop, by = c("stratum", "id")) |>
dplyr::mutate(weight = 1/prob, scaled_weight = (1/prob)/(1/mean(prob)),
M1M2 = interaction(M1, M2))
d2 <- survey::svydesign(~id, probs = ~prob, strata = ~stratum, data = sample_data2)
d3 <- survey::as.svrepdesign(d2)
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1+X2+X3+stratum+(1|M1)+(1|M1M2),
data = sample_data2, weights = scaled_weight)
survey
library(survey)
?survey:::svycoxph.svyrep.design
# read in the data
dset <- readRDS("C:/Users/bdra011/Dropbox (Uni of Auckland)/Y19_Weighting_shared/data/youth2019.rds")
# read in the data
dset_filepath <- "C:/Users/bdra011/Dropbox (Uni of Auckland)/Y19_Weighting_shared/data/youth2019.rds"
youth2019 <- cyphr::decrypt(
readRDS(dset_filepath),
cyphr::key_sodium(sha256(charToRaw(askpass("Please enter password:")))))
# read in the data
dset_filepath <- "C:/Users/bdra011/Dropbox (Uni of Auckland)/Y19_Weighting_shared/data/youth2019.rds"
youth2019 <- cyphr::decrypt(
readRDS(dset_filepath),
cyphr::key_sodium(openssl::sha256(charToRaw(openssl::askpass("Please enter password:")))))
library(lme4)
dnames <- names(youth2019)
dnames[grepl("rad", dnames)]
fit1 <- lmer(radScore ~ (1 | SchoolID), data = youth2019)
summary(fit1)
VarCorr(fit1)
library(survey)
head(dnames)
des <- svydesign(~SchoolID, weights = weights, strata = ~ECEducationRegion, data = youth2019)
head(dnames, 20)
dnames[grepl("weight", dnames)]
des <- svydesign(~SchoolID, weights = survey_weight, strata = ~ECEducationRegion, data = youth2019)
des <- svydesign(~SchoolID, weights = ~survey_weight, strata = ~ECEducationRegion, data = youth2019)
svyby(~radScore, ~SchoolID, design = des, FUN = svymean, na.rm = TRUE)
school_radScore <- svyby(~radScore, ~SchoolID, design = des, FUN = svymean, na.rm = TRUE)
school_radScore <- svyby(~radScore, ~SchoolID, design = des, FUN = svymean, na.rm = TRUE)
plot(density(school_radScore))
plot(density(school_radScore$radScore))
var(school_radScore$radScore)
dotchart(school_radScore$radScore)
dotchart(school_radScore$radScore)
library(dplyr)
arrange(school_radScore, radScore)
arrange(school_radScore, radScore) %>%
filter(row_number() < 3 | row_number() > n() - 3)
arrange(school_radScore, radScore) %>%
filter(row_number() < 3 | row_number() >= n() - 3)
arrange(school_radScore, radScore) %>%
filter(row_number() < 3 | row_number() > n() - 3)
arrange(school_radScore, radScore) %>%
filter(row_number() < 3 )
arrange(school_radScore, radScore) %>%
filter(row_number() < 4 | row_number() > n() - 3)
arrange(school_radScore, radScore) %>%
filter(row_number() < 4 | row_number() > n() - 3) %>%
pull(SchoolID)
extreme_schools <- arrange(school_radScore, radScore) %>%
filter(row_number() < 4 | row_number() > n() - 3) %>%
pull(SchoolID)
youth2019 %>%
filter(SchoolID %in% extreme_schools) %>%
distinct(SchoolName)
extreme_schools <- arrange(school_radScore, radScore) %>%
filter( row_number() > n() - 3) %>%
pull(SchoolID)
youth2019 %>%
filter(SchoolID %in% extreme_schools) %>%
distinct(SchoolName)
library(tidyverse)
youth2019 %>%
ggplot(aes(radScore, group = SchoolID)) +
geom_density()
youth2019 %>%
ggplot(aes(radScore, group = SchoolID, colour = sex)) +
geom_density()
youth2019 %>%
filter(sex %in% c("Female", "Male")) %>%
ggplot(aes(radScore, group = SchoolID, colour = sex)) +
geom_density()
youth2019 %>%
filter(sex %in% c("Female", "Male")) %>%
ggplot(aes(radScore, colour = sex)) +
geom_density()
youth2019 %>%
filter(sex %in% c("Female")) %>%
ggplot(aes(radScore, colour = SchoolID)) +
geom_density()
youth2019 %>%
filter(sex %in% c("Female")) %>%
ggplot(aes(radScore, colour = SchoolID)) +
geom_density() + theme(legend = element_blank())
youth2019 %>%
filter(sex %in% c("Female")) %>%
ggplot(aes(radScore, colour = SchoolID)) +
geom_density(show.legend = FALSE)
