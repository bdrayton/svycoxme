names(listEtaj) <- unique(idK)
Aux3a  <-  exp(eta_x_i)*Xi_at_Tj_m/S0
Aux4a  <-  exp(eta_x_i)*S1x/(S0^2)
listS0 <- rep(list(S0=1/S0 ), n)
listS1xS0 <- rep(list(S1xS0=S1x/(S0^2)), n)
listXXTj_S0 <- Map('*', listS0 ,listXXTj[idK])
Aux3a_l <-  Map('*',listEtaj[idK],listXXTj_S0)
Aux4a_l <-  Map('*',listS1xS0 , listEtaj[idK]  )
U_part2_X<- t(sapply( (1:n), FUN= function(x)  t(d*we*Aux3a_l[[x]])%*%rsinv_m[x,]/N   ) )-
t(sapply( (1:n), FUN= function(x)  t(d*we*Aux4a_l[[x]])%*%rsinv_m[x,]/N   ) )
UX <- d* (XX-S1x/S0 ) -   U_part2_X
return( cbind(UX )/mean( we  )  )
}
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
eta_x
Xi_at_Tj_m
listXXTj
S0
ScoreAll <- function(  beta0, b0 ,mydata_sample1 , theta0  ){
## b needs names, mydata_sample, theta0, b0
#mydata_sample <-GenerateSample(mydata, seed0,    nK)    # N should be multiple of K
##   Ind   <- mydata_sample$R1 ==1;  mydata_sample1 <- mydata_sample[Ind, ]
mydata_sample1  <-  mydata_sample1 %>% arrange(idK, timeb ) %>% mutate(idK= as.character(idK) ) %>%
group_by(idK) %>% mutate(Nk=  n( ))
n <- nrow(mydata_sample1)
K <- length(unique(mydata_sample1$idK))
bi0      <- data.frame(b=b0, idK= names( b0) )
rownames(bi0)  <- paste('idK', bi0$idK, sep='')
mydata_sample1  <- left_join(mydata_sample1,bi0, by='idK' ) %>% arrange(idK, timeb)
formi   <-   formula(~  0+ x + x2  )
formiM  <-   formula(~  0+ idK )
MM      <-   model.matrix(formiM, mydata_sample1)
b       <-   bi0[colnames(MM),]$b
#nk_v     <-   mydata_sample1$Nk
#sum(MM%*%b - mydata_sample1$b)
XX     <-  model.matrix(formi, mydata_sample1)
eta_x  <-  as.vector((cbind(XX%*%beta0)) +mydata_sample1$b)
d   <- mydata_sample1$event
rs<-  riskset(mydata_sample1$timea, mydata_sample1$timeb)
rsinv_m   <-    rsinv(mydata_sample1$timea, mydata_sample1$timeb)
we  <- mydata_sample1$weights
eta_xM <- cbind(eta_x)
N <-  sum(we)
S0  <- as.vector(sumrs(rs, we*exp(eta_xM )) )/N
Aux1  <-  exp(eta_x)*XX
Aux2  <-  exp(eta_x)*MM
S1x <- sumrs(rs, Aux1*we ) /N
S1z <- sumrs(rs, Aux2*we )  /N
U_part2_X <- XX*0
idK <- mydata_sample1$idK
listXXTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , XX, k=k, idK=idK) }  )
names(listXXTj) <- unique(idK)
listMMTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , MM, k=k, idK=idK) }  )
names(listMMTj) <- unique(idK)
listEtaj<- lapply(X=unique(idK), FUN=function(k){ as.vector(exp(  listXXTj[[k]]%*%beta0 +bi0[bi0[,2]== k,1]) ) }  )
names(listEtaj) <- unique(idK)
# Aux3a  <-  exp(eta_x_i)*Xi_at_Tj_m/S0
# Aux4a  <-  exp(eta_x_i)*S1x/(S0^2)
listS0 <- rep(list(S0=1/S0 ), n)
listS1xS0 <- rep(list(S1xS0=S1x/(S0^2)), n)
listXXTj_S0 <- Map('*', listS0 ,listXXTj[idK])
Aux3a_l <-  Map('*',listEtaj[idK],listXXTj_S0)
Aux4a_l <-  Map('*',listS1xS0 , listEtaj[idK]  )
U_part2_X<- t(sapply( (1:n), FUN= function(x)  t(d*we*Aux3a_l[[x]])%*%rsinv_m[x,]/N   ) )-
t(sapply( (1:n), FUN= function(x)  t(d*we*Aux4a_l[[x]])%*%rsinv_m[x,]/N   ) )
UX <- d* (XX-S1x/S0 ) -   U_part2_X
return( cbind(UX )/mean( we  )  )
}
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
score_mine
difftime("18-08-2023", "30-07-2023")
as.Date("18-08-2023")
difftime("2023-08-18", "2023-07-30")
290/19*30
results_path <- file.path(Sys.getenv("OneDriveCommercial"), "PhD/outputs/simulations/data/variances_6.rds")
res <- readr::read_rds(results_path)
error_messages <- lapply(res, "[[", "error")
warning_messages <- lapply(res, "[[", "warning")
returned_values <- lapply(res, "[[", "value")
is.error <- sapply(error_messages, inherits, "error")
is.warning <- sapply(warning_messages, inherits, "warning")
table(is.error) |> prop.table()
table(is.warning)
results_with_warnings <- res[is.warning]
non_error_fits <- returned_values[!is.error]
df <- Reduce(rbind.data.frame, non_error_fits)
non_error_fits[[1]]
shape_res <- function(one_fit){
covars <- names(one_fit$coefs)
v1 <- one_fit$sandwich_finite_pop
v2 <- one_fit$sandwich_infinite_pop
v3 <- one_fit$svycoxme_var_jackknife
v4 <- one_fit$svycoxme_var_bootstrap
v5 <- one_fit$svycoxme_var_subbootstrap
v6 <- one_fit$fisher_var
tibble::tibble(
method = rep(c("sandwich_finite_pop", "sandwich_inf_pop", "cluster_jackknife", "bootstrap", "subbootstrap", "fisher_info"), each = 3),
n_clusters_in_sample = one_fit$specs$n_clusters_in_sample,
cluster_size = one_fit$specs$cluster_size,
theta = one_fit$specs$theta,
covariate = rep(covars, 6),
coefs = rep(one_fit$coefs, 6),
true_coefs = rep(c(1, -0.7, 0.5), 6),
variance = c(v1, v2, v3, v4, v5, v6),
lower = one_fit$coefs + qnorm(0.025) * sqrt(c(v1, v2, v3, v4, v5, v6)),
upper = one_fit$coefs + qnorm(0.975) * sqrt(c(v1, v2, v3, v4, v5, v6)),
hit = lower < true_coefs & upper > true_coefs
)
}
shape_res(non_error_fits[[1]])
df <- plyr::ldply(non_error_fits, shape_res)
df %>% pull(theta) %>% summary()
df %>% pull(theta) %>% summary()
library(tidyverse)
df %>% pull(theta) %>% summary()
coverage_summary <- df %>%
group_by(method, covariate) %>%
mutate(theta_binned = cut(theta, breaks = seq(0, 2, by = 0.1),
labels = seq(0.05, 1.95, by = 0.1)) |>
as.character() |> as.numeric()) %>%
group_by(theta_binned, .add = TRUE) %>%
summarise(coverage = mean(hit, na.rm = TRUE),
prop_nas = sum(is.na(hit))/n(),
.groups = "drop")
coverage_summary %>%
ggplot(aes(theta_binned, coverage, colour = method)) +
geom_line() + facet_grid(rows = vars(covariate)) +
geom_hline(yintercept = 0.95)
devtools::load_all(".")
cgd0 <- cgd0
# more tests for score residuals.
library(survival)
cgd0 <- cgd0
newcgd <- tmerge(data1=cgd0[, 1:13], data2=cgd0, id=id, tstop=futime)
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime1))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime2))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime3))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime4))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime5))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime6))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime7))
newcgd <- tmerge(newcgd, newcgd, id, enum=cumtdc(tstart))
newcgd_sorted <- newcgd[order(newcgd$tstop, newcgd$tstart), ]
newcgd_sorted$y = nrow(newcgd):1
newcgd$y = nrow(newcgd):1
ggplot(newcgd, aes(x = tstart, xend = tstop, y = y, yend = y, shape = factor(infect))) + geom_segment() +
geom_point(aes(x = tstop, y = y))
fit <- coxph(Surv(tstart, tstop, infect) ~ treat + inherit + steroids,
data = newcgd_sorted, cluster = id, ties = 'breslow')
my_parts <- make_parts(fit, data = newcgd_sorted, weights = rep(1, nrow(newcgd)))
my_score <- calc_ui(my_parts)
score <- resid(fit, type = "score")
all.equal(as.matrix(my_score), as.matrix(score))
my_score |> colSums()
score |> colSums()
devtools::load_all(".")
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
debugonce(make_parts.coxme)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
devtools::load_all(".")
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
myb <- unlist(coxme::ranef(fit), use.names = FALSE)
names(myb) <- 1:4
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
source("C:/Users/bdra011/OneDrive - The University of Auckland/PhD/outputs/scratchpads and notes/from_claudia.R")
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
score_mine
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
ui <- calc_ui(parts3)
hessian <- calc_Di(parts)
# debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
hessian <- calc_Di(parts)
# need to update this method!
debug(calc_Di.coxme_parts)
hessian <- calc_Di(parts)
parts$S0
devtools::load_all(".")
# debugonce(calc_ui.coxph_parts)
ui <- calc_ui(parts)
hessian <- calc_Di(parts)
# debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
hessian <- calc_Di(parts)
hessian
vcov(fit)
solve(-hessian)
vcov(fit)
fit
str(fit)
fit$hmat
unchol(fit$hmat)
unchol
hessian
-hessian
unchol(fit$hmat)
calc_Di
hessian <- calc_Di(parts)
solve(-hessian)
solve(-hessian)/n
unchol(fit$hmat)
diag(solve(-hessian)/n)
diag(solve(-hessian)/n) | sqrt()
diag(solve(-hessian)/n) |> sqrt()
summary(fit)
hessian <- calc_Di(parts)
diag(solve(-hessian)/n) |> sqrt()
# fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
fit <- coxph(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
fit <- coxph(Surv(timea, timeb, event) ~ x + x2, test2)
vcov(fit)
# debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
hessian <- calc_Di(parts)
hessian
solve(-hessian)
solve(-hessian)/n
vcov(fit)
solve(-hessian)/n
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
ui <- calc_ui(parts)
hessian <- calc_Di(parts)
vcov(fit)
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
vcov(fit)
unchol
M <- fit_hazfit$hmat
M <- fit$hmat
L <- as.matrix(M)
D <- diag(M)
L %*% diag(D) %*% L
hessian2 <- L %*% diag(D) %*% L
sqrt(diag(hessian2))
sqrt(diag(hessian2/n))
solve(hessian2)
sqrt(diag(solve(hessian2))
)
fit$variance
hessian2
hessian2
solve(hessian2)
fit$variance
vcov(fit)
hessian
-hessian
solve(-hessian)
solve(-hessian/n)
solve(-hessian)/n
# need to update this method!
debug(calc_Di.coxme_parts)
hessian <- calc_Di(parts)
D_beta_beta
top_left
top_left/n
solve(-top_left/n)
solve(-top_left)
Nhat
hessian
solve(-hessian*10)
vcov(fit)
solve(-hessian*10)
hessian
-hessian*10
solve(-hessian*10)
M <- fit$hmat
L <- as.matrix(M)
D <- diag(M)
hessian2 <- L %*% diag(D) %*% L
hessian2
# need to update this method!
debug(calc_Di.coxme_parts)
hessian <- calc_Di(parts)
top_left <- matrix(colSums(D_beta_beta), nrow = n_fixef)
D_b_b
top_left
bottom_right
ret
solve(-ret)
solve(-ret) |> diag() |> sqrt()
ret
hessian2
solve(hessian2)
fit$variance
fit$variance |> round(digits = 2)
fit$variance |> round(digits = 3)
fit$variance |> round(digits = 4)
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea = c(0, 0,0,0,0,0,0,0,0,0),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
ui <- calc_ui(parts)
hessian <- calc_Di(parts)
vcov(fit)
solve(-hessian*10)
parts
debugonce(make_parts.coxme)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
X
Zt
Z
beta
b
in_risk_set_matrix
fast_risk_sets(exp_risk_score)
Matrix::Matrix(Matrix::colSums(in_risk_set_matrix * exp_risk_score[,rep(1,n)]))
time_stop
rep(time_start, each = n)
time_stop
fast_risk_sets(exp_risk_score)
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,13, 9,14,  6, 15),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
debugonce(make_parts.coxme)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
in_risk_set_matrix
fast_risk_sets(exp_risk_score)
Matrix::Matrix(Matrix::colSums(in_risk_set_matrix * exp_risk_score[,rep(1,n)]))
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea= c(0,0, 0, 0,0, 0, 0, 0,  0,  0),
timeb= c(2,5,10, 7,8,13, 9,14,  6, 15),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
parts3
debugonce(make_parts.coxme)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
Matrix::Matrix(Matrix::colSums(in_risk_set_matrix * exp_risk_score[,rep(1,n)]))
fast_risk_sets(exp_risk_score)
fast_risk_sets(exp_risk_score_X)
apply(exp_risk_score_X, 2, function(X_j){
colSums(in_risk_set_matrix * X_j)
})
fast_risk_sets(exp_risk_score_Z)
apply(exp_risk_score_Z, 2, function(Z_j){
colSums(in_risk_set_matrix * Z_j)
})
fast_risk_sets(exp_risk_score_XtX)
apply(exp_risk_score_XtX, 2, function(XX_j){
colSums(in_risk_set_matrix * XX_j)
})
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea = c(0, 0,0,0,0,0,0,0,0,0),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
ui <- calc_ui(parts)
hessian <- calc_Di(parts)
devtools::load_all(".")
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea = c(0, 0,0,0,0,0,0,0,0,0),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea), ]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
parts <- make_parts(fit, data = test2, weights = rep(1, n))
hessian <- calc_Di(parts)
vcov(fit)
solve(-hessian*10)
solve(-hessian)
# need to update this method!
debug(calc_Di.coxme_parts)
hessian <- calc_Di(parts)
D_beta_beta
top_left
solve(-top_left)
vcov(fit)
solve(-hessian) |> diag() |> sqrt()
vcov(fit) |> diag() |> sqrt()
solve(-hessian) |> diag() |> sqrt()
solve(-hessian*10) |> diag() |> sqrt()
solve(-hessian*100) |> diag() |> sqrt()
fit$variance
fit$variance |> diag()
fit$variance |> diag() |> sqrt()
M <- fit$hmat
L <- as.matrix(M)
library(bdsmatrix)
L <- as.matrix(M)
D <- diag(M)
hessian2 <- L %*% diag(D) %*% L
solve(hessian2)
solve(hessian2) |> diag() |> sqrt()
