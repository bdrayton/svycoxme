M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
ds2
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
library(coxme)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
nlevels
devtools::load_all(".")
one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
debugonce(one_dataset)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
lapply(parsed_data$reTrms$flist, nlevels)
one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
devtools::load_all(".")
one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M2:M1` = 2)
)
devtools::load_all(".")
debugonce(one_dataset)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2/M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M2:M1` = 2)
)
parsed_data$reTrms$cnms
parsed_data$reTrms$flist
interaction(parsed_data$reTrms$flist[c("M1", "M2")])
interaction(parsed_data$reTrms$flist[c("M1", "M2")], sep = ":")
parsed_data$reTrms
parsed_data$reTrms$theta
parsed_data$reTrms$cnms
names(parsed_data$reTrms$cnms)
re_df <- list2DF(parsed_data$reTrms$flist)
re_df
random_effect_variance
lapply(re_terms, function(term){
re_name <- paste("re", term, sep = "_")
dtemp <- eval(bquote(data.frame(term = term, .(re_name) = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))))
dtemp
})
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
lapply(re_terms, function(term){
re_name <- paste("re", term, sep = "_")
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
dtemp <- eval(my_expr)
dtemp
})
re_terms <- names(parsed_data$reTrms$cnms)
lapply(re_terms, function(term){
re_name <- paste("re", term, sep = "_")
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
dtemp <- eval(my_expr)
dtemp
})
lapply(re_terms, function(term){
re_name <- paste0("`re_", term, "`")
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
dtemp <- eval(my_expr)
dtemp
})
n_RE <- lapply(parsed_data$reTrms$flist, nlevels)
lapply(re_terms, function(term){
re_name <- paste0("`re_", term, "`")
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
dtemp <- eval(my_expr)
dtemp
})
re_terms[1]
random_effect_variance
devtools::load_all(".")
debugonce(one_dataset)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M2:M1` = 2)
)
lapply(re_terms, function(term){
re_name <- paste0("`re_", term, "`")
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
dtemp <- eval(my_expr)
dtemp
})
re_terms
term = re_terms[1]
term
re_name <- paste0("`re_", term, "`")
re_name
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
my_expr
n_RE[term]
rnorm(n_RE[term], mean = 0, sd = sqrt(random_effect_variance[[term]]))
my_expr <- parse(text = glue::glue("data.frame(term = term, {re_name} = rnorm(n_RE[[term]], mean = 0, sd = sqrt(random_effect_variance[[term]])))"))
dtemp <- eval(my_expr)
dtemp
re_df
parsed_data$reTrms$flist[[re_terms[1]]]
levels(parsed_data$reTrms$flist[[re_terms[1]]])
devtools::load_all(".")
devtools::load_all(".")
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M2:M1` = 2)
)
ds
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2:M1), data = ds)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M1:M2` = 0.2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M1:M2` = 0.2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
VarCorr(coxfit)
View(ds)
View(ds)
devtools::load_all(".")
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1| M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 2)
)
ds2 <- data.frame(y = rnorm(200), ds, model.matrix(~M2-1, data = ds))
tmp <- lme4::lFormula(y ~ X1 + X2 + X3 + (1 | M1) + (1| M2r:M1) + (1 | M2l:M1), data = ds2)
test_fit <- lme4::lmer(y ~ X1 + X2 + X3 + (1 | M1) + (1| M2:M1), data = ds2)
lme4::VarCorr(test_fit)
tmp <- lme4::lFormula(y ~ X1 + X2 + X3 + (1 | M1) + (1|M2:M1), data = ds2)
lapply(tmp$reTrms$flist, function(f) length(levels(f)))
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M2:M1` = 2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
###########################
# coxme special variance.
library(coxme)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2:M1),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, `M2:M1` = 2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 200),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M1:M2` = 0.2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 50 * 10),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M1:M2` = 0.2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
library(Matrix)
make_test_matrix <- function() {
cells <- sample.int(n = 2, 25, replace = TRUE, prob = c(0.9, 0.1)) - 1
rnorm(1) * Matrix(cells, nrow = 5)
}
matricies <- replicate(4, make_test_matrix(), simplify = "list")
fun1 <- function(){
big_matrix <- Matrix(data = 0, nrow = 25, ncol = 4)
big_matrix[,1] <- matricies[[1]]
big_matrix[,2] <- matricies[[2]]
big_matrix[,3] <- matricies[[3]]
big_matrix[,4] <- matricies[[4]]
list(
Matrix(rowSums(big_matrix), nrow = 5),
Matrix(rowSums(big_matrix[,2:4]), nrow = 5),
Matrix(rowSums(big_matrix[,3:4]), nrow = 5),
Matrix(big_matrix[,4], nrow = 5))
}
fun2 <- function(){
lapply(seq_along(matricies), function(i) Reduce("+", matricies[i:4]))
}
microbenchmark::microbenchmark(
fun1(),
fun2()
)
fun3 <- function(){
ind_matrix <- Matrix(
c(rep(c(1, 0), c(4, 0)),
rep(c(1, 0), c(3, 1)),
rep(c(1, 0), c(2, 2)),
rep(c(1, 0), c(1, 3))),
nrow = 4, sparse = TRUE)
# this is the cumsums
big_matrix %*% ind_matrix
}
fun3()
fun3 <- function(big_matrix){
ind_matrix <- Matrix(
c(rep(c(1, 0), c(4, 0)),
rep(c(1, 0), c(3, 1)),
rep(c(1, 0), c(2, 2)),
rep(c(1, 0), c(1, 3))),
nrow = 4, sparse = TRUE)
# this is the cumsums
big_matrix %*% ind_matrix
}
matricies <- replicate(4, make_test_matrix(), simplify = "list")
# convert matricies into one matrix with one per column
big_matrix <- Matrix(data = 0, nrow = 25, ncol = 4)
big_matrix[,1] <- matricies[[1]]
big_matrix[,2] <- matricies[[2]]
big_matrix[,3] <- matricies[[3]]
big_matrix[,4] <- matricies[[4]]
fun3(big_matrix)
microbenchmark::microbenchmark(fun2(), fun3())
microbenchmark::microbenchmark(fun2(), fun3(big_matrix))
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2) + (1 | M1:M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 50 * 10),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5, `M1:M2` = 0.2)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2/M1), data = ds)
VarCorr(coxfit)
ranef(coxfit)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ranef(coxfit)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2:M1), data = ds)
lme4::lFormula(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2:M1), data = ds)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(sample(1:k, k, replace = FALSE), each = nk),
M2 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 10, n = 50 * 10),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5)
)
coxfit <- coxme(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2), data = ds)
VarCorr(coxfit)
ds <- one_dataset(~X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n),
X2 = ~rnorm(k * nk),
X3 = ~rbinom(n, 1, 0.5),
M1 = ~rep(sample(1:k, k, replace = FALSE), each = nk),
M2 = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 4, n = 10 * 4),
coefficients = c(1, 1, 1),
random_effect_variance = list(M1 = 1, M2 = 0.5)
)
lme4::lFormula(Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2:M1), data = ds)
