start_parms = start_parameters,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data)
})
lapply(X = list(0.01, 0.5, 1, 10, 50), function(val){
optim_ipl(theta = val,
start_parms = start_parameters,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data)
})
debugonce(optim_ipl)
optim_ipl(theta = 1,
start_parms = start_parameters,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data)
debugonce(optim_ipl)
optim_ipl(theta = 1,
start_parms = start_parameters,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data)
det(K_ppl_hat)
log(det(K_ppl_hat))
log(det(-K_ppl_hat))
log(det(-1 * K_ppl_hat))
determinant(K_ppl_hat)
determinant(- K_ppl_hat)
fit_optim
lp(parms = fit$par, X = X, t = t, dij = stat, theta = theta, cluster = "M", data = data)
lp(parms = fit_optim$par, X = X, t = t, dij = stat, theta = theta, cluster = "M", data = data)
devtools::load_all(".")
?coxph
source('~/PhD_local/svycoxme/R/ripatti_likelihoods.R')
devtools::load_all(".")
devtools::load_all(".")
>>>>>>> Stashed changes
M_i = matrix(c(0, 0, 1, 0), nrow = 1)
M_i
M_i %*% M_i^T
M_i %*% t(M_i)
t(M_i) %*% M_i
devtools::load_all(".")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
my_b <- attr(ds, "random_effects")
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
my_X = c("X1", "X2", "X3")
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
ds
devtools::load_all(".")
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
devtools::load_all(".")
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
debugonce(K_prime_prime)
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
diag(ll)
ll
terms2 %>%
dplyr::mutate(d_cumhaz = {{ dij }} / cumsum_A,
cumhaz = cumsum(d_cumhaz),
li = cumhaz * A) %>%
dplyr::group_by({{ cluster }}) %>%
dplyr::summarise(ll = sum(li), .groups = "drop")
ppl_hessian
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = M,
data = ds)
debugonce(K_prime_prime)
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = M,
data = ds)
add_Z
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
debugonce(K_prime_prime)
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
sortedIndexedData
D
b
terms2 %>%
dplyr::mutate(d_cumhaz = {{ dij }} / cumsum_A,
cumhaz = cumsum(d_cumhaz),
li = cumhaz * A) %>%
dplyr::group_by(my_cluster) %>%
dplyr::summarise(ll = sum(li), .groups = "drop") %>%
dplyr::arrange(my_cluster) %>%
dplyr::pull(ll)
my_cluster <- as.symbol(cluster)
terms2 %>%
dplyr::mutate(d_cumhaz = {{ dij }} / cumsum_A,
cumhaz = cumsum(d_cumhaz),
li = cumhaz * A) %>%
dplyr::group_by(my_cluster) %>%
dplyr::summarise(ll = sum(li), .groups = "drop") %>%
dplyr::arrange(my_cluster) %>%
dplyr::pull(ll)
terms2 %>%
dplyr::mutate(d_cumhaz = {{ dij }} / cumsum_A,
cumhaz = cumsum(d_cumhaz),
li = cumhaz * A) %>%
dplyr::group_by({{ my_cluster }})
terms2 %>%
dplyr::mutate(d_cumhaz = {{ dij }} / cumsum_A,
cumhaz = cumsum(d_cumhaz),
li = cumhaz * A) %>%
dplyr::group_by({{ my_cluster }}) %>%
dplyr::summarise(ll = sum(li), .groups = "drop") %>%
dplyr::arrange({{ my_cluster }}) %>%
dplyr::pull(ll)
diag(ll) + solve(D)
ll <- terms2 %>%
dplyr::mutate(d_cumhaz = {{ dij }} / cumsum_A,
cumhaz = cumsum(d_cumhaz),
li = cumhaz * A) %>%
dplyr::group_by({{ my_cluster }}) %>%
dplyr::summarise(ll = sum(li), .groups = "drop") %>%
dplyr::arrange({{ my_cluster }}) %>%
dplyr::pull(ll)
diag(ll) + solve(D)
devtools::load_all(".")
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
bb(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
kpp <- K_prime_prime(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds)
kbb <- bb(parms = c(my_beta, my_b),
X = my_X,
t = t,
dij = stat,
theta = my_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
-0.5 * log(det(kpp))
-0.5 * log(det(kbb))
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- coef(fitph)
start_parms
start_parms <- c(coef(fitph), rep(0, length(b)))
start_parms <- c(coef(fitph), rep(0, length(my_b)))
diag(length(my_b))
test_theta <- 0.8
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- c(coef(fitph), rep(0, length(my_b)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = cluster,
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
test_theta <- 0.8
fitph <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = ds)
start_parms <- c(coef(fitph), rep(0, length(my_b)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = M,
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = t ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
lp(parms = start_parms, X = my_X, dij = stat, theta = test_theta, cluster = "M", data = ds)
debugonce(lp)
lp(parms = start_parms, X = my_X, dij = stat, theta = test_theta, cluster = "M", data = ds)
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
lp(parms = start_parms, X = my_X, dij = stat, theta = test_theta, cluster = "M", data = ds)
lp(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = test_theta * diag(length(my_b)),
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
my_D <-  test_theta * diag(length(my_b))
-0.5 * ( log(det(my_D)) )
kpp <- K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds)
kpp
kbb <- bb(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
kbb
b <- fit_optim$par[-seq_len(length(my_X))]
b
fit_optim$par
start_parms
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
test_theta
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
lp(start_parms, my_X, "t", stat, test_theta, "M", ds)
start_parms <- c(coef(fitph), rep(0.1, length(my_b)))
lp(start_parms, my_X, "t", stat, test_theta, "M", ds)
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = 1))
fit_optim
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
debugonce(lp_grd)
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
debugonce(lp_grd)
lp_grd(start_parms, my_X, "t", stat, test_theta, "M", ds)
theta
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
debugonce(lp_grd)
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
l5
debugonce(dlp_b)
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
ll_unpenalized
penalty
D
solve(D)
seq_len(nk)
seq_len(nk)
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
names(start_parms)
lp_grd(parms = start_parms, X = my_X, t = "t", dij = stat, theta = test_theta, cluster = "M", data = ds)
start_parms
start_parms <- c(coef(fitph), rep(0, length(my_b)))
names(start_parms) <- c(my_X, paste0("Z", seq_len(my_nk)))
fit_optim <- optim(par = start_parms,
fn = lp,
gr = lp_grd,
X = my_X,
t = "t" ,
cluster = "M",
dij = stat,
D = my_D,
theta = test_theta,
data = ds,
method = "BFGS",
control = list(fnscale = -1))
fit_optim
kpp <- K_prime_prime(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds)
kbb <- bb(parms = fit_optim$par,
X = my_X,
t = t,
dij = stat,
theta = test_theta,
cluster = "M",
data = ds,
return_matrix = TRUE)
kbb
b <- fit_optim$par[-seq_len(length(my_X))]
b
inner(b)
inner(b) * test_theta
b %*% my_D %*% b
inner(b) * test_theta == b %*% my_D %*% b
inner(b) * test_theta
-0.5 * ( log(det(my_D)) + log(det(kpp)) +  inner(b) * test_theta)
-0.5 * ( log(det(my_D)) + log(det(kbb)) +  inner(b) * test_theta)
-0.5 * ( log(det(my_D)) + log(det(kpp)) +  inner(b) * test_theta)
-0.5 * ( log(det(my_D)) + log(det(kbb)) +  inner(b) * test_theta)
devtools::load_all(".")
devtools::load_all(".")
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = t, cluster = "M", dij = stat, data = ds)
debugonce(optim_ipl)
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = t, cluster = "M", dij = stat, data = ds)
debugonce(optim_ipl)
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = t, cluster = "M", dij = stat, data = ds)
start_parms
X
t
debugonce(optim_ipl)
optim_ipl(theta = test_theta, start_parms = start_parms,
X = my_X, t = "t", cluster = "M", dij = stat, data = ds)
fit_optim
start_parms
-0.5 * ( log(det(my_D)) + log(det(kpp)) +  inner(b) * test_theta)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "BGFS", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "BFGS", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "BFG", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds, lower = 0, upper = 100)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "L-BFGS-B", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds, lower = 0, upper = 100)
coxfit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme::VarCorr(coxfit)
coxme::VarCorr(coxfit)$M
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "L-BFGS-B", control = list(fnscale = -1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds,
lower = 0.01, upper = 100)
optim(c(0.8), fn = optim_ipl, gr = NULL, method = "L-BFGS-B", control = list(fnscale = 1),
start_parms = start_parms, X = my_X, t = "t", cluster = "M", dij = stat, data = ds,
lower = 0.01, upper = 100)
