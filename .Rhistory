nreps = 2
one_rep <- function(...){
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
data.frame(estimate_parameters_loop = c(ests$new_beta_b, theta = ests$new_theta),
coxme = c(coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M,
theta = coxme::VarCorr(coxme_fit)$M))
}
cl <- parallel::makeCluster(parallel::detectCores()-2)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep"))
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
# devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
# devtools::load_all(path = "/home/bdra011/svycoxme")
})
fits <- parallel::parLapply(cl, split(seq_len(nreps), seq_len(nreps)) , onerep)
fits <- parallel::parLapply(cl, split(seq_len(nreps), seq_len(nreps)) , one_rep)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("one_rep", "my_beta", "my_theta", "my_k", "my_nk", "my_X"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
# devtools::load_all(path = "C:/Users/bdra011/Documents/PhD_local/svycoxme")
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
# devtools::load_all(path = "/home/bdra011/svycoxme")
})
fits <- parallel::parLapply(cl, split(seq_len(nreps), seq_len(nreps)) , one_rep)
#stop the cluster
parallel::stopCluster(cl)
fits
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
estimate_parameters
devtools::load_all(".")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
fit2 <- estimate_parameters(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
fit2[["new_theta"]]
fit2 <- estimate_parameters2(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds)
fit2[["new_theta"]]
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
theta_est <- coxme::VarCorr(coxme_fit)
coxme_fit$hmat
library(bdsmatrix)
L <- as.matrix(coxme_fit$hmat)
D <- diag(coxme_fit$hmat)
L %*% D %*% t(L)
L <- as.matrix(coxme_fit$hmat)
D <- diag(coxme_fit$hmat)
L %*% D
L %*% D %*% L
t(L) %*% D %*% L
L %*% diag(D) %*% t(L)
hess_22 <- hess[1:50, 1:50]
hess <- L %*% diag(D) %*% t(L)
hess_22 <- hess[1:50, 1:50]
solve(hess_22)
inv_hess_22 <- solve(hess_22)
sum(diag(inv_hess_22 %*% inv_hess_22))
b_est <- coxme::ranef(coxme_fit)
2 * theta_est^2 * (length(b_est) + sum(diag(inv_hess_22 %*% inv_hess_22)) -
(2/theta_est) * sum(diag(inv_hess_22)))
theta_est <- coxme::VarCorr(coxme_fit)$M
2 * theta_est^2 * (length(b_est) + sum(diag(inv_hess_22 %*% inv_hess_22)) -
(2/theta_est) * sum(diag(inv_hess_22)))
length(b_est)
b_est <- coxme::ranef(coxme_fit)$M
2 * theta_est^2 * (length(b_est) + sum(diag(inv_hess_22 %*% inv_hess_22)) -
(2/theta_est) * sum(diag(inv_hess_22)))
2 * theta_est^2 * (length(b_est) + sum(diag(inv_hess_22 %*% inv_hess_22)) -
(2/theta_est) * sum(diag(inv_hess_22)))^(-1)
ci_theta <- function(theta, var_theta){
theta + c(-1.96, 1.96) * var_theta
}
var_theta <- 2 * theta_est^2 * (length(b_est) + sum(diag(inv_hess_22 %*% inv_hess_22)) -
(2/theta_est) * sum(diag(inv_hess_22)))^(-1)
theta_est + c(-1.96, 1.96) * var_theta
rgb2hsv(255, 0, 0)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(ds, "random_effect")
D <- my_theta * diag(my_k)
D <- my_theta * diag(my_k)
D_inv <- solve(D)
D_inv %*% D_inv
my_k = 10
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(ds, "random_effect")
D <- my_theta * diag(my_k)
D_inv <- solve(D)
D_inv %*% D_inv
my_theta = 0.2
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(ds, "random_effect")
D <- my_theta * diag(my_k)
D_inv <- solve(D)
D_inv %*% D_inv
b * D_inv %*% D_inv * b
t(b) * D_inv %*% D_inv * b
t(b) %*% D_inv %*% D_inv
t(b) %*% D_inv %*% D_inv %*% b
inner(b)
t(b) %*% D_inv %*% D_inv %*% b
inner(b) * (1/theta)^2
inner(b) * (1/my_theta)^2
microbenchmark::microbenchmark(
t(b) %*% D_inv %*% D_inv %*% b
)
microbenchmark::microbenchmark(
inner(b) * (1/my_theta)^2
)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(ds, "random_effect")
D <- my_theta * diag(my_k)
D_inv <- solve(D)
microbenchmark::microbenchmark(
t(b) %*% D_inv %*% D_inv %*% b
)
microbenchmark::microbenchmark(
inner(b) * (1/my_theta)^2
)
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 50
my_nk = 4
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit0 <- survival::coxph(survival::Surv(stat_time, stat) ~ X1 + X2 + X3, data = ds)
my_start_parameters <- c(coef(fit0), rep(0, my_k))
names(my_start_parameters) <- c(my_X, paste0("Z", seq_len(my_k)))
test_loop <- estimate_parameters_loop(start_theta = 0.5,
start_parms = my_start_parameters,
X = my_X,
stat_time = stat_time,
cluster = "M",
dij = stat,
data = ds, max_iter = 200)
ests <- tail(test_loop$estimate_history, 1)[[1]]
ests
theta_ipl_gr(one_theta = ests$new_theta,
parms = ests$new_beta_b,
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
coxme::VarCorr(coxme_fit)$M
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme::VarCorr(coxme_fit)$M
c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M)
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
theta_ipl_gr(one_theta = my_theta,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
my_theta
coxme::VarCorr(coxme_fit)$M
theta_ipl_gr
devtools::load_all(".")
devtools::load_all(".")
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
D <- diag(coxme_fit$hmat)
library(bdsmatrix)
D <- diag(coxme_fit$hmat)
L <- as.matrix(coxme_fit$hmat)
seq_len(my_k)
D <- diag(coxme_fit$hmat)
L <- as.matrix(coxme_fit$hmat)
hess <- L %*% diag(D) %*% t(L)
hess_22 <- hess[seq_len(my_k), seq_len(my_k)]
inv_hess_22 <- solve(hess_22)
theta_ipl_gr
devtools::load_all(".")
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
theta_inv <- 1/coxme::VarCorr(coxme_fit)$M
my_k
inv_hess_22
0.5 * (inner(b) * (theta_inv)^2 - sum(my_k * theta_inv) - sum(diag(inv_hess_22)))
0.5 * (inner(b) * (theta_inv)^2 - sum(my_k * theta_inv) - sum(diag(inv_hess_22)))
inv_hess_22
debugonce(theta_ipl_gr)
theta_ipl_gr(one_theta = coxme::VarCorr(coxme_fit)$M,
parms = c(coxme::fixef(coxme_fit), coxme::ranef(coxme_fit)$M),
X = my_X,
stat_time = stat_time,
dij = stat,
cluster = "M",
data = ds)
kbb
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = stat_time, dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
lp
fit$loglik
my_loglik
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
devtools::load_all(".")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
parm_names
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
# and penalties?
fit$penalty - attr(my_loglik, "penalty")
my_loglik
lp
# and penalties?
fit$penalty - attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
coxme_est_theta
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
dplyr::pull(parm)
fit$u
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u)
lp
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
coxme_est_parms
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
fit$loglik
my_loglik
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
# and penalties?
fit$penalty - attr(my_loglik, "penalty")
ds
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
my_X = c("X1", "X2", "X3")
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
parm_names <- c(my_X, paste0("Z", seq_len(my_k)))
parm_names
names(coxme_est_parms) <- parm_names
coxme_est_parms
my_loglik <- lp(parms = coxme_est_parms,
X = my_X,
cluster = "M",
t = stat_time,
dij = stat,
theta = coxme_est_theta,
data = ds)
# what is the difference between our log likelihoods?
fit$loglik["Penalized"] - my_loglik
