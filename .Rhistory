score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
### when using counting time:
test2 <- list(
# start=c(0,0,0,0,0,0,0,0,0,0),
start=c(1,2,5,2,1,7,3,4, 8, 8),
stop= c(2,3,6,7,8,9,9,9,14,17),
event=c(1,1,1,1,1,1,1,0,0,0),
x=c(1,0,0,1,0,1,1,1,0,0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$stop, test2$start),]
test2$y <- rev(seq(n))
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
#### counting time with recurrent events.
test2 <- list(
id =  c(1,1, 1, 2,2, 2, 3,3,   4,  4),
start=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
stop= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
test2
#### counting time with recurrent events.
test2 <- list(
id =  c(1,1, 1, 2,2, 2, 3,3,   4,  4),
start=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
stop= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$stop, test2$start),]
test2$y <- rev(seq(n))
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
library(ggplot2)
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y)) + geom_segment()
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y, colour = "id")) + geom_segment()
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y, colour = id)) + geom_segment()
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y, colour = as.factor(id))) + geom_segment()
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
cgd0 <- cgd0
newcgd <- tmerge(data1=cgd0[, 1:13], data2=cgd0, id=id, tstop=futime)
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime1))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime2))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime3))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime4))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime5))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime6))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime7))
newcgd <- tmerge(newcgd, newcgd, id, enum=cumtdc(tstart))
newcgd_sorted <- newcgd[order(newcgd$tstop, newcgd$tstart), ]
fit <- coxph(Surv(tstart, tstop, infect) ~ treat + inherit + steroids,
data = newcgd_sorted, cluster = id, ties = 'breslow')
my_parts <- make_parts(fit, data = newcgd_sorted, weights = rep(1, nrow(newcgd)))
my_score <- calc_ui(my_parts)
score <- resid(fit, type = "score")
my_score |> colSums()
score |> colSums()
all.equal(my_score, score)
all.equal(as.matrix(my_score), all.equal(score))
all.equal(as.matrix(my_score), as.matrix(score))
Map
mapply
devtools::load_all(".")
test2 <- list(
id =  c(1,1, 1, 2,2, 2, 3,3,   4,  4),
start=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
stop= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$stop, test2$start),]
test2$y <- rev(seq(n))
fit <- coxph(Surv(start, stop, event) ~ x + x2, test2, x = TRUE, ties = 'breslow')
library(ggplot2)
ggplot(test2, aes(x = start, xend =stop, y = y, yend = y, colour = as.factor(id))) + geom_segment()
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
devtools::load_all(".")
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
devtools::load_all(".")
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
all(score_mine - score_therneau < .Machine$double.neg.eps*10)
devtools::load_all(".")
fit <- coxme::coxme(Surv(start, stop, event) ~ x + x2 + (1 | id), test2)
fit
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
devtools::load_all(".")
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
score_therneau <- resid(fit, type = "score")
score_mine
source("C:/Users/bdra011/OneDrive - The University of Auckland/PhD/outputs/scratchpads and notes/from_claudia.R", echo=TRUE)
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = coxme::ranef(fit),
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
#### counting time with coxme
test2 <- list(
idK =  c(1,1, 1, 2,2, 2, 3,3,   4,  4),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$stop, test2$start),]
#### counting time with coxme
test2 <- list(
idK =  c(1,1, 1, 2,2, 2, 3,3,   4,  4),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea),]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(start, stop, event) ~ x + x2 + (1 | id), test2)
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = coxme::ranef(fit),
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea),]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(calc_ui.coxph_parts)
score_mine <- calc_ui(parts3)
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = coxme::ranef(fit),
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
test2
class(test2$idK)
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10)) |>
as.data.frame()
n = nrow(test2)
test2 <- test2[order(test2$timeb, test2$timea),]
test2$y <- rev(seq(n))
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxph)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = coxme::ranef(fit),
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = coxme::ranef(fit),
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
mydata_sample1
bi0
coxme::ranef(fit)
myb <- unlist(coxme::ranef(fit))
myb
unlist(coxme::ranef(fit), use.names = FALSE)
myb <- unlist(coxme::ranef(fit), use.names = FALSE)
names(myb) <- 1:4
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = coxme::ranef(fit),
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
ScoreAll <- function(  beta0, b0 ,mydata_sample1 , theta0  ){
## b needs names, mydata_sample, theta0, b0
#mydata_sample <-GenerateSample(mydata, seed0,    nK)    # N should be multiple of K
##   Ind   <- mydata_sample$R1 ==1;  mydata_sample1 <- mydata_sample[Ind, ]
mydata_sample1  <-  mydata_sample1 %>% arrange(idK, timeb ) %>% mutate(idK= as.character(idK) ) %>%
group_by(idK) %>% mutate(Nk=  n( ))
n <- nrow(mydata_sample1)
K <- length(unique(mydata_sample1$idK))
bi0      <- data.frame(b=b0, idK= names( b0) )
rownames(bi0)  <- paste('idK', bi0$idK, sep='')
mydata_sample1  <- left_join(mydata_sample1,bi0, by='idK' ) %>% arrange(idK, timeb)
formi   <-   formula(~  0+ x + x2  )
formiM  <-   formula(~  0+ idK )
MM      <-   model.matrix(formiM, mydata_sample1)
b       <-   bi0[colnames(MM),]$b
#nk_v     <-   mydata_sample1$Nk
#sum(MM%*%b - mydata_sample1$b)
XX     <-  model.matrix(formi, mydata_sample1)
eta_x  <-  as.vector((cbind(XX%*%beta0)) +mydata_sample1$b)
d   <- mydata_sample1$di
rs<-  riskset(mydata_sample1$timea, mydata_sample1$timeb)
rsinv_m   <-    rsinv(mydata_sample1$timea, mydata_sample1$timeb)
we  <- mydata_sample1$weights
eta_xM <- cbind(eta_x)
N <-  sum(we)
S0  <- as.vector(sumrs(rs, we*exp(eta_xM )) )/N
Aux1  <-  exp(eta_x)*XX
Aux2  <-  exp(eta_x)*MM
S1x <- sumrs(rs, Aux1*we ) /N
S1z <- sumrs(rs, Aux2*we )  /N
U_part2_X <- XX*0
idK <- mydata_sample1$idK
listXXTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , XX, k=k, idK=idK) }  )
names(listXXTj) <- unique(idK)
listMMTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , MM, k=k, idK=idK) }  )
names(listMMTj) <- unique(idK)
listEtaj<- lapply(X=unique(idK), FUN=function(k){ as.vector(exp(  listXXTj[[k]]%*%beta0 +bi0[bi0[,2]== k,1]) ) }  )
names(listEtaj) <- unique(idK)
Aux3a  <-  exp(eta_x_i)*Xi_at_Tj_m/S0
Aux4a  <-  exp(eta_x_i)*S1x/(S0^2)
listS0 <- rep(list(S0=1/S0 ), n)
listS1xS0 <- rep(list(S1xS0=S1x/(S0^2)), n)
listXXTj_S0 <- Map('*', listS0 ,listXXTj[idK])
Aux3a_l <-  Map('*',listEtaj[idK],listXXTj_S0)
Aux4a_l <-  Map('*',listS1xS0 , listEtaj[idK]  )
U_part2_X<- t(sapply( (1:n), FUN= function(x)  t(d*we*Aux3a_l[[x]])%*%rsinv_m[x,]/N   ) )-
t(sapply( (1:n), FUN= function(x)  t(d*we*Aux4a_l[[x]])%*%rsinv_m[x,]/N   ) )
UX <- d* (XX-S1x/S0 ) -   U_part2_X
return( cbind(UX )/mean( we  )  )
}
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
myb
myb <- unlist(coxme::ranef(fit), use.names = FALSE)
myb
names(myb) <- 1:4
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(  beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
XX
mydata_sample1$b
mydata_sample1$idK
ScoreAll <- function(  beta0, b0 ,mydata_sample1 , theta0  ){
## b needs names, mydata_sample, theta0, b0
#mydata_sample <-GenerateSample(mydata, seed0,    nK)    # N should be multiple of K
##   Ind   <- mydata_sample$R1 ==1;  mydata_sample1 <- mydata_sample[Ind, ]
mydata_sample1  <-  mydata_sample1 %>% arrange(idK, timeb ) %>% mutate(idK= as.character(idK) ) %>%
group_by(idK) %>% mutate(Nk=  n( ))
n <- nrow(mydata_sample1)
K <- length(unique(mydata_sample1$idK))
bi0      <- data.frame(b=b0, idK= names( b0) )
rownames(bi0)  <- paste('idK', bi0$idK, sep='')
mydata_sample1  <- left_join(mydata_sample1,bi0, by='idK' ) %>% arrange(idK, timeb)
formi   <-   formula(~  0+ x + x2  )
formiM  <-   formula(~  0+ idK )
MM      <-   model.matrix(formiM, mydata_sample1)
b       <-   bi0[colnames(MM),]$b
#nk_v     <-   mydata_sample1$Nk
#sum(MM%*%b - mydata_sample1$b)
XX     <-  model.matrix(formi, mydata_sample1)
eta_x  <-  as.vector((cbind(XX%*%beta0)) +mydata_sample1$b)
d   <- mydata_sample1$stat
rs<-  riskset(mydata_sample1$timea, mydata_sample1$timeb)
rsinv_m   <-    rsinv(mydata_sample1$timea, mydata_sample1$timeb)
we  <- mydata_sample1$weights
eta_xM <- cbind(eta_x)
N <-  sum(we)
S0  <- as.vector(sumrs(rs, we*exp(eta_xM )) )/N
Aux1  <-  exp(eta_x)*XX
Aux2  <-  exp(eta_x)*MM
S1x <- sumrs(rs, Aux1*we ) /N
S1z <- sumrs(rs, Aux2*we )  /N
U_part2_X <- XX*0
idK <- mydata_sample1$idK
listXXTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , XX, k=k, idK=idK) }  )
names(listXXTj) <- unique(idK)
listMMTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , MM, k=k, idK=idK) }  )
names(listMMTj) <- unique(idK)
listEtaj<- lapply(X=unique(idK), FUN=function(k){ as.vector(exp(  listXXTj[[k]]%*%beta0 +bi0[bi0[,2]== k,1]) ) }  )
names(listEtaj) <- unique(idK)
Aux3a  <-  exp(eta_x_i)*Xi_at_Tj_m/S0
Aux4a  <-  exp(eta_x_i)*S1x/(S0^2)
listS0 <- rep(list(S0=1/S0 ), n)
listS1xS0 <- rep(list(S1xS0=S1x/(S0^2)), n)
listXXTj_S0 <- Map('*', listS0 ,listXXTj[idK])
Aux3a_l <-  Map('*',listEtaj[idK],listXXTj_S0)
Aux4a_l <-  Map('*',listS1xS0 , listEtaj[idK]  )
U_part2_X<- t(sapply( (1:n), FUN= function(x)  t(d*we*Aux3a_l[[x]])%*%rsinv_m[x,]/N   ) )-
t(sapply( (1:n), FUN= function(x)  t(d*we*Aux4a_l[[x]])%*%rsinv_m[x,]/N   ) )
UX <- d* (XX-S1x/S0 ) -   U_part2_X
return( cbind(UX )/mean( we  )  )
}
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
test2
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
stat = event,
weights = 1) |>
as.data.frame()
ScoreAll <- function(  beta0, b0 ,mydata_sample1 , theta0  ){
## b needs names, mydata_sample, theta0, b0
#mydata_sample <-GenerateSample(mydata, seed0,    nK)    # N should be multiple of K
##   Ind   <- mydata_sample$R1 ==1;  mydata_sample1 <- mydata_sample[Ind, ]
mydata_sample1  <-  mydata_sample1 %>% arrange(idK, timeb ) %>% mutate(idK= as.character(idK) ) %>%
group_by(idK) %>% mutate(Nk=  n( ))
n <- nrow(mydata_sample1)
K <- length(unique(mydata_sample1$idK))
bi0      <- data.frame(b=b0, idK= names( b0) )
rownames(bi0)  <- paste('idK', bi0$idK, sep='')
mydata_sample1  <- left_join(mydata_sample1,bi0, by='idK' ) %>% arrange(idK, timeb)
formi   <-   formula(~  0+ x + x2  )
formiM  <-   formula(~  0+ idK )
MM      <-   model.matrix(formiM, mydata_sample1)
b       <-   bi0[colnames(MM),]$b
#nk_v     <-   mydata_sample1$Nk
#sum(MM%*%b - mydata_sample1$b)
XX     <-  model.matrix(formi, mydata_sample1)
eta_x  <-  as.vector((cbind(XX%*%beta0)) +mydata_sample1$b)
d   <- mydata_sample1$event
rs<-  riskset(mydata_sample1$timea, mydata_sample1$timeb)
rsinv_m   <-    rsinv(mydata_sample1$timea, mydata_sample1$timeb)
we  <- mydata_sample1$weights
eta_xM <- cbind(eta_x)
N <-  sum(we)
S0  <- as.vector(sumrs(rs, we*exp(eta_xM )) )/N
Aux1  <-  exp(eta_x)*XX
Aux2  <-  exp(eta_x)*MM
S1x <- sumrs(rs, Aux1*we ) /N
S1z <- sumrs(rs, Aux2*we )  /N
U_part2_X <- XX*0
idK <- mydata_sample1$idK
listXXTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , XX, k=k, idK=idK) }  )
names(listXXTj) <- unique(idK)
listMMTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , MM, k=k, idK=idK) }  )
names(listMMTj) <- unique(idK)
listEtaj<- lapply(X=unique(idK), FUN=function(k){ as.vector(exp(  listXXTj[[k]]%*%beta0 +bi0[bi0[,2]== k,1]) ) }  )
names(listEtaj) <- unique(idK)
Aux3a  <-  exp(eta_x_i)*Xi_at_Tj_m/S0
Aux4a  <-  exp(eta_x_i)*S1x/(S0^2)
listS0 <- rep(list(S0=1/S0 ), n)
listS1xS0 <- rep(list(S1xS0=S1x/(S0^2)), n)
listXXTj_S0 <- Map('*', listS0 ,listXXTj[idK])
Aux3a_l <-  Map('*',listEtaj[idK],listXXTj_S0)
Aux4a_l <-  Map('*',listS1xS0 , listEtaj[idK]  )
U_part2_X<- t(sapply( (1:n), FUN= function(x)  t(d*we*Aux3a_l[[x]])%*%rsinv_m[x,]/N   ) )-
t(sapply( (1:n), FUN= function(x)  t(d*we*Aux4a_l[[x]])%*%rsinv_m[x,]/N   ) )
UX <- d* (XX-S1x/S0 ) -   U_part2_X
return( cbind(UX )/mean( we  )  )
}
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timeb= c(2,5,10, 7,8,12, 9,12,  6, 12),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
debugonce(ScoreAll)
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
eta_x
Xi_at_Tj_m
listXXTj
S0
ScoreAll <- function(  beta0, b0 ,mydata_sample1 , theta0  ){
## b needs names, mydata_sample, theta0, b0
#mydata_sample <-GenerateSample(mydata, seed0,    nK)    # N should be multiple of K
##   Ind   <- mydata_sample$R1 ==1;  mydata_sample1 <- mydata_sample[Ind, ]
mydata_sample1  <-  mydata_sample1 %>% arrange(idK, timeb ) %>% mutate(idK= as.character(idK) ) %>%
group_by(idK) %>% mutate(Nk=  n( ))
n <- nrow(mydata_sample1)
K <- length(unique(mydata_sample1$idK))
bi0      <- data.frame(b=b0, idK= names( b0) )
rownames(bi0)  <- paste('idK', bi0$idK, sep='')
mydata_sample1  <- left_join(mydata_sample1,bi0, by='idK' ) %>% arrange(idK, timeb)
formi   <-   formula(~  0+ x + x2  )
formiM  <-   formula(~  0+ idK )
MM      <-   model.matrix(formiM, mydata_sample1)
b       <-   bi0[colnames(MM),]$b
#nk_v     <-   mydata_sample1$Nk
#sum(MM%*%b - mydata_sample1$b)
XX     <-  model.matrix(formi, mydata_sample1)
eta_x  <-  as.vector((cbind(XX%*%beta0)) +mydata_sample1$b)
d   <- mydata_sample1$event
rs<-  riskset(mydata_sample1$timea, mydata_sample1$timeb)
rsinv_m   <-    rsinv(mydata_sample1$timea, mydata_sample1$timeb)
we  <- mydata_sample1$weights
eta_xM <- cbind(eta_x)
N <-  sum(we)
S0  <- as.vector(sumrs(rs, we*exp(eta_xM )) )/N
Aux1  <-  exp(eta_x)*XX
Aux2  <-  exp(eta_x)*MM
S1x <- sumrs(rs, Aux1*we ) /N
S1z <- sumrs(rs, Aux2*we )  /N
U_part2_X <- XX*0
idK <- mydata_sample1$idK
listXXTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , XX, k=k, idK=idK) }  )
names(listXXTj) <- unique(idK)
listMMTj<- lapply(X=unique(idK), FUN=function(k){ Xi_at_Tj(tstart=mydata_sample1$timea  , tstop= mydata_sample1$timeb , MM, k=k, idK=idK) }  )
names(listMMTj) <- unique(idK)
listEtaj<- lapply(X=unique(idK), FUN=function(k){ as.vector(exp(  listXXTj[[k]]%*%beta0 +bi0[bi0[,2]== k,1]) ) }  )
names(listEtaj) <- unique(idK)
# Aux3a  <-  exp(eta_x_i)*Xi_at_Tj_m/S0
# Aux4a  <-  exp(eta_x_i)*S1x/(S0^2)
listS0 <- rep(list(S0=1/S0 ), n)
listS1xS0 <- rep(list(S1xS0=S1x/(S0^2)), n)
listXXTj_S0 <- Map('*', listS0 ,listXXTj[idK])
Aux3a_l <-  Map('*',listEtaj[idK],listXXTj_S0)
Aux4a_l <-  Map('*',listS1xS0 , listEtaj[idK]  )
U_part2_X<- t(sapply( (1:n), FUN= function(x)  t(d*we*Aux3a_l[[x]])%*%rsinv_m[x,]/N   ) )-
t(sapply( (1:n), FUN= function(x)  t(d*we*Aux4a_l[[x]])%*%rsinv_m[x,]/N   ) )
UX <- d* (XX-S1x/S0 ) -   U_part2_X
return( cbind(UX )/mean( we  )  )
}
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
score_mine
difftime("18-08-2023", "30-07-2023")
as.Date("18-08-2023")
difftime("2023-08-18", "2023-07-30")
290/19*30
