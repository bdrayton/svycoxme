dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
d4 <- calcRiskSets(d3, vars = Z_names, varCol = "Zr")
d5 <- calcCrossProducts(d2, Z_names, Z_names, "Zr", "Zs")
d6 <- dplyr::left_join(d4, d5, by = c("index", "Zr"))
d6
View(d6)
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Zr, Zs) %>%
dplyr::mutate(ZrZs_A = ZrZs * A,
cumsum_XrXs_A = cumsum(ZrZs_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Zr, Zs)
by_hand_hess <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Zr_A^2)/(cumsum_A)^2 - cumsum_ZrZs_A/cumsum_A)
) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Zr, Zs) %>%
dplyr::mutate(ZrZs_A = ZrZs * A,
cumsum_ZrZs_A = cumsum(ZrZs_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Zr, Zs)
by_hand_hess_22 <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Zr_A^2)/(cumsum_A)^2 - cumsum_ZrZs_A/cumsum_A)
) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
d4 <- calcRiskSets(d3, vars = c("X1", "X2", "X3"), varCol = "Xr")
d5 <- calcCrossProducts(d2, c("X1", "X2", "X3"), c("X1", "X2", "X3"), "Xr", "Xs")
d6 <- dplyr::left_join(d4, d5, by = c("index", "Xr"))
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Xr, Xs) %>%
dplyr::mutate(XrXs_A = XrXs * A,
cumsum_XrXs_A = cumsum(XrXs_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Xr, Xs)
by_hand_hess_11 <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Xr_A^2)/(cumsum_A)^2 - cumsum_XrXs_A/cumsum_A)
) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
by_hand_hess_22
by_hand_hess_22 %>%
tidyr::pivot_wider(names_from = Zs, values_from = ll)
d7
penalty = solve(D)
D
penalty = solve(D)
penalty
by_hand_hess_22 %>%
tidyr::pivot_wider(names_from = Zs, values_from = ll)
by_hand_hess_22 %>%
tidyr::pivot_wider(names_from = Zs, values_from = ll) %>%
tibble::column_to_rownames("Zr")
by_hand_hess_22 %>%
tidyr::pivot_wider(names_from = Zs, values_from = ll) %>%
tibble::column_to_rownames("Zr") %>%
as.matrix()
unpenalised <- by_hand_hess_22 %>%
tidyr::pivot_wider(names_from = Zs, values_from = ll) %>%
tibble::column_to_rownames("Zr") %>%
as.matrix()
unpenalised - penalty
fit <- survival::coxph(survival::Surv(t, stat) ~ X1, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
names(start_parameters) <- c("X1", paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
fit_optim$hessian
diag(fit_optim$hessian)
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
names(start_parameters) <- c("X1", "X2", "X3", paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = D,
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
diag(fit_optim$hessian)[-1]
diag(fit_optim$hessian)[c(-1, -2, -3)]
diag(fit_optim$hessian)[c(-1, -2, -3)] |> sum()
penalised = unpenalised - penalty
sum(diag(penalised))
diag(fit_optim$hessian)
diag(penalised)
diag(fit_optim$hessian)[c(-1, -2, -3)]
diag(penalised)
d4x <- calcRiskSets(d3, vars = c("X1", "X2", "X3"), varCol = "Xr")
d4z <- calcRiskSets(d3, vars = Z_names, varCol = "Zr")
d4x
d5 <- calcCrossProducts(d2, c("X1", "X2", "X3"), Z_names, "Xr", "Zr")
d5
names(d4x)
d4x %>% dplyr::select(index, stat, A, cumsum_A, Xr, cumsum_Xr_A)
names(d4x)
d4x
dplyr::left_join(
d4x %>% dplyr::select(index, stat, A, cumsum_A, Xr, cumsum_Xr_A),
d4z %>%  dplyr::select(index, Zr, cumsum_Zr_A))
dplyr::left_join(
d4x %>% dplyr::select(index, stat, A, cumsum_A, Xr, cumsum_Xr_A),
d4z %>%  dplyr::select(index, Zr, cumsum_Zr_A))
dplyr::left_join(
d4x %>% dplyr::select(index, stat, A, cumsum_A, Xr, cumsum_Xr_A),
d4z %>%  dplyr::select(index, Zr, cumsum_Zr_A)) %>%
View()
d4 <- dplyr::left_join(
d4x %>% dplyr::select(index, stat, A, cumsum_A, Xr, cumsum_Xr_A),
d4z %>%  dplyr::select(index, Zr, cumsum_Zr_A))
d4 <- dplyr::left_join(
d4x %>% dplyr::select(index, stat, A, cumsum_A, Xr, cumsum_Xr_A),
d4z %>%  dplyr::select(index, Zr, cumsum_Zr_A), by = "index")
d5 <- calcCrossProducts(d2, c("X1", "X2", "X3"), Z_names, "Xr", "Zr")
d6 <- left_join(d4, d5, by = c("index", "Xr", "Zr"))
d6 <- dplyr::left_join(d4, d5, by = c("index", "Xr", "Zr"))
d6
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Xr, Zr) %>%
dplyr::mutate(XrZr_A = XrZr * A,
cumsum_XrZr_A = cumsum(XrZr_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Xr, Zr)
d7
by_hand_hess_21 <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Xr_A * cumsum_Zr_A)/(cumsum_A)^2 - cumsum_XrZr_A/cumsum_A)) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
by_hand_hess_21
by_hand_hess_21 %>%
tidyr::pivot_wider(names_from = Zr, values_from = ll)
by_hand_hess_21 %>%
tidyr::pivot_wider(names_from = Xr, values_from = ll)
fit_optim$hessian
devtools::load_all(".")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random effects")
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta, b)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
debugonce(BB)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
names(sample_data)
debugonce(BB)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
names(d7)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
devtools::load_all(".")
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
debugonce(Bb)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
d5 <- calcCrossProducts(sortedIndexedData, X, Z_names, "Xr", "Zr")
d6 <- dplyr::left_join(d4, d5, by = c("index", "Xr", "Zr"))
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Xr, Zr) %>%
dplyr::mutate(XrZr_A = XrZr * A,
cumsum_XrZr_A = cumsum(XrZr_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Xr, Zr)
ll <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Xr_A * cumsum_Zr_A)/(cumsum_A)^2 - cumsum_XrZr_A/cumsum_A)) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
ll
devtools::load_all(".")
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
devtools::load_all(".")
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
devtools::load_all(".")
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
devtools::load_all(".")
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
devtools::load_all(".")
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
debugonce(bb)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
debugonce(bb)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
penalty
penalty
penalty %>%
dplyr::mutate(Zr = tidyselect::all_of(Z_names), .before = everything())
penalty %>%
dplyr::mutate(Zr = tidyselect::all_of(Z_names), .before = everything()) %>%
tidyr::pivot_longer(names_to = "Zs", values_to = "penalty")
penalty %>%
dplyr::mutate(Zr = tidyselect::all_of(Z_names), .before = everything()) %>%
tidyr::pivot_longer(cols = Z_names, names_to = "Zs", values_to = "penalty")
devtools::load_all(".")
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
devtools::load_all(".")
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
my_parms <- c(my_beta, b <- attr(sample_data, "random_effects"))
D = my_theta * diag(length(b))
Z_matrix <- model.matrix( ~ as.factor(M) - 1, data = sample_data)
Z_names <- paste0("Z", seq(ncol(Z_matrix)))
colnames(Z_matrix) <- paste0("Z", seq(ncol(Z_matrix)))
data_with_Z <- dplyr::bind_cols(sample_data, data.frame(Z_matrix))
d2 <- sortAndIndex(data_with_Z, t)
d3 <- calcLinearPredictor(data = d2, X = c("X1", "X2", "X3"), Z = colnames(Z_matrix), parms = my_parms)
d4 <- calcRiskSets(d3, vars = c("X1", "X2", "X3"), varCol = "Xr")
d5 <- calcCrossProducts(d2, c("X1", "X2", "X3"), c("X1", "X2", "X3"), "Xr", "Xs")
d6 <- dplyr::left_join(d4, d5, by = c("index", "Xr"))
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Xr, Xs) %>%
dplyr::mutate(XrXs_A = XrXs * A,
cumsum_XrXs_A = cumsum(XrXs_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Xr, Xs)
by_hand_hess_11 <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Xr_A^2)/(cumsum_A)^2 - cumsum_XrXs_A/cumsum_A)
) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
d4 <- calcRiskSets(d3, vars = Z_names, varCol = "Zr")
d5 <- calcCrossProducts(d2, Z_names, Z_names, "Zr", "Zs")
d6 <- dplyr::left_join(d4, d5, by = c("index", "Zr"))
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Zr, Zs) %>%
dplyr::mutate(ZrZs_A = ZrZs * A,
cumsum_ZrZs_A = cumsum(ZrZs_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Zr, Zs)
by_hand_hess_22 <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Zr_A^2)/(cumsum_A)^2 - cumsum_ZrZs_A/cumsum_A)
) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
penalty = solve(D)
unpenalised <- by_hand_hess_22 %>%
tidyr::pivot_wider(names_from = Zs, values_from = ll) %>%
tibble::column_to_rownames("Zr") %>%
as.matrix()
penalised = unpenalised - penalty
penalised
hess
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
debugonce(ppl_hessian)
ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
dplyr::bind_rows(H11_long, H12_long, H21_long, H22_long)
dplyr::bind_rows(H11_long, H12_long, H21_long, H22_long) %>%
tidyr::pivot_wider(names_from = cols, values_from = ll)
dplyr::bind_rows(H11_long, H12_long, H21_long, H22_long) %>%
tidyr::pivot_wider(names_from = cols, values_from = ll) %>%
tibble::column_to_rownames(rows)
devtools::load_all(".")
ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat, data = sample_data, theta = my_theta)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
names(start_parameters) <- c("X1", "X2", "X3", paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = my_theta * diag(length(b)),
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
fit_optim$hessian
my_hessian <- ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
fit_optim$hessian - my_hessian
solve(fit_optim$hessian)
solve(my_hessian)
diag(fit_optim$hessian)
diag(my_hessian)
solve(my_hessian)
solve(my_hessian[1:3, 1:3])
solve(my_hessian)[1:3, 1:3]
solve(my_hessian[1:3, 1:3])
diag(solve(my_hessian[1:3, 1:3]))
sds <- sqrt(diag(solve(my_hessian[1:3, 1:3])))
sds
coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = sample_data)
diag(fit_optim$hessian)
solve(-my_hessian)[1:3, 1:3]
diag(my_hessian)
-fit_optim$hessian
solve(-fit_optim$hessian)
solve(-my_hessian)
solve(-fit_optim$hessian)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data)
my_hessian <- ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
my_hessian
fit_optim$hessian
debug(BB)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data)
View(d6)
View(addedLP)
my_parms <- c(my_beta, b <- attr(sample_data, "random_effects"))
D = my_theta * diag(length(b))
Z_matrix <- model.matrix( ~ as.factor(M) - 1, data = sample_data)
Z_names <- paste0("Z", seq(ncol(Z_matrix)))
colnames(Z_matrix) <- paste0("Z", seq(ncol(Z_matrix)))
data_with_Z <- dplyr::bind_cols(sample_data, data.frame(Z_matrix))
d2 <- sortAndIndex(data_with_Z, t)
d3 <- calcLinearPredictor(data = d2, X = c("X1", "X2", "X3"), Z = colnames(Z_matrix), parms = my_parms)
d4 <- calcRiskSets(d3, vars = c("X1", "X2", "X3"), varCol = "Xr")
d5 <- calcCrossProducts(d2, c("X1", "X2", "X3"), c("X1", "X2", "X3"), "Xr", "Xs")
d6 <- dplyr::left_join(d4, d5, by = c("index", "Xr"))
d7 <- d6 %>%
dplyr::arrange(desc(index)) %>%
dplyr::group_by(Xr, Xs) %>%
dplyr::mutate(XrXs_A = XrXs * A,
cumsum_XrXs_A = cumsum(XrXs_A)) %>%
dplyr::arrange(index) %>%
dplyr::group_by(Xr, Xs)
by_hand_hess_11 <- d7 %>%
dplyr::mutate(
ll_parts = stat * ((cumsum_Xr_A^2)/(cumsum_A)^2 - cumsum_XrXs_A/cumsum_A)
) %>%
dplyr::summarise(ll = sum(ll_parts), .groups = "drop")
by_hand_hess_11
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 50
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta, b)
debug(BB)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data)
my_hessian <- ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 50
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta, b)
BB(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data)
bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta)
Bb(parms = my_params, X = c("X1", "X2", "X3"), t = t, cluster = "M", dij = stat,
data = sample_data)
my_hessian <- ppl_hessian(parms = my_params, X = c("X1", "X2", "X3"), t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
names(start_parameters) <- c("X1", "X2", "X3", paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = my_theta * diag(length(b)),
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
solve(-fit_optim$hessian)
diag(fit_optim$hessian)
diag(my_hessian)
fit_optim$hessian
my_hessian
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
my_parms <- c(my_beta, b <- attr(sample_data, "random_effects"))
D = my_theta * diag(length(b))
Z_matrix <- model.matrix( ~ as.factor(M) - 1, data = sample_data)
Z_names <- paste0("Z", seq(ncol(Z_matrix)))
colnames(Z_matrix) <- paste0("Z", seq(ncol(Z_matrix)))
data_with_Z <- dplyr::bind_cols(sample_data, data.frame(Z_matrix))
d2 <- sortAndIndex(data_with_Z, t)
d3 <- calcLinearPredictor(data = d2, X = c("X1", "X2", "X3"), Z = colnames(Z_matrix), parms = my_parms)
d4 <- calcRiskSets(d3, vars = c("X1", "X2", "X3"), varCol = "Xr")
d5 <- calcCrossProducts(d2, c("X1", "X2", "X3"), c("X1", "X2", "X3"), "Xr", "Xs")
d5
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 50
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta, b)
my_params <- c(my_beta[c(-2, -3)], b)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 50
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[c(-2, -3)], b)
BB(parms = my_params, X = c("X1"), t = t, cluster = "M", dij = stat,
data = sample_data)
bb(parms = my_params, X = c("X1"), t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta)
Bb(parms = my_params, X = c("X1"), t = t, cluster = "M", dij = stat,
data = sample_data)
my_hessian <- ppl_hessian(parms = my_params, X = c("X1"), t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1, data = sample_data)
start_parameters = c(coef(fit), rep(0, length(b)))
names(start_parameters) <- c("X1", paste0("Z", seq_len(length(b))))
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1", "X2", "X3"),
t = t,
cluster = "M",
dij = stat,
D = my_theta * diag(length(b)),
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
fit_optim <- optim(par = start_parameters,
fn = lp,
gr = lp_grd,
X = c("X1"),
t = t,
cluster = "M",
dij = stat,
D = my_theta * diag(length(b)),
data = sample_data,
method = "BFGS",
control = list(fnscale = -1),
hessian = TRUE)
fit_optim$hessian
my_hessian
diag(fit_optim$hessian)
diag(my_hessian)
solve(-my_hessian)
diag(solve(-my_hessian))
sqrt(diag(solve(-my_hessian)))
coxme::coxme(survival::Surv(t, stat) ~ X1 + (1|M), data = sample_data)
sqrt(diag(solve(-fit_optim$hessian)))
