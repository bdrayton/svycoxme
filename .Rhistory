# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea= c(0,0, 0, 0,0, 0, 0, 0,  0,  0),
timeb= c(2,5,10, 7,8,13, 9,14,  6, 15),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
test2 <- test2[order(test2$timeb, test2$timea), ]
n = nrow(test2)
test2$y <- rev(seq(n))
ggplot(test2, aes(x = timea, xend = timeb, y = y, yend = y, shape = factor(event), colour = idK)) + geom_segment()
fit <- coxme::coxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), test2)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
score_mine <- calc_ui(parts3)
vv <- get_information(fit)
vv
fit$variance
score_mine <- calc_ui(parts3)
vv <- get_information(fit)
score_mine %*% vv
uivv <- score_mine %*% vv
survey::svyrecvar(uivv, my_des$cluster, my_des$strata,
my_des$fpc, postStrata = my_des$postStrata)
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea= c(0,0, 0, 0,0, 0, 0, 0,  0,  0),
timeb= c(2,5,10, 7,8,13, 9,14,  6, 15),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
test2 <- test2[order(test2$timeb, test2$timea), ]
n = nrow(test2)
test2$y <- rev(seq(n))
ggplot(test2, aes(x = timea, xend = timeb, y = y, yend = y, shape = factor(event), colour = idK)) + geom_segment()
my_des <- svydesign(~id, weights = ~weights, data = my_samp)
my_des <- svydesign(~id, weights = ~weights, data = test2)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
my_des <- svydesign(~idK, weights = ~weights, data = test2)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
svycoxme_fit_jackknife <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_jackknife)
svycoxme_fit_jackknife <- svycoxme(survival::Surv(timea, timeb, event) ~ x1 + x2 + (1 | idK), des = my_des_jackknife)
#### counting time with coxme
test2 <- list(
idK =  as.character(c(1,1, 1, 2,2, 2, 3,3,   4,  4)),
# timea=c(1,2, 5, 0,7, 8, 0,9,   0,  6),
timea= c(0,0, 0, 0,0, 0, 0, 0,  0,  0),
timeb= c(2,5,10, 7,8,13, 9,14,  6, 15),
event=c(1,1, 1, 1,1, 0, 1, 0,  1,  0),
x=    c(1,1, 1, 0,0, 0, 1,1,   0,  0),
x2 = rnorm(10),
weights = rep(1,10)) |>
as.data.frame()
test2 <- test2[order(test2$timeb, test2$timea), ]
n = nrow(test2)
test2$y <- rev(seq(n))
ggplot(test2, aes(x = timea, xend = timeb, y = y, yend = y, shape = factor(event), colour = idK)) + geom_segment()
my_des <- svydesign(~idK, weights = ~weights, data = test2)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
svycoxme_fit_jackknife <- svycoxme(survival::Surv(timea, timeb, event) ~ x1 + x2 + (1 | idK), des = my_des_jackknife)
svycoxme_fit_jackknife <- svycoxme(Surv(timea, timeb, event) ~ x1 + x2 + (1 | idK), des = my_des_jackknife)
my_des_jackknife$variables
svycoxme_fit_jackknife <- svycoxme(Surv(timea, timeb, event) ~ x + x2 + (1 | idK), des = my_des_jackknife)
survey::svyrecvar(uivv, my_des$cluster, my_des$strata,
my_des$fpc, postStrata = my_des$postStrata)
vcov(svycoxme_fit_jackknife)
myb <- unlist(coxme::ranef(fit), use.names = FALSE)
names(myb) <- 1:4
ScoreAll(beta0  = coxme::fixef(fit),
b0 = myb,
mydata_sample1 = test2 ,
theta0 = unlist(coxme::VarCorr(fit)))
names(newcgd_sorted)
View(newcgd_sorted)
my_des <- svydesign(~id, weights = ~1, data = newcgd_sorted)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
my_des <- svydesign(~id, weights = ~1, data = newcgd_sorted)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
svycoxme_fit_jackknife <- svycoxme(Surv(tstart, tstop, infect) ~ treat + inherit + steroids + (1|id),
des = my_des_jackknife)
fit <- coxme::coxme(Surv(tstart, tstop, infect) ~ treat + inherit + steroids,
data = newcgd_sorted)
fit <- coxme::coxme(Surv(tstart, tstop, infect) ~ treat + inherit + steroids + (1|id),
data = newcgd_sorted)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = test2, weights = rep(1, n))
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = newcgd_sorted, weights = rep(1, nrow(newcgd_sorted)))
score_mine <- calc_ui(parts3)
debugonce(calc_ui)
score_mine <- calc_ui(parts3)
irep
Yi_at_tj
View(newcgd_sorted)
# more tests for score residuals.
library(survival)
cgd0 <- cgd0
newcgd <- tmerge(data1=cgd0[, 1:13], data2=cgd0, id=id, tstop=futime)
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime1))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime2))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime3))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime4))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime5))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime6))
newcgd <- tmerge(newcgd, cgd0, id=id, infect = event(etime7))
newcgd <- tmerge(newcgd, newcgd, id, enum=cumtdc(tstart))
newcgd_sorted <- newcgd[order(newcgd$tstop, newcgd$tstart), ]
newcgd_sorted$y = nrow(newcgd):1
newcgd$y = nrow(newcgd):1
library(ggplot2)
ggplot(newcgd, aes(x = tstart, xend = tstop, y = y, yend = y, shape = factor(infect))) + geom_segment() +
geom_point(aes(x = tstop, y = y))
ggplot(newcgd_sorted, aes(x = tstart, xend = tstop, y = y, yend = y, shape = factor(infect))) + geom_segment() +
geom_point(aes(x = tstop, y = y))
fit <- coxph(Surv(tstart, tstop, infect) ~ treat + inherit + steroids,
data = newcgd_sorted, cluster = id, ties = 'breslow')
my_des <- svydesign(~id, weights = ~1, data = newcgd_sorted)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
svycoxme_fit_jackknife <- svycoxme(Surv(tstart, tstop, infect) ~ treat + inherit + steroids + (1|id),
des = my_des_jackknife)
fit <- coxme::coxme(Surv(tstart, tstop, infect) ~ treat + inherit + steroids + (1|id),
data = newcgd_sorted)
# debugonce(make_parts.coxme)
parts3 <- make_parts(fit, data = newcgd_sorted, weights = rep(1, nrow(newcgd_sorted)))
score_mine <- calc_ui(parts3)
devtools::load_all(".")
debugonce(calc_ui)
score_mine <- calc_ui(parts3)
parts$time_start[i]
parts$time_start[i] < parts$time_stop
parts$time_stop[i] >= parts$time_stop
parts3$stat
parts3$stat* parts3$weights
parts3$stat* parts3$weights * Matrix(rep(c(TRUE, FALSE), c(1, 202)))
parts3$stat* parts3$weights * Matrix(rep(c(TRUE, FALSE), c(1, 202))) * parts3$exp_risk_score
parts3$stat* parts3$weights * Matrix(rep(c(TRUE, FALSE), c(1, 202))) * parts3$exp_risk_score*(1/S0)
parts3$stat* parts3$weights * Matrix(rep(c(TRUE, FALSE), c(1, 202))) * parts3$exp_risk_score*(1/parts3$S0)
parts3$stat* parts3$weights * Matrix(rep(c(TRUE, FALSE), c(1, 202))) * parts3$exp_risk_score*(1/parts3$S0) * (parts3$X[rep(1, 202)])
parts3$stat* parts3$weights * Matrix(rep(c(TRUE, FALSE), c(1, 202))) * parts3$exp_risk_score*(1/parts3$S0) * (parts3$X[rep(1, 202), ])
devtools::load_all(".")
score_mine <- calc_ui(parts3)
debugonce(calc_ui)
score_mine <- calc_ui(parts3)
dim(temp_rep)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
score_mine <- calc_ui(parts3)
devtools::load_all(".")
score_mine <- calc_ui(parts3)
vv <- get_information(fit)
fit
vv <- get_information(fit)
debugonce(get_information)
vv <- get_information(fit)
inf1
inf1[c((nrandom+))]
debugonce(get_information)
vv <- get_information(fit)
inf1[c((nrandom+1):(ntotal)) , c((nrandom+1):(ntotal))]
inf1[c((nrandom+1):(ntotal), 1:nrandom) , c((nrandom+1):(ntotal), 1:nrandom)]
str(bdsmatrix)
str(inf1)
inf1@rmat
inf1 <- as.matrix(inf1)
inf1[c((nrandom+1):(ntotal), 1:nrandom) , c((nrandom+1):(ntotal), 1:nrandom)]
devtools::load_all(".")
vv <- get_information(fit)
vv
uivv <- score_mine %*% vv
survey::svyrecvar(uivv, my_des$cluster, my_des$strata,
my_des$fpc, postStrata = my_des$postStrata)
vcov(svycoxme_fit_jackknife)
sandwich_var <- survey::svyrecvar(uivv, my_des$cluster, my_des$strata,
my_des$fpc, postStrata = my_des$postStrata)
diag(sandwich_var)[1:3]
vcov(svycoxme_fit_jackknife) |> diag()
devtools::load_all(".")
initial_seed = 195607479
cluster_seed = 832465679
set.seed(initial_seed)
# set to and 20 for the real run.
# run just a few for each parameter combination.
sim_combos_n <- 10000
cores <- 20
# these are the parameter combinations
true_coefs = c(X1 = 1, X2 = -0.7, X3 = 0.5)
param_combos <- data.frame(n_clusters = 5000,
cluster_size = ceiling(runif(sim_combos_n, 2, 50)),
theta = runif(sim_combos_n, 0, 2),
n_clusters_in_sample = ceiling(runif(sim_combos_n, 9, 100)))
# need rows as list
param_combos_list <- split(param_combos, f = seq_len(nrow(param_combos)))
# define one rep
one_rep <- function(specs){
# generate a population, sample from it, calculate the things.
# generate population
k <- specs$n_clusters
nk <- specs$cluster_size
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=specs$theta)
)
pop <- dplyr::mutate(the_data, id = M)
# sample from it
# one cluster sample
samp_cluster_ids <- unique(pop$id)[sample.int(specs$n_clusters, specs$n_clusters_in_samp)]
my_samp <- pop[pop$id %in% samp_cluster_ids, ]
# for memory reasons
rm(list = c('pop', 'the_data'))
my_samp$prob <- (specs$n_clusters_in_samp/specs$n_clusters)
my_samp$weights <- my_samp$prob^-1
# rescale_weights
my_samp$rweights <- (1/my_samp$prob)/mean(1/my_samp$prob)
my_samp <- my_samp[order(my_samp$stat_time), ]
# the regular fit.
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|id), data = my_samp, weights = rweights)
# calculate ui and Hessian
parts <- make_parts(coxme_fit, my_samp, weights = my_samp$weights)
ui <- calc_ui(parts)
vv <- get_information(fit)
uivv <- score_mine %*% vv
# define design, add ui
my_des <- svydesign(~id, weights = ~weights, data = my_samp)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
my_des_bootstrap <- as.svrepdesign(my_des, type = "bootstrap")
my_des_subbootstrap <- as.svrepdesign(my_des, type = "subbootstrap")
svycoxme_fit_jackknife <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_jackknife)
svycoxme_fit_bootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_bootstrap)
svycoxme_fit_subbootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_subbootstrap)
# calculate sandwich variance
sandwich <- svyrecvar(uivv, my_des$cluster, my_des$strata, my_des$fpc, postStrata = my_des$postStrata)
sandwich2 <- vv + sandwich
list(
specs = specs,
sandwich_finite_pop  = diag(sandwich)[1:3],
sandwich_infinite_pop = diag(sandwich2)[1:3],
svycoxme_var_jackknife = diag(vcov(svycoxme_fit_jackknife)),
svycoxme_var_bootstrap = diag(vcov(svycoxme_fit_bootstrap)),
svycoxme_var_subbootstrap = diag(vcov(svycoxme_fit_subbootstrap)),
fisher_var = diag(vcov(coxme_fit)),
coefs = coef(svycoxme_fit_jackknife))
}
# see: https://stackoverflow.com/questions/4948361/how-do-i-save-warnings-and-errors-as-output-from-a-function
myTryCatch <- function(expr) {
warn <- err <- NULL
value <- withCallingHandlers(
tryCatch(expr, error=function(e) {
err <<- e
NULL
}), warning=function(w) {
warn <<- w
invokeRestart("muffleWarning")
})
#drop call from error
err$call <- NULL
list(value=value, warning=warn, error=err)
}
try_one_rep <- function(specs){
stream <- .Random.seed
r <- myTryCatch(one_rep(specs))
attr(r, "stream") <- stream
attr(r, "specs") <- specs
r
}
try_one_rep(specs = param_combos_list[[1]])
debugonce(one_rep)
try_one_rep(specs = param_combos_list[[1]])
debugonce(one_rep)
try_one_rep(specs = param_combos_list[[1]])
debugonce(one_rep)
try_one_rep(specs = param_combos_list[[1]])
dim(uivv)
my_des$cluster
dim(vv)
dim(ui)
my_des$postStrata
my_des$fpc
uivv <- ui %*% vv
ui <- calc_ui(parts)
vv <- get_information(coxme_fit)
uivv <- ui %*% vv
dim(vv)
dimui
dim(ui)
vv <- get_information(coxme_fit)
dim(vv)
dim(coxme_fit$variance)
debugonce(get_information)
vv <- get_information(coxme_fit)
bdsmatrix::as.matrix(fit$variance)
bdsmatrix:::as.matrix(fit$variance)
as.matrix.bdsmatrix(fit$variance)
bdsmatrix:::as.matrix.bdsmatrix(fit$variance)
inf1 <- bdsmatrix::as.matrix(coxme.object$variance)
class(coxme.object$variance)
inf1 <- as.matrix(coxme.object$variance)
devtools::load_all(".")
try_one_rep(specs = param_combos_list[[1]])
devtools::load_all(".")
debugonce(one_rep)
try_one_rep(specs = param_combos_list[[1]])
Q
# define one rep
one_rep <- function(specs){
# generate a population, sample from it, calculate the things.
# generate population
k <- specs$n_clusters
nk <- specs$cluster_size
the_data <- one_dataset(~X1 + X2 + X3 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=specs$theta)
)
pop <- dplyr::mutate(the_data, id = M)
# sample from it
# one cluster sample
samp_cluster_ids <- unique(pop$id)[sample.int(specs$n_clusters, specs$n_clusters_in_samp)]
my_samp <- pop[pop$id %in% samp_cluster_ids, ]
# for memory reasons
rm(list = c('pop', 'the_data'))
my_samp$prob <- (specs$n_clusters_in_samp/specs$n_clusters)
my_samp$weights <- my_samp$prob^-1
# rescale_weights
my_samp$rweights <- (1/my_samp$prob)/mean(1/my_samp$prob)
my_samp <- my_samp[order(my_samp$stat_time), ]
# the regular fit.
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + (1|id), data = my_samp, weights = rweights)
# calculate ui and get information
parts <- make_parts(coxme_fit, my_samp, weights = my_samp$weights)
ui <- calc_ui(parts)
vv <- get_information(coxme_fit)
uivv <- ui %*% vv
# define design, add ui
my_des <- svydesign(~id, weights = ~weights, data = my_samp)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
my_des_bootstrap <- as.svrepdesign(my_des, type = "bootstrap")
my_des_subbootstrap <- as.svrepdesign(my_des, type = "subbootstrap")
svycoxme_fit_jackknife <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_jackknife)
svycoxme_fit_bootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_bootstrap)
svycoxme_fit_subbootstrap <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_subbootstrap)
# calculate sandwich variance
sandwich <- svyrecvar(uivv, my_des$cluster, my_des$strata, my_des$fpc, postStrata = my_des$postStrata)
sandwich2 <- vv + sandwich
list(
specs = specs,
sandwich_finite_pop  = diag(sandwich)[1:3],
sandwich_infinite_pop = diag(sandwich2)[1:3],
svycoxme_var_jackknife = diag(vcov(svycoxme_fit_jackknife)),
svycoxme_var_bootstrap = diag(vcov(svycoxme_fit_bootstrap)),
svycoxme_var_subbootstrap = diag(vcov(svycoxme_fit_subbootstrap)),
fisher_var = diag(vcov(coxme_fit)),
coefs = coef(svycoxme_fit_jackknife))
}
try_one_rep(specs = param_combos_list[[1]])
results_path <- file.path(Sys.getenv("OneDriveCommercial"), "PhD/outputs/simulations/data/variances_7.rds")
res <- readr::read_rds(results_path)
error_messages <- lapply(res, "[[", "error")
warning_messages <- lapply(res, "[[", "warning")
returned_values <- lapply(res, "[[", "value")
is.error <- sapply(error_messages, inherits, "error")
is.warning <- sapply(warning_messages, inherits, "warning")
table(is.error) |> prop.table()
table(is.warning)
results_with_warnings <- res[is.warning]
non_error_fits <- returned_values[!is.error]
shape_res <- function(one_fit){
covars <- names(one_fit$coefs)
v1 <- one_fit$sandwich_finite_pop
v2 <- one_fit$sandwich_infinite_pop
v3 <- one_fit$svycoxme_var_jackknife
v4 <- one_fit$svycoxme_var_bootstrap
v5 <- one_fit$svycoxme_var_subbootstrap
v6 <- one_fit$fisher_var
tibble::tibble(
method = rep(c("sandwich_finite_pop", "sandwich_inf_pop", "cluster_jackknife", "bootstrap", "subbootstrap", "fisher_info"), each = 3),
n_clusters_in_sample = one_fit$specs$n_clusters_in_sample,
cluster_size = one_fit$specs$cluster_size,
theta = one_fit$specs$theta,
covariate = rep(covars, 6),
coefs = rep(one_fit$coefs, 6),
true_coefs = rep(c(1, -0.7, 0.5), 6),
variance = c(v1, v2, v3, v4, v5, v6),
lower = one_fit$coefs + qnorm(0.025) * sqrt(c(v1, v2, v3, v4, v5, v6)),
upper = one_fit$coefs + qnorm(0.975) * sqrt(c(v1, v2, v3, v4, v5, v6)),
hit = lower < true_coefs & upper > true_coefs
)
}
shape_res(non_error_fits[[1]])
df <- plyr::ldply(non_error_fits, shape_res)
head(df)
names(df)
library(tidyverse)
df %>% pull(theta) %>% summary()
coverage_summary <- df %>%
group_by(method, covariate) %>%
mutate(theta_binned = cut(theta, breaks = seq(0, 2, by = 0.1),
labels = seq(0.05, 1.95, by = 0.1)) |>
as.character() |> as.numeric()) %>%
group_by(theta_binned, .add = TRUE) %>%
summarise(coverage = mean(hit, na.rm = TRUE),
prop_nas = sum(is.na(hit))/n(),
.groups = "drop")
coverage_summary %>%
ggplot(aes(theta_binned, coverage, colour = method)) +
geom_line() + facet_grid(rows = vars(covariate)) +
geom_hline(yintercept = 0.95)
coverage_summary %>%
ggplot(aes(theta_binned, prop_nas, colour = method)) +
geom_line() + facet_grid(rows = vars(covariate))
coverage_summary %>%
filter(covariate == "X1") %>%
ggplot(aes(theta_binned, coverage, colour = method)) +
geom_line() +
geom_hline(yintercept = 0.95)
devtools::load_all(".")
Sys.getenv("OneDriveCommercial")
data_dir1 <- file.path(Sys.getenv("OneDriveCommercial"), "\PhD\outputs\scratchpads and notes\score test")
data_dir1 <- file.path(Sys.getenv("OneDriveCommercial"), "PhD/outputs/scratchpads and notes/score test")
data_dir1
pop <- read.csv(file.path(data_dir1, "mydataPopulation.csv"))
my_sample <- read.csv(file.path(data_dir1, "mydataSample.csv"))
my_sample_score <- read.csv(file.path(data_dir1, "Score_Sample.csv"))
names(my_sample)
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1), data = my_sample)
library(survival)
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1), data = my_sample)
parts <- make_parts(fit)
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1), data = my_sample)
parts <- make_parts(fit)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
my_sample$weights
debug(make_parts)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
debug(make_parts)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
devtools::load_all(".")
debugonce(make_parts.coxme)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
debugonce(make_parts.coxme)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
parsed_data$X |> head()
dim(X)
dim(exp_risk_score)
exp_risk_score * X
devtools::load_all(".")
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
brad_score <- calc_ui(parts)
dim(brad_score)
unique(my_sample$idK1)
unique(my_sample$idK1) |> length()
View(my_sample)
my_sample_score |> head()
head(brad_score)
brad_score[1:6, 1:3]
my_sample_score |> head()
brad_score[1:6, 1:3]
my_sample <- my_sample[order(my_sample$timeb, my_sample$timea), ]
fit <- coxme::coxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1), data = my_sample)
parts <- make_parts(fit, data = my_sample, weights = my_sample$weights)
brad_score <- calc_ui(parts)
my_sample_score |> head()
brad_score[1:6, 1:3]
colSums(brad_score)
colSums(my_sample_score)
vv <- get_information(fit)
uivv <- ui %*% vv
uivv <- brad_score %*% vv
# define design, add ui
my_des <- svydesign(~id, weights = ~weights, data = my_samp)
# define design, add ui
my_des <- svydesign(~id, weights = ~weights, data = my_sample)
# define design, add ui
my_des <- svydesign(~idK1, weights = ~weights, data = my_sample)
sandwich <- svyrecvar(uivv, my_des$cluster, my_des$strata, my_des$fpc, postStrata = my_des$postStrata)
sandwich
diag(sandwich)
my_des_jackknife <- as.svrepdesign(my_des, type = "JK1")
svycoxme_fit_jackknife <- svycoxme(survival::Surv(stat_time, stat) ~ X1 + X2 + X3 + (1 | id), des = my_des_jackknife)
svycoxme_fit_jackknife <- svycoxme(Surv(timea, timeb ,  di) ~  X2 +Z2+Z1 + (1|idK1), des = my_des_jackknife)
svycoxme_fit_jackknife$var
diag(svycoxme_fit_jackknife$var)
diag(sandwich)[1:3]
diag(vv + sandwich)[1:3]
sum(weights(my_des))
vv
diag(vv)
diag(svycoxme_fit_jackknife$var)
diag(sandwich)[1:3]
diag(vv + sandwich)[1:3]
diag(vv)[1:3]
plot(my_sample_score$U1, brad_score[,1])
