for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = resid(i, k) + temp * (Z(i, l) - S1_Z(j, l)/S0[j]);
}
}
}
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = stat[i] * (Z(i, l) - S1_Z(i, l)/S0[i]) - resid(i, k);
//-ui_penalty(i, k)/(weighted * weights[i] + !weighted);
//resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
Rcpp::NumericMatrix& S1_Z,
Rcpp::NumericMatrix& Z,
Rcpp::NumericMatrix& weights,
int weighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
int Z_ncol = Z.ncol();
int ncol = X_ncol + Z_ncol;
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, ncol);
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) = resid(i, k) + temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = resid(i, k) + temp * (Z(i, l) - S1_Z(j, l)/S0[j]);
}
}
}
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = stat[i] * (Z(i, l) - S1_Z(i, l)/S0[i]) - resid(i, k);
//-ui_penalty(i, k)/(weighted * weights[i] + !weighted);
//resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
Rcpp::NumericMatrix& S1_Z,
Rcpp::NumericMatrix& Z,
Rcpp::NumericMatrix& weights,
int xweighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
int Z_ncol = Z.ncol();
int ncol = X_ncol + Z_ncol;
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, ncol);
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) = resid(i, k) + temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = resid(i, k) + temp * (Z(i, l) - S1_Z(j, l)/S0[j]);
}
}
}
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = stat[i] * (Z(i, l) - S1_Z(i, l)/S0[i]) - resid(i, k);
//-ui_penalty(i, k)/(weighted * weights[i] + !weighted);
//resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
Rcpp::NumericMatrix& S1_Z,
Rcpp::NumericMatrix& Z,
bool weighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
int Z_ncol = Z.ncol();
int ncol = X_ncol + Z_ncol;
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, ncol);
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) = resid(i, k) + temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = resid(i, k) + temp * (Z(i, l) - S1_Z(j, l)/S0[j]);
}
}
}
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = stat[i] * (Z(i, l) - S1_Z(i, l)/S0[i]) - resid(i, k);
//-ui_penalty(i, k)/(weighted * weights[i] + !weighted);
//resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
ui2 <- C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
Z              = matrix_parts$Z,
S1_Z           = matrix_parts$S1_Z,
weighted = TRUE)
head(ui[,1:10])
ui <- calc_ui(parts)
head(ui2[,1:10])
head(ui[,1:10])
head(ui2[,1:10])
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
Rcpp::NumericMatrix& S1_Z,
Rcpp::NumericMatrix& Z,
bool weighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
int Z_ncol = Z.ncol();
int ncol = X_ncol + Z_ncol;
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, ncol);
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) = resid(i, k) + temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = resid(i, k) + temp * (Z(i, l) - S1_Z(j, l)/S0[j]);
}
}
}
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = stat[i] * (Z(i, l) - S1_Z(i, l)/S0[i]) - resid(i, k) - ui_penalty(i, l)/(weighted * weights[i] + !weighted);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
Rcpp::NumericMatrix& S1_Z,
Rcpp::NumericMatrix& Z,
Rcpp::NumericMatrix& ui_penalty,
bool weighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
int Z_ncol = Z.ncol();
int ncol = X_ncol + Z_ncol;
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, ncol);
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) = resid(i, k) + temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = resid(i, k) + temp * (Z(i, l) - S1_Z(j, l)/S0[j]);
}
}
}
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
for(int k = X_ncol, l = 0; k < ncol; k++, l++){
resid(i, k) = stat[i] * (Z(i, l) - S1_Z(i, l)/S0[i]) - resid(i, k) - ui_penalty(i, l)/(weighted * weights[i] + !weighted);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
ui2 <- C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
Z              = matrix_parts$Z,
S1_Z           = matrix_parts$S1_Z,
ui_penalty     = matrix_parts$ui_penalty,
weighted = TRUE)
all.equal(ui, ui2)
all.equal(as.matrix(ui), ui2)
all.equal(as.matrix(ui), ui2, include.attributes = FALSE)
all.equal(as.matrix(ui), ui2, check.attributes = FALSE)
microbenchmark::microbenchmark(
calc_ui(parts),
ui2 <- C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
Z              = matrix_parts$Z,
S1_Z           = matrix_parts$S1_Z,
ui_penalty     = matrix_parts$ui_penalty,
weighted = TRUE),
times = 1
)
14495/405
# generate population
k <- 5000
nk <- 10
specs = list(theta = 1)
true_coefs = c(X1 = 1, X2 = 2, X3 = -1.5, Z1 = 0.5)
the_data <- one_dataset(~X1 + X2 + X3 + Z1 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
Z1 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=specs$theta)
)
pop <- dplyr::mutate(the_data, id = M)
# sample from it
# one cluster sample
pop_clusters <- dplyr::distinct(pop, id, Z1) %>%
dplyr::mutate(pr_sel = 2/75 * (1 + Z1))
sample_of_cluster = dplyr::slice_sample(pop_clusters, n = 200, weight_by = pr_sel)
my_samp <- pop[pop$id %in% sample_of_cluster$id, ]
my_samp <- dplyr::left_join(my_samp, pop_clusters, by = c("Z1", "id"))
my_samp$weights <- my_samp$pr_sel^-1
my_samp$rweights <- (1/my_samp$pr_sel)/mean(1/my_samp$pr_sel)
my_samp <- my_samp[order(my_samp$stat_time), ]
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + Z1 + (1|id),
data = my_samp, weights = rweights)
parts <- make_parts(coxme_fit, my_samp)
matrix_parts <- lapply(parts, as.matrix)
microbenchmark::microbenchmark(
calc_ui(parts),
ui2 <- C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
Z              = matrix_parts$Z,
S1_Z           = matrix_parts$S1_Z,
ui_penalty     = matrix_parts$ui_penalty,
weighted = TRUE),
times = 1
)
57/3
# does it work with pop?
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + Z1 + (1|id),
data = pop)
parts <- make_parts(coxme_fit, pop)
# generate population
k <- 2000
nk <- 10
specs = list(theta = 1)
true_coefs = c(X1 = 1, X2 = 2, X3 = -1.5, Z1 = 0.5)
the_data <- one_dataset(~X1 + X2 + X3 + Z1 + (1 | M),
dists = list(X1 = ~rnorm(n),
X2 = ~rep(rnorm(k), each = nk),
X3 = ~rep(rbinom(k, 1, 0.5), each = nk),
Z1 = ~rep(rbinom(k, 1, 0.5), each = nk),
M = ~rep(1:k, each = nk)),
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n),
dist_args = list(k = k, nk = nk,
n = k * nk),
coefficients = true_coefs,
random_effect_variance = c(M=specs$theta)
)
pop <- dplyr::mutate(the_data, id = M)
pop <- dplyr::mutate(the_data, id = M)
# does it work with pop?
coxme_fit <- coxme::coxme(survival::Surv(stat_time, stat)~ X1 + X2 + X3 + Z1 + (1|id),
data = pop)
parts <- make_parts(coxme_fit, pop)
rm pop
rm(pop)
rm(pop_clusters)
rm(ui)
rm(ui2)
rm(the_data)
matrix_parts <- lapply(parts, as.matrix)
ui2 <- C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
Z              = matrix_parts$Z,
S1_Z           = matrix_parts$S1_Z,
ui_penalty     = matrix_parts$ui_penalty,
weighted = TRUE)
dim(ui2)
prod(dim(ui2))
save.image(file = "C:/Users/Bradley/OneDrive - The University of Auckland/PhD/outputs/scratchpads and notes/score test/big_ui2_matrix.RData")
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
bool weighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, X_ncol);
\\ calculate the second term
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) += temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
}
}
\\ calculate the first term, minus the second term, and weight if needed.
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
cppFunction(
'Rcpp::NumericMatrix C_calc_ui(Rcpp::NumericMatrix& time_start,
Rcpp::NumericMatrix& time_stop,
Rcpp::NumericMatrix& stat,
Rcpp::NumericMatrix& weights,
Rcpp::NumericMatrix& exp_risk_score,
Rcpp::NumericMatrix& S0,
Rcpp::NumericMatrix& S1_X,
Rcpp::NumericMatrix& X,
bool weighted) {
int nrow = X.nrow();
int X_ncol = X.ncol();
bool Yi_at_tj;
double temp;
Rcpp::NumericMatrix resid(nrow, X_ncol);
// calculate the second term
for(int i = 0; i < nrow; i++){
for(int j = 0; j < nrow; j++){
Yi_at_tj =  ((time_start[i] < time_stop[j]) & (time_stop[i] >= time_stop[j]));
temp = stat[j] * weights[j] * Yi_at_tj * exp_risk_score[i] * (1/S0[j]);
for(int k = 0; k < X_ncol; k++){
resid(i, k) += temp * (X(i, k) - S1_X(j, k)/S0[j]);
}
}
}
// calculate the first term, minus the second term, and weight if needed.
for(int i = 0; i < nrow; i++){
for(int k = 0; k < X_ncol; k++){
resid(i, k) = stat[i] * (X(i, k) - S1_X(i, k)/S0[i]) - resid(i, k);
resid(i, k) = resid(i, k) * (weighted * weights[i] + !weighted);
}
}
return resid;
}')
15*60
15*60/600
ui <- C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
weighted = TRUE)
microbenchmark::microbenchmark(
C_calc_ui(time_start     = matrix_parts$time_start,
time_stop      = matrix_parts$time_stop,
stat           = matrix_parts$stat,
weights        = matrix_parts$weights,
exp_risk_score = matrix_parts$exp_risk_score,
S0             = matrix_parts$S0,
X              = matrix_parts$X,
S1_X           = matrix_parts$S1_X,
weighted = TRUE),
times = 10
)
compileAttributes()
devtools::load_all(".")
devtools::load_all(".")
rcpp_hello_world()
devtools::load_all(".")
rcpp_hello_world()
svycoxme:::rcpp_hello_world()
svycoxme:::rcpp_hello_world()
devtools::load_all(".")
svycoxme:::rcpp_hello_world()
svycoxme:::rcpp_hello_world()
svycoxme:::rcpp_hello_world()
devtools::load_all(".")
svycoxme:::rcpp_hello_world()
devtools::load_all(".")
Rcpp::compileAttributes()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("devtools", dependencies = TRUE)
devtools::load_all(".")
rcpp_hello_world()
svycoxme:::rcpp_hello_world()
svycoxme:::rcpp_hello_world()
devtools::load_all(".")
devtools::document()
svycoxme:::rcpp_hello_world()
svycoxme:::rcpp_hello_world()
rcpp_hello_world()
devtools::load_all(".")
rcpp_hello_world()
