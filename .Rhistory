z
unique(z)
factor(z, levels = unique(z))
table(factor(z, levels = unique(z)))
str(table(factor(z, levels = unique(z))))
group_counts <- table(factor(ds["M1"], levels = unique(ds["M1"])))
group_counts
ds["M1"]
unique(ds["M1"])
factor(ds["M1"], levels = unique(ds["M1"]))
unique(z)
ds["M1"]
unique(ds[ ,"M1", drop = TRUE])
group_counts <- table(factor(ds["M1"], levels = unique(ds[ ,"M1", drop = TRUE])))
group_counts
re_data <- ds[ ,"M1", drop = TRUE]
re_data
group_counts <- table(factor(re_data, levels = unique(re_data)))
group_counts
length(group_counts)
b <-  rnorm(length(group_counts), mean = 0, sd = sqrt(1))
b_rep <- rep(b, group_counts)
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
vars_df
lapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
group_counts <- table(factor(re_data, levels = unique(re_data)))
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- rep(b, group_counts)
b_rep
})
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)]),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2))
ds
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
vars_df
lp_random_effects <- lapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
group_counts <- table(factor(re_data, levels = unique(re_data)))
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- rep(b, group_counts)
b_rep
})
lp_random_effects
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)]),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2))
ds
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
#
# lp_random_effects <- lapply(random_term_labels, function(re){
#
#   re_data <- vars_df[, re, drop = TRUE]
#
#   group_counts <- table(factor(re_data, levels = unique(re_data)))
#
#   b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
#
#   b_rep <- rep(b, group_counts)
#
#   b_rep
#
# })
#
# coefficients
#
#
# lp_random_effects
vars_df
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)]),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
vars_df[, c("X1", "X2", "X")]
ds[, c("X1", "X2", "X")]
ds[, c("X1", "X2", "X3")]
ds[, c("X1", "X2", "X3")] %*% c(1, -0.7, 0.5)
as.matrix(ds[, c("X1", "X2", "X3")]) %*% c(1, -0.7, 0.5)
microbenchmark::microbenchmark(
as.matrix(ds[, c("X1", "X2", "X3")]) %*% c(1, -0.7, 0.5)
)
fe <- c(1, -0.7, 0.5)
lapply(seq_along(ds[, c("X1", "X2", "X3")]), function(column){
ds[column] * fe[column]
})
lapply(seq_along(ds[, c("X1", "X2", "X3")]), function(column){
ds[column] * fe[column]
}) |> data.frame()
lapply(seq_along(ds[, c("X1", "X2", "X3")]), function(column){
ds[column] * fe[column]
}) |> data.frame() |> rowSums()
microbenchmark::microbenchmark(
lapply(seq_along(ds[, c("X1", "X2", "X3")]), function(column){
ds[column] * fe[column]
}) |> data.frame() |> rowSums()
)
microbenchmark::microbenchmark(
lapply(seq_along(ds[, c("X1", "X2", "X3")]), function(column){
ds[column] * fe[column]
}) |> data.frame() |> rowSums()
)
microbenchmark::microbenchmark(
as.matrix(ds[, c("X1", "X2", "X3")]) %*% c(1, -0.7, 0.5)
)
ds
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
lp_random_effects <- sapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
group_counts <- table(factor(re_data, levels = unique(re_data)))
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- rep(b, group_counts)
b_rep
}, simplify = "matrix")
lp_random_effects
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)]),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
c(b1 = 0.5, b2 = 0.8)
c(b1 = 0.5, b2 = 0.8)
c("b1", "b2", 'b1', "b2")
re_M2 <- c(b1 = 0.5, b2 = 0.8)
M2 <- c("b1", "b2", 'b1', "b2")
left_join
left.join
data.frame(re_name = names(re_M2), re = re_M2)
merge(data.frame(re_name = names(re_M2), re = re_M2),
data.frame(re_name = M2))
microbenchmark::microbenchmark(
merge(data.frame(re_name = names(re_M2), re = re_M2),
data.frame(re_name = M2))
)
microbenchmark::microbenchmark(
left_join(data.frame(re_name = M2),
data.frame(re_name = names(re_M2), re = re_M2))
)
microbenchmark::microbenchmark(
dplyr::left_join(data.frame(re_name = M2),
data.frame(re_name = names(re_M2), re = re_M2))
)
microbenchmark::microbenchmark(
dplyr::left_join(data.frame(re_name = M2),
data.frame(re_name = names(re_M2), re = re_M2, by = "re_name"))
)
microbenchmark::microbenchmark(
dplyr::left_join(data.frame(re_name = M2),
data.frame(re_name = names(re_M2), re = re_M2), by = "re_name")
)
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
lp_random_effects <- sapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
group_counts <- table(factor(re_data, levels = unique(re_data)))
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- dplyr::left_join(re_data,
data.frame(re_name = names(group_counts), re = b), by = re)
b_rep$re
}, simplify = "matrix")
lp_random_effects
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)]),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
lp_random_effects <- sapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
re_factor <- factor(re_data, levels = unique(re_data))
group_counts <- table(re_factor)
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- dplyr::left_join(data.frame(re_name = re_factor),
data.frame(re_name = names(group_counts), re = b), by = "re_name")
b_rep$re
}, simplify = "matrix")
lp_random_effects
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)]),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
lp_random_effects <- sapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
re_factor <- factor(re_data, levels = unique(re_data))
group_counts <- table(re_factor)
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- dplyr::left_join(data.frame(re_name = re_factor),
data.frame(re_name = names(group_counts), re = b), by = "re_name")
b_rep$re
}, simplify = "matrix")
risk_score <- as.matrix(vars_df[, fixed_term_labels]) %*% coefficients + lp_random_effects
error <- lazyeval::f_eval(dists$error, data = dist_args)
vars_df$stat_time <- exp(-risk_score) * error
vars_df$stat <- lazyeval::f_eval(dists$error, data = dist_args)
vars_df
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
debugonce(one_dataset)
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
as.matrix(vars_df[, fixed_term_labels]) %*% coefficients
lp_random_effects
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
lp_random_effects <- sapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
re_factor <- factor(re_data, levels = unique(re_data))
group_counts <- table(re_factor)
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- dplyr::left_join(data.frame(re_name = re_factor),
data.frame(re_name = names(group_counts), re = b), by = "re_name")
b_rep$re
}, simplify = "matrix")
risk_score <- .rowSums(cbind(as.matrix(vars_df[, fixed_term_labels]) %*% coefficients, lp_random_effects))
error <- lazyeval::f_eval(dists$error, data = dist_args)
vars_df$stat_time <- exp(-risk_score) * error
vars_df$stat <- lazyeval::f_eval(dists$error, data = dist_args)
vars_df
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
debugonce(one_dataset)
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
cbind(as.matrix(vars_df[, fixed_term_labels]) %*% coefficients, lp_random_effects)
dim(cbind(as.matrix(vars_df[, fixed_term_labels]) %*% coefficients, lp_random_effects))
one_dataset <- function(formula, dists, dist_args, coefficients, random_effects_variance, seed = NULL){
if(!is.null(seed)) set.seed(seed)
flist <- coxme:::formula1(formula)
fixed_terms <- stats::terms(flist$fixed)
fixed_term_labels <- get_term.labels(fixed_terms)
random_term_labels <- sapply(flist$random, get_group_label)
names(random_term_labels) <- random_term_labels
term_labels <- c(fixed_term_labels, random_term_labels)
check_var_labels(term_labels, names(dists))
vars <- lapply(dists[term_labels], lazyeval::f_eval, data = dist_args)
vars_df <- data.frame(vars)
lp_random_effects <- sapply(random_term_labels, function(re){
re_data <- vars_df[, re, drop = TRUE]
re_factor <- factor(re_data, levels = unique(re_data))
group_counts <- table(re_factor)
b <- rnorm(length(group_counts), mean = 0, sd = sqrt(random_effects_variance[[re]]))
b_rep <- dplyr::left_join(data.frame(re_name = re_factor),
data.frame(re_name = names(group_counts), re = b), by = "re_name")
b_rep$re
}, simplify = "matrix")
risk_score <- .rowSums(cbind(as.matrix(vars_df[, fixed_term_labels]) %*% coefficients, lp_random_effects),
m = nrow(lp_random_effects), n = ncol(lp_random_effects) + 1)
error <- lazyeval::f_eval(dists$error, data = dist_args)
vars_df$stat_time <- exp(-risk_score) * error
vars_df$stat <- lazyeval::f_eval(dists$error, data = dist_args)
vars_df
}
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
debugonce(one_dataset)
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
head(rowSums(cbind(as.matrix(vars_df[, fixed_term_labels]) %*% coefficients, lp_random_effects)))
head(risk_score)
ds <- one_dataset(formula = y ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
ds <- one_dataset(formula = survival::Surv(stat_time, time) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 10, nk = 10, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
ds <- one_dataset(formula = survival::Surv(stat_time, time) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 9, nk = 7, n = 100),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds <- one_dataset(formula = survival::Surv(stat_time, time) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 9, nk = 7, n = 9*7),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds <- one_dataset(formula = survival::Surv(stat_time, time) ~ X1 + X2 + X3 + (1 | M1) + (1 | M2),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
ds <- one_dataset(formula = survival::Surv(stat_time, time) ~ X1 + X2 + X3 + (1 | M1),
dists = list(X1 = ~rnorm(n, 0, 1),
X2 = ~rep(rnorm(k, 0, 1), each = nk),
X3 = ~rep(rep(c(1, 0), ceiling(k/2))[seq_len(k)], each = nk),
M1 = ~rep(1:k, each = nk),
M2 = ~rep(c("l", "r"), ceiling(n/2))[seq_len(n)],
error = ~rexp(n, 10),
stat = ~sample(rep(c(0, 1), round(n * c(0.2, 0.8))), n)),
dist_args = list(k = 50, nk = 4, n = 50*4),
random_effects_variance = list(M1 = 1, M2 = 2),
coefficients = c(1, -0.7, 0.5))
ds
