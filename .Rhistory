solve(K_ppl)
sum(diag(solve(K_ppl)))
b %*% b
b %*% b + sum(diag(solve(K_ppl)))
(b %*% b + sum(diag(solve(K_ppl))))/length(b)
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))
my_beta = c(1, -0.7, 0.5)
my_theta = 2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))
(b %*% b + sum(diag(solve(K_ppl))))/length(b)
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par
(b %*% b + sum(diag(solve(K_ppl))))/length(b)
c((b %*% b + sum(diag(solve(K_ppl))))/length(b))
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
sapply(1:10, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
})
res <- lapply(1:10, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
})
Reduce(dplyr::bind_rows, res)
Reduce(rbind, res)
df <- Reduce(rbind, res)
str(df)
as.data.frame(df, col.names = c("optim", "fun"))
df <- Reduce(rbind, res) |> as.data.frame()
names(df = c("optim", "fun"))
names(df) = c("optim", "fun")
df
df <- Reduce(rbind, res) |> as.data.frame(row.names = NULL)
names(df) = c("optim", "fun")
df
df <- Reduce(rbind, res) |> as.data.frame(row.names = "")
df
names(df) = c("optim", "fun")
df
res <- lapply(1:100, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
})
df <- Reduce(rbind, res) |> as.data.frame(row.names = "")
names(df) = c("optim", "fun")
library(ggplot2)
df %>%
tidry::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value, colour = name)) + geom_boxplot()
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value, colour = name)) + geom_boxplot()
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value - my_theta, colour = name)) + geom_boxplot()
my_beta = c(1, -0.7, 0.5)
my_theta = 2
my_k = 50
my_nk = 10
my_X = c("X1", "X2", "X3")
res <- lapply(1:100, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
})
df <- Reduce(rbind, res) |> as.data.frame(row.names = "")
names(df) = c("optim", "fun")
library(ggplot2)
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value, colour = name)) + geom_boxplot()
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value - my_theta, colour = name)) + geom_boxplot()
my_beta = c(1, -0.7, 0.5)
my_theta = 2
my_k = 50
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
c(
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_hessian[4:13, 4:13],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
my_hessian[-my_X, -my_X]
-my_X
my_X
rownames(my_hessian) %in% my_X
rownames(my_hessian) %in% my_X
!rownames(my_hessian) %in% my_X
my_hessian[!rownames(my_hessian) %in% my_X, !colnames(my_hessian) %in% my_X]
res <- lapply(1:100, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_hessian[!rownames(my_hessian) %in% my_X, !colnames(my_hessian) %in% my_X],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
})
df <- Reduce(rbind, res) |> as.data.frame(row.names = "")
names(df) = c("optim", "fun")
library(ggplot2)
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value, colour = name)) + geom_boxplot()
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value - my_theta, colour = name)) + geom_boxplot()
t(b) %*% inv_D %*% I %*% inv_D %*% b
t(b)
I <- diag(length(b))
D <- theta * I
D <- my_theta * I
inv_D <- solve(D)
t(b) %*% inv_D %*% I %*% inv_D %*% b
b %*% inv_D %*% I %*% inv_D %*% t(b)
b %*% inv_D %*% I %*% inv_D
t(b)
t(b) %*% inv_D %*% I %*% inv_D %*% b
t(b) %*% inv_D %*% inv_D %*% b
t(b) %*% inv_D %*% inv_D %*% b
devtools::load_all(".")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
debugonce
debugonce(bb)
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
debugonce(bb)
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
devtools::load_all(".")
bb(parms = my_params, X = my_X, t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta)
my_beta = c(1, -0.7, 0.5)
my_theta = 0.2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
bb(parms = my_params, X = my_X, t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta)
bb(parms = my_params, X = my_X, t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta, return_matrix = TRUE)
debugonce(bb)
bb(parms = my_params, X = my_X, t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta, return_matrix = TRUE)
ll %>% tidyr::pivot_wider(names_from = "Zs")
ll
ll %>% tidyr::pivot_wider(names_from = "Zs", values_from = "ll")
ll %>% tidyr::pivot_wider(names_from = "Zs", values_from = "ll") %>%
tibble::column_to_rownames("Zr")
ll %>% tidyr::pivot_wider(names_from = "Zs", values_from = "ll") %>%
tibble::column_to_rownames("Zr") %>%
as.matrix()
devtools::load_all(".")
bb(parms = my_params, X = my_X, t = t, cluster = "M", dij = stat,
data = sample_data, theta = my_theta, return_matrix = TRUE)
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
max_iter = 10
convergence_threshold = 0.000001
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = t,
cluster = "M",
dij = stat,
data = sample_data)
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)))
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
estimate_history
current_estimates$new_theta
devtools::load_all(".")
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
max_iter = 10
convergence_threshold = 0.000001
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = t,
cluster = "M",
dij = stat,
data = sample_data)
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)))
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
tail(estimate_history, 1)
estimate_history
lapply(estimate_history, "[[", "new_theta")
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
theta_ests <- sapply(estimate_history, "[[", "new_params")
parm_ests <- sapply(estimate_history, "[[", "new_params")
parm_ests
parm_ests <- sapply(estimate_history, "[[", "new_parms")
parm_ests
parm_ests %>%
tibble::rownames_to_column()
parm_ests %>%
as.data.frame()
parm_ests %>%
as.data.frame() %>%
tibble::rownames_to_column()
parm_ests %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
tidyr::pivot_longer(cols = dplyr::starts_with("V"))
parm_ests %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
tidyr::pivot_longer(cols = dplyr::starts_with("V")) %>%
filter(grepl("X", rowname))
parm_ests %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
tidyr::pivot_longer(cols = dplyr::starts_with("V")) %>%
dplyr::filter(grepl("X", rowname))
parm_ests %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
tidyr::pivot_longer(cols = dplyr::starts_with("V")) %>%
dplyr::filter(grepl("X", rowname)) %>%
ggplot(aes(name, value)) + geom_point() + facet_grid(rows = vars(rowname))
parm_ests %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
tidyr::pivot_longer(cols = dplyr::starts_with("V")) %>%
dplyr::filter(grepl("X", rowname)) %>%
ggplot(aes(name, value)) + geom_point() + facet_grid(rows = vars(rowname), scales = "free")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 2
my_k = 50
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_hessian[!rownames(my_hessian) %in% my_X, !colnames(my_hessian) %in% my_X],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_hessian[!rownames(my_hessian) %in% my_X, !colnames(my_hessian) %in% my_X],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_hessian[!rownames(my_hessian) %in% my_X, !colnames(my_hessian) %in% my_X],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par
est_theta2
my_params
est_theta2(1, b, bb(my_params, X = my_X, t = {{ t }}, cluster = "M", dij = {{ dij }}, data = sample_data, theta = 1, return_matrix = TRUE))
bb(my_params, X = my_X, t = {{ t }}, cluster = "M", dij = {{ dij }}, data = sample_data, theta = 1, return_matrix = TRUE)
bb(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
bb(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta, return_matrix = TRUE)
my_K_ppl <- bb(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta, return_matrix = TRUE)
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))
est_theta2(par = 2, b = b, K_ppl = my_K_ppl)
est_theta2(par = 1, b = b, K_ppl = my_K_ppl)
thetas_to_try <- seq(from = 0.01, to = 10, by = 1)
sapply(thetas_to_try, est_theta2, b = b, K_ppl = my_K_ppl)
ll <- sapply(thetas_to_try, est_theta2, b = b, K_ppl = my_K_ppl)
plot(thetas_to_try, ll)
thetas_to_try <- seq(from = 1, to = 10, by = 1)
ll <- sapply(thetas_to_try, est_theta2, b = b, K_ppl = my_K_ppl)
plot(thetas_to_try, ll)
thetas_to_try <- seq(from = 3, to = 100, by = 1)
ll <- sapply(thetas_to_try, est_theta2, b = b, K_ppl = my_K_ppl)
plot(thetas_to_try, ll)
b
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
devtools::load_all(".")
optim(par = 0.2, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
optim(par = 1, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
est_theta2 <- function(par, b, K_ppl){
theta = par
I <- diag(length(b))
D <- theta * I
inv_D <- solve(D)
-0.5 * (sum(diag(inv_D)) + sum(diag(solve(K_ppl) %*% D_inv %*% D_inv  )) - t(b) %*% inv_D %*% inv_D %*% b)
}
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
est_theta2 <- function(par, b, K_ppl){
theta = par
I <- diag(length(b))
D <- theta * I
inv_D <- solve(D)
-0.5 * (sum(diag(inv_D)) + sum(diag(solve(K_ppl) %*% inv_D %*% inv_D  )) - t(b) %*% inv_D %*% inv_D %*% b)
}
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
est_theta2(0.2, b = b, K_ppl = my_K_ppl)
svycoxme::est_theta2(0.2, b = b, K_ppl = my_K_ppl)
est_theta2 <- function(par, b, K_ppl){
theta = par
I <- diag(length(b))
D <- theta * I
inv_D <- solve(D)
c(-0.5 * (sum(diag(inv_D)) + sum(diag(solve(K_ppl) %*% inv_D %*% inv_D  )) - t(b) %*% inv_D %*% inv_D %*% b))
}
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.01, upper = 100, control = list(fnscale = -1))
devtools::load_all(".")
rm("est_theta2")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 2
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
my_K_ppl <- bb(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta, return_matrix = TRUE)
thetas_to_try <- seq(from = 3, to = 100, by = 1)
ll <- sapply(thetas_to_try, est_theta2, b = b, K_ppl = my_K_ppl)
plot(thetas_to_try, ll)
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.1, upper = 100, control = list(fnscale = -1))
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.1, upper = 50, control = list(fnscale = -1))
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.1, upper = 50)
optim(par = 10, fn = est_theta2, b = b, K_ppl = my_K_ppl,
method = "Brent", lower = 0.1, upper = 50)
my_beta = c(1, -0.7, 0.5)
my_theta = 2
my_k = 50
my_nk = 10
my_X = c("X1", "X2", "X3")
res <- lapply(1:10, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_hessian <- ppl_hessian(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_hessian[!rownames(my_hessian) %in% my_X, !colnames(my_hessian) %in% my_X],
method = "Brent", lower = 0, upper = 100, control = list(fnscale = -1))$par,
(b %*% b + sum(diag(solve(K_ppl))))/length(b))
})
res <- lapply(1:10, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_K_ppl <- bb(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta, return_matrix = TRUE)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_K_ppl,
method = "Brent", lower = 0, upper = 100)$par,
(b %*% b + sum(diag(solve(my_K_ppl))))/length(b))
})
df <- Reduce(rbind, res) |> as.data.frame(row.names = "")
names(df) = c("optim", "fun")
library(ggplot2)
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value, colour = name)) + geom_boxplot()
df %>%
tidyr::pivot_longer(cols = c("optim", "fun")) %>%
ggplot(aes(value - my_theta, colour = name)) + geom_boxplot()
res <- lapply(1:100, function(i){
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
b <- attr(sample_data, "random_effects")
my_params <- c(my_beta[seq_along(my_X)], b)
my_K_ppl <- bb(parms = my_params, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data,
theta = my_theta, return_matrix = TRUE)
# when D I*theta, then,
c(
optim(par = 0.2, fn = est_theta2, b = b,
K_ppl = my_K_ppl,
method = "Brent", lower = 0, upper = 100)$par,
(b %*% b + sum(diag(solve(my_K_ppl))))/length(b))
})
