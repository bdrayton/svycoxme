data.frame(
true_vals = c(my_theta, my_beta, attr(sample_data, "random_effects")),
coxme = c(coxme::VarCorr(coxme_fit)$M,
coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M),
my_ests = unlist(algo_fit))
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
max_iter = 100
convergence_threshold = 0.000001
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = t,
cluster = "M",
dij = stat,
data = sample_data)
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
# debugonce(estimate_parameters)
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = t,
cluster = "M", dij = stat, data = sample_data)
max_iter = 100
convergence_threshold = 0.000001
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = t,
cluster = "M",
dij = stat,
data = sample_data)
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
beta = c(1, -0.7, 0.5)
my_theta = 1
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
est_theta <- coxme::VarCorr(fit)$M
D = est_theta * diag(my_k)
est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
names(est_parms) <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
t = t, dij = stat, D =  D, data = ds)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat, D =  D, data = ds)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta, data = ds)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
(fit$loglik["Penalized"] - my_loglik) < 1e-10
fit$loglik["Penalized"] - my_loglik
fit$loglik["Penalized"]
my_loglik
fit$penalty == attr(my_loglik, "penalty")
attr(my_loglik, "penalty")
fit$penalty
devtools::load_all(".")
debugonce(lp)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
fit$loglik["Penalized"] - my_loglik
devtools::load_all(".")
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
debugonce(lp)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
debugonce(lp)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
debug(sortAndIndex)
t
sortVars
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
est_theta <- coxme::VarCorr(fit)$M
D = est_theta * diag(my_k)
est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
names(est_parms) <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = my_theta,
data = ds)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = est_theta,
data = ds)
debugonce(lp)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = est_theta,
data = ds)
debugonce(lp)
debugonce(sortAndIndex)
my_loglik <- lp(parms = est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = est_theta,
data = ds)
data %>%
dplyr::arrange(dplyr::across({{ sort_vars }}))
data
data %>% dplyr::arrange(t)
data %>% dplyr::arrange(dplyr::across(t))
devtools::load_all(".")
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
max_iter = 100
convergence_threshold = 0.0001
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 1, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
class(current_estimates)
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
estimate_history
estimate_history[[12]] <- NULL
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 5, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("try-error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
devtools::load_all(".")
b
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
max_iter = 100
convergence_threshold = 0.0001
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
start_parameters
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 4, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
current_estimates
-1:-3
plot(density(current_estimates$new_parms[-1:-3]))
var(current_estimates$new_parms[-1:-3])
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("try-error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
algo_fit <- tail(estimate_history, 1)
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 4, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("try-error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
# get theta estimates
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 4, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("try-error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
# get theta estimates
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 4, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("try-error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
# get theta estimates
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
coxme_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data)
data.frame(
true_vals = c(my_theta, my_beta, attr(sample_data, "random_effects")),
coxme = c(coxme::VarCorr(coxme_fit)$M,
coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M),
my_ests = unlist(algo_fit))
algo_fit <- tail(estimate_history, 1)
algo_fit
data.frame(
true_vals = c(my_theta, my_beta, attr(sample_data, "random_effects")),
coxme = c(coxme::VarCorr(coxme_fit)$M,
coxme::fixef(coxme_fit),
coxme::ranef(coxme_fit)$M),
my_ests = unlist(algo_fit))
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
nb <- dplyr::n_distinct(sample_data$M)
start_parameters = c(coef(fit), rep(0, nb))
names(start_parameters) <- c(my_X, paste0("Z", seq_len(nb)))
current_estimates <- estimate_parameters(start_parms = start_parameters, theta = 4, X = my_X, t = "t",
cluster = "M", dij = stat, data = sample_data)
estimate_history <- list(current_estimates)
for (i in 1:max_iter) {
current_estimates <- try(estimate_parameters(start_parms = current_estimates$new_parms,
theta = current_estimates$new_theta,
X = my_X,
t = "t",
cluster = "M",
dij = stat,
data = sample_data))
if("try-error" %in% class(current_estimates)) {
cat("fit failed on iteration", i)
break
}
estimate_history[[i+1]] <- current_estimates
biggest_diff = max(abs(c(estimate_history[[i]]$new_theta - estimate_history[[i+1]]$new_theta,
estimate_history[[i]]$new_parms - estimate_history[[i+1]]$new_parms)), na.rm = TRUE)
if(biggest_diff <= convergence_threshold){
cat("converged in", i, "iterations")
break
}
}
# get theta estimates
theta_ests <- sapply(estimate_history, "[[", "new_theta")
plot(theta_ests)
library(coxme)
coxme
is.R()
model.frame()
formula <- survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M)
formula
model.frame(formula)
model.frame(formula, data = sample_data)
head(model.frame(coxme:::subbar(formula, data = sample_data)))
head(model.frame(coxme:::subbar(formula), data = sample_data))
head(model.frame(formula, data = sample_data))
head(model.frame(coxme:::subbar(formula), data = sample_data))
coxme
coxme:::formula1(formula)
flist <- coxme:::formula1(formula)
special <- c("strata", "cluster")
special <- c("strata", "cluster")
Terms <- terms(flist$fixed, special)
Terms
attr(Terms, "intercept") <- 1
strats <- attr(Terms, "specials")$strata
cluster <- attr(Terms, "specials")$cluster
if (length(cluster)) {
stop("A cluster() statement is invalid in coxme")
}
untangle.specials
coxme_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + strata(X3) + (1 | M), data = sample_data)
formula <- survival::Surv(t, stat) ~ X1 + X2 + strata(X3) + (1 | M)
head(model.frame(formula, data = sample_data))
head(model.frame(coxme:::subbar(formula), data = sample_data))
flist <- coxme:::formula1(formula)
flist
special <- c("strata", "cluster")
Terms <- terms(flist$fixed, special)
Terms
attr(Terms, "intercept") <- 1
strats <- attr(Terms, "specials")$strata
strats
temp <- untangle.specials(Terms, "strata", 1)
temp
length(temp$vars) == 1
strata.keep <- m[[temp$vars]]
strata.keep
temp$vars
m <- model.frame(coxme:::subbar(formula), data = sample_data)
strata.keep <- m[[temp$vars]]
strata.keep
strata(m[, temp$vars], shortlabel = T)
strats <- as.numeric(strata.keep)
strats
X <- model.matrix(Terms[-temp$terms], m)[, -1, drop = F]
X
model.matrix(Terms, m)[, -1, drop = F]
length(flist$random)
# check the random effects. must be >0
nrandom <- length(flist$random)
nrandom
vector("list", nrandom)
vparm <- vector("list", nrandom)
is.variance <- rep(TRUE, nrandom)
ismat <- function(x) {
inherits(x, c("matrix", "bdsmatrix", "Matrix"),
which = FALSE)
}
if (missing(varlist) || is.null(varlist)) {
varlist <- vector("list", nrandom)
for (i in 1:nrandom) varlist[[i]] <- coxmeFull()
}
integer(nrandom)
coxmeFull()
ismat
coxme::formula2(flist$random[[1]])
coxme:::formula2(flist$random[[1]])
coxme.fit
coxme:::coxme.fit
