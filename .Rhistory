data_with_events <- rbind.data.frame(data_with_events, subject_data_with_events)
}
# lets see where we're at at this point.
return(data_with_events)
}
t_follow_up_starts = 0
t_follow_up_ends = 10
t_change = runif(4, min = t_follow_up_starts, max = t_follow_up_ends/4) |> cumsum()
my_data = data.frame(t_start = c(0, t_change),
t_end = c(t_change, t_follow_up_ends),
X1 = rbinom(5, size = 1, prob = 0.5))
my_data$id = 1
my_data
draw_event_times(survival::Surv(t_start, t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = 0.5, t=0 , origin = 0, id = id, event = "single", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = 0.5, t=0 , origin = 0, id = id, event = "recurrent", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = 0.1, t=0 , origin = 0, id = id, event = "recurrent", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = 0.1, t=0 , origin = 0, id = id, event = "recurrent", end_of_follow_up = 10)
t_follow_up_starts = 0
t_follow_up_ends = 10
n_subject = 20
my_data = data.frame(id = rep(1:20, each = 5))
library(dplyr)
my_data <- my_data %>%
group_by(id) %>%
mutate(t_change = runif(n(), min = t_follow_up_starts, max = t_follow_up_ends/n()) |> cumsum()) %>%
mutate(t_start = lag(t_change, default = t_follow_up_starts),
t_end = lead(t_start, default = t_follow_up_ends),
X1 = rbinom(n(), size=1, prob = 0.5)) %>%
ungroup() %>% data.frame()
draw_event_times(survival::Surv(t_start, t_end, stat) ~ X1 + (1|id), data = my_data, coefficients = c(X1 = 1.1),
random_effect_variance = list(id = 1),
baseline_hazard = bh, t=bh_t , origin = 0, id = id, event = "single", end_of_follow_up = 10)
bh = c(1/(10:1))
bh_t = 0:9
draw_event_times(survival::Surv(t_start, t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = bh, t=bh_t , origin = 0, id = id, event = "single", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = bh, t=bh_t , origin = 0, id = id, event = "single", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_start, t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = bh, t=bh_t , origin = 0, id = id, event = "recurrent", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_end, stat) ~ X1, data = my_data, coefficients = c(X1 = 1.1),
baseline_hazard = bh, t=bh_t , origin = 0, id = id, event = "recurrent", end_of_follow_up = 10)
draw_event_times(survival::Surv(t_start, t_end, stat) ~ X1 + (1|id), data = my_data, coefficients = c(X1 = 1.1),
random_effect_variance = list(id = 1),
baseline_hazard = bh, t=bh_t , origin = 0, id = id, event = "single", end_of_follow_up = 10)
param_combos <-
expand.grid(sample_size = c(500),
n_clusters_in_sample = 10:200,
n_clusters = 5000,
theta = c(0.0001, 0.5, 1, 2)) %>%
dplyr::mutate(cluster_size = sample_size/n_clusters_in_sample,
int_part = as.integer(cluster_size),
decimal_part = cluster_size - int_part) %>%
dplyr::arrange(theta, int_part, decimal_part) %>%
dplyr::group_by(theta, sample_size, int_part) %>%
dplyr::filter(dplyr::row_number() == 1) %>%
dplyr::select(n_clusters, theta, n_clusters_in_sample, cluster_size = int_part, sample_size) %>%
dplyr::ungroup() %>% data.frame()
nrow(param_combos)
log(4)
?estfun
methods(estfun)
methods(generics::estfun)
generics::estfun
hccm
??hccm
ids <- rep(1L:10L, each = 2)
ids
devtools::load_all(".")
C_draw_event_times(ids)
C_draw_event_times(ids)
ids <- rep(1L:10L, each = 2)
C_draw_event_times(ids)
devtools::load_all(".")
C_draw_event_times(ids)
ids <- rep(10L:1L, each = 2)
C_draw_event_times(ids)
devtools::load_all(".")
C_draw_event_times(ids)
devtools::load_all(".")
C_draw_event_times(ids)
devtools::load_all(".")
t_follow_up_starts = 0
t_follow_up_ends = 10
# get some change points, and generate X1 and X2.
n = 200
n_changes = 3
n_obs = n_changes + 1
t_change <- matrix(runif(n_changes * n, min = t_follow_up_starts, max = t_follow_up_ends/n_changes), nrow = n_changes, ncol = n)
changes <- matrixStats::colCumsums(t_change)
starts = rbind(matrix(0, nrow = 1, ncol = n), changes) |> as.vector()
ends = rbind(changes, matrix(t_follow_up_ends, nrow = 1, ncol = n)) |> as.vector()
# X1 - cumulative exposure
X1 <-  matrix(rnorm(n_obs * n) |> abs(), nrow = n_obs, ncol = n) |>
matrixStats::colCumsums() |> as.vector()
my_data = data.frame(id = rep(seq(n), each = n_obs),
t_start = starts,
t_end = ends,
X1 = X1,
X2 = rbinom(n * n_obs, size = 1, prob = 0.5))
#
# event_times <- draw_event_times(survival::Surv(t_start, t_end, stat) ~ X1 + X2 + (1 | id),
#                                 data = my_data, coefficients = c(X1 = 1, X2 = -1),
#                                 random_effect_variance = list(id = 1),
#                                 baseline_hazard = 0.2, t=0 , origin = 0, id = id, event = "recurrent",
#                                 end_of_follow_up = t_follow_up_ends)
#
#
#
X <- as.matrix(my_data[c("X1", "X2")])
head(my_data)
C_draw_event_times(id = my_data$id, start_time = my_data$t_start, end_time = my_data$t_end,
status = integer(length = nrow(my_data)),  X = X, risk_score = rnorm(nrow(my_data)),
baseline_hazard = 0, baseline_hazard_start = 0, baseline_hazard_end = 10,
end_of_follow_up = 10, origin = 0)
C_draw_event_times(id = my_data$id, start_time = my_data$t_start, end_time = my_data$t_end,
status = integer(length = nrow(my_data)),  X = X, risk_score = rnorm(nrow(my_data)),
baseline_hazard = 0.5, baseline_hazard_start = 0, baseline_hazard_end = 10,
end_of_follow_up = 10, origin = 0)
C_draw_event_times(id = my_data$id, start_time = my_data$t_start, end_time = my_data$t_end,
status = integer(length = nrow(my_data)),  X = X, risk_score = rnorm(nrow(my_data)),
baseline_hazard = c(0.5,0.5), baseline_hazard_start = c(0, 2), baseline_hazard_end = 10,
end_of_follow_up = 10, origin = 0)
C_draw_event_times(id = my_data$id, start_time = my_data$t_start, end_time = my_data$t_end,
status = integer(length = nrow(my_data)),  X = X, risk_score = rnorm(nrow(my_data)),
baseline_hazard = c(0.5,0.5), baseline_hazard_start = c(0, 2), baseline_hazard_end = 10,
end_of_follow_up = 10, origin = 0)
rpexp
msm::rpexp
rate = 0.5
tail(rate, 1)
rate = c(0.5, 0.4, 0.3)
rate = c(0.5, 0.4, 0.3)
start = 0
t = c(0, 1, 2)
length(start) == 1
start > min(t)
start = 1
index <- which(t > start)
index
t <- c(start, t[index])
t
index[1] - 1
index
rate[c(index[1] - 1, index)]
rate = c(0.5, 0.4, 0.3)
start = 0
t = c(0, 1, 2)
H
diff(t)
head(rate, -1) * diff(t)
head(rate, -1)
cumsum(head(rate, -1) * diff(t))
t = c(0, 1, 3)
diff(t)
c(0, cumsum(head(rate, -1) * diff(t)))
stats::rexp(n)
n = 1
stats::rexp(n)
findInterval(e, H)
H <- c(0, cumsum(head(rate, -1) * diff(t)))
findInterval(e, H)
e <- stats::rexp(n)
findInterval(e, H)
i
i <- findInterval(e, H)
t[i]
e
H[i]
i
t[i] + (e - H[i])/rate[i]
t = 1:5
diff(t)
diff
diff.default
diff(c(5, 3, 3, 1))
rate
head(rate, -1)
base::findInterval()
base::findInterval
debugonce(msm::rpexp)
msm::rpexp(n = 2, rate = c(0.5, 0.1, 0.2), t=c(0, 0.2, 1), start = 0)
H
e
i
H
findInterval(c(0, 0.25, 0.7, 1.5), H)
vignette(package = "rcpp")
vignette(package = "Rcpp")
vignette("Rcpp-package", package = "Rcpp")
vignette("Rcpp-intro", package = "Rcpp")
vignette("Rcpp-introduction", package = "Rcpp")
library("Rcpp")
cppFunction("
bool isOddCpp(int num = 10) {
bool result = (num % 2 == 1);
return result;
}")
isOddCpp(42L)
cppFunction("
NumericVector isOddCpp(int n = 10) {
NumericVector result = Rcpp::rexp(n);
return result;
}")
isOddCpp()
cppFunction("
NumericVector isOddCpp(int n = 10) {
NumericVector result = Rcpp::rexp(n, rate = 1.0);
return result;
}")
cppFunction("
NumericVector isOddCpp(int n = 10) {
NumericVector result = Rcpp::rexp(n, 1.0);
return result;
}")
isOddCpp()
cppFunction("
NumericVector isOddCpp(int n = 10, rate) {
NumericVector result = Rcpp::rexp(n, 1.0);
return result;
}")
cppFunction("
NumericVector isOddCpp(int n = 10, double rate) {
NumericVector result = Rcpp::rexp(n, rate);
return result;
}")
isOddCpp(5, 2)
Rcpp::rexp
cppFunction("
NumericVector isOddCpp(int n = 10, double r) {
NumericVector result = Rcpp::rexp(n, rate = r);
return result;
}")
cppFunction("
NumericVector C_rexp(int n = 10, double r) {
NumericVector result (n);
for(int i = 0; i <n; i++) {
result[i] = R::rexp(1/rate);
}
return result;
}")
cppFunction("
NumericVector C_rexp(int n = 10, double rate) {
NumericVector result (n);
for(int i = 0; i <n; i++) {
result[i] = R::rexp(1/rate);
}
return result;
}")
cppFunction("
NumericVector C_rexp(int n = 10, double rate = 1.0) {
NumericVector result (n);
for(int i = 0; i <n; i++) {
result[i] = R::rexp(1/rate);
}
return result;
}")
C_rexp(5, 2)
C_rexp(5)
C_rexp(5)
cppFunction("
NumericVector C_rexp2(int n = 10) {
NumericVector result = Rcpp::rexp(n);
return result;
}")
C_rexp2(5)
C_rexp(5)
microbenchmark::microbenchmark(
C_rexp(5),
C_rexp2(5)
)
microbenchmark::microbenchmark(
C_rexp(5),
C_rexp2(5)
)
set.seed(1)
C_rexp(5)
set.seed(1)
C_rexp2(5)
msm::rpexp
devtools::load_all(".")
C_rpexp(n = 10,rate = 1 ,t = 0,start = 0)
set.seed(1)
C_rpexp(n = 10,rate = 1 ,t = 0,start = 0)
set.seed(1)
msm::rpexp(n = 10,rate = 1 ,t = 0,start = 0)
set.seed(1)
C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
C_rpexp(n = 10,rate = 2 ,t = 0,start = 0)
set.seed(1)
msm::rpexp(n = 10,rate = 2 ,t = 0,start = 0)
devtools::load_all(".")
set.seed(1)
C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
devtools::load_all(".")
set.seed(1)
C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
set.seed(1)
b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0)
all.equal(a, b)
head(1:3, -1)
rate = c(0.1, 0.5)
t = c(0,1)
for (i in 1) {
diff_t = t[i+1] - t[i]
H_temp = rate[i] + H[i]*diff_t
H = c(H, H_temp)
}
H
rate = c(0.1, 0.5)
t = c(0,1)
H = 0
for (i in 1) {
diff_t = t[i+1] - t[i]
H_temp = rate[i] + H[i]*diff_t
H = c(H, H_temp)
}
H
c(0, cumsum(head(rate, -1) * diff(t)))
H
rate = c(0.1, 0.5, 0.2)
t = c(0,1, 4)
H = 0
for (i in 1) {
diff_t = t[i+1] - t[i]
H_temp = rate[i] + H[i]*diff_t
H = c(H, H_temp)
}
c(0, cumsum(head(rate, -1) * diff(t)))
H
rate = c(0.1, 0.5, 0.2)
t = c(0,1, 4)
H = 0
for (i in seq_len(length(rate)-1)) {
diff_t = t[i+1] - t[i]
H_temp = rate[i] + H[i]*diff_t
H = c(H, H_temp)
}
c(0, cumsum(head(rate, -1) * diff(t)))
H
cumsum(head(rate, -1)
head(rate, -1)
head(rate, -1)
rate = c(0.1, 0.5, 0.2)
t = c(0,1, 4)
H = 0
for (i in seq_len(length(rate)-1)) {
diff_t = t[i+1] - t[i]
H_temp = H[i] + rate[i] * diff_t
H = c(H, H_temp)
}
c(0, cumsum(head(rate, -1) * diff(t)))
H
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
all.equal(a, b)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
H
e = rexp(5);
e
for (i in seq_along(e)) {
for (j in seq_along(H)) {
if(e[i]>=H[j]){
random_draw[i] = t[j] + (e[i] - H[j])/rate[j];
break;
}
}
}
random_draw = double(5)
for (i in seq_along(e)) {
for (j in seq_along(H)) {
if(e[i]>=H[j]){
random_draw[i] = t[j] + (e[i] - H[j])/rate[j];
break;
}
}
}
random_draw
i <- findInterval(e, H)
t[i] + (e - H[i])/rate[i]
e1 <- e[1]
e1
e1 >= H
i
for (i in seq_along(e)) {
for (j in rev(seq_along(H))) {
if(e[i]>=H[j]){
random_draw[i] = t[j] + (e[i] - H[j])/rate[j];
break;
}
}
}
t[i] + (e - H[i])/rate[i]
random_draw
i <- findInterval(e, H)
t[i] + (e - H[i])/rate[i]
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
all.equal(a, b)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
e = rexp(5)
random_draw = double(5)
for (i in seq_along(e)) {
for (j in rev(seq_along(H))) {
if(e[i]>=H[j]){
random_draw[i] = t[j] + (e[i] - H[j])/rate[j];
break;
}
}
}
i <- findInterval(e, H)
t[i] + (e - H[i])/rate[i]
random_draw
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
all.equal(a, b)
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
all.equal(a, b)
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
devtools::load_all(".")
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
debugonce(msm::rpexp)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
devtools::load_all(".")
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5) ,t = c(0,1),start = 0))
all.equal(a, b)
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 0))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 0))
all.equal(a, b)
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 1))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 1))
all.equal(a, b)
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2))
all.equal(a, b)
devtools::load_all(".")
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2))
all.equal(a, b)
set.seed(1)
(a = C_rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2))
set.seed(1)
(b = msm::rpexp(n = 10,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2))
all.equal(a, b)
set.seed(1)
a = C_rpexp(n = 100,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2)
set.seed(1)
b = msm::rpexp(n = 100,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2)
all.equal(a, b)
microbenchmark::microbenchmark(
C_rpexp(n = 100,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2),
msm::rpexp(n = 100,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2)
)
microbenchmark::microbenchmark(
C_rpexp(n = 1000,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2),
msm::rpexp(n = 1000,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2)
)
microbenchmark::microbenchmark(
C_rpexp(n = 1000,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2),
msm::rpexp(n = 1000,rate = c(0.1, 0.5, 0.2) ,t = c(0,1,5),start = 2)
)
