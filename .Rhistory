list(rep = i, k = my_k, nk = my_nk, beta = my_beta, theta = my_theta, X = my_X, start_theta = 1)
})
parCombos
parCombos[[1]]
onerep(parCombos[[1]])
cl <- parallel::makeCluster(parallel::detectCores()-1)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
})
fits <- parallel::parLapply(cl, parCombos, onerep)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep", "my_k", "my_nk", "my_beta", "my_theta", "my_X"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
})
fits <- parallel::parLapply(cl, parCombos, onerep)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep", "my_k", "my_nk", "my_beta", "my_theta", "my_X", "max_iter", "convergence_threshold"))
parCombos <- lapply(1:3, function(i){
list(rep = i, k = my_k, nk = my_nk, beta = my_beta, theta = my_theta, X = my_X, start_theta = 1)
})
cl <- parallel::makeCluster(parallel::detectCores()-1)
# put objects in place that might be needed for the code
parallel::clusterExport(cl, c("onerep", "my_k", "my_nk", "my_beta", "my_theta", "my_X", "max_iter", "convergence_threshold"))
# Set a different seed on each member of the cluster (just in case)
parallel::clusterSetRNGStream(cl)
parallel::clusterEvalQ(cl, {
devtools::load_all(path = "C:/Users/Bradley/Documents/PhD_local/svycoxme")
})
fits <- parallel::parLapply(cl, parCombos, onerep)
#stop the cluster
parallel::stopCluster(cl)
fits_df = purrr::reduce(fits, dplyr::bind_rows)
fits_df
getwd()
res <- readr::read_rds("C:/Users/Bradley/OneDrive - The University of Auckland/PhD/outputs/simulations/data/var_of_re vs coxme theta est.rds")
head(res)
library(ggplot2)
library(dplyr)
res %>%
summarise(mean(var_theta),
mean(coxme_theta))
ggplot(res, aes(var_theta)) + geom_density() +
geom_density(aes(coxme_theta))
res %>%
tidyr::pivot_longer(cols c("var_theta", "coxme_theta"))
res %>%
tidyr::pivot_longer(cols = c("var_theta", "coxme_theta"))
res %>%
tidyr::pivot_longer(cols = c("var_theta", "coxme_theta")) %>%
ggplot(aes(value, group = name)) + geom_density()
res %>%
tidyr::pivot_longer(cols = c("var_theta", "coxme_theta")) %>%
ggplot(aes(value, colour = name)) + geom_density()
devtools::load_all(".")
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
max_iter = 100
convergence_threshold = 0.0001
my_X = c("X1", "X2", "X3")
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
library(coxme)
debugonce(coxmeFull)
coxme_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + strata(X3) + (1 | M), data = sample_data)
debugonce(coxme)
coxme_fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + strata(X3) + (1 | M), data = sample_data)
varlist
ifun
i
vparm
itheta
exp(itheta)
lop(itheta)
log(itheta)
exp(itheta$M)
f2$intercept
fmat
debug(coxme.fit)
itemp
offset
fit0
?coxph:::coxfitfun
?coxmu:::coxfitfun
?coxme:::coxfitfun
means
testvals
logpar
theta
theta
control$optpar
logfun
temp$theta
library(bdsmatrix)
library(bdsmatrix)
library(coxme)
devtools::load_all(".")
my_k = 10
my_nk = 10
my_beta = c(1, -0.7, 0.5)
my_theta = 1
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
library(bdsmatrix)
library(coxme)
my_k = 10
my_nk = 10
my_beta = c(1, -0.7, 0.5)
my_theta = 1
sample_data <- one_dataset(control = list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
D = my_theta * diag(my_k)
fit <- survival::coxph(survival::Surv(t, stat) ~ X1 + X2 + X3, data = sample_data)
start_parameters = c(coef(fit), rep(0, my_k))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(k)))
names(start_parameters) <- c(paste0("X", 1:3), paste0("Z", seq_len(my_k)))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = theta))
fit_coxme <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1 | M), data = sample_data,
vfixed = list(M = my_theta))
fit_coxme$u
estimated_fixef <- fixef(fit_coxme)
estimated_ranef <- ranef(fit_coxme)
estimated_theta <- VarCorr(fit_coxme)$M
estimated_theta
estimated_fixef <- fixef(fit_coxme)
estimated_ranef <- ranef(fit_coxme)
estimated_fixef
estimated_ranef
estimated_ranef <- ranef(fit_coxme)$M
lp(parms = c(estimated_fixef, estimated_ranef),
X = c("X1", "X2", "X3"),
t = t,
dij = stat,
theta = estimated_theta,
cluster = "M",
data = sample_data)
logLik(fit_coxme)
fit_coxme$loglik
fit_coxme$loglik["Penalized"]
fit_coxme$penalty
lp(parms = c(estimated_fixef, estimated_ranef),
X = c("X1", "X2", "X3"),
t = t,
dij = stat,
theta = estimated_theta,
cluster = "M",
data = sample_data)
fit_coxme$loglik["Penalized"]
fit_coxme$penalty
lp_grd(parms = c(estimated_fixef, estimated_ranef),
X = c("X1", "X2", "X3"),
t = t,
dij = stat,
theta = estimated_theta,
cluster = "M",
data = sample_data)
estimated_ranef
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
names(coxme_est_parms) <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = coxme_est_theta,
data = ds)
fit$loglik["Penalized"] - my_loglik
fit$penalty - attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
cbind(my_u[order(my_u)], fit$u[order(fit$u)])
tibble::tibble(my_u = my_u[order(my_u)],
coxme_u = fit$u[order(fit$u)],
my_u - coxme_u)
tibble::tibble(my_u = my_u[order(my_u)],
coxme_u = fit$u[order(fit$u)],
difference = my_u - coxme_u)
svycoxme::ppl_hessian(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
gradients <- tibble::tibble(cluster = 1:10[order(my_u)],
my_u = my_u[order(my_u)],
coxme_u = fit$u[order(fit$u)],
difference = my_u - coxme_u)
my_u
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
gradients <- tibble::tibble(parm = parm_names[order(my_u)],
my_u = my_u[order(my_u)],
coxme_u = fit$u[order(fit$u)],
difference = my_u - coxme_u)
gradients
tibble(
coxme_u = fit$u,
coxme_u_order = 1:n()
)
tibble::tibble(
coxme_u = fit$u,
coxme_u_order = 1:n()
)
tibble::tibble(
coxme_u = fit$u,
coxme_u_order = 1:dplyr::n()
)
tibble::tibble(
coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)
)
tibble::tibble(
coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
fit$u[order(fit$u)]
tibble::tibble(parm = parm_names,
my_u = my_u)
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u
)
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = coxme_est_theta,
data = ds)
fit$loglik["Penalized"] - my_loglik
fit$penalty - attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
pull(parm)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
dplyr::pull(parm)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 50
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = coxme_est_theta,
data = ds)
fit$loglik["Penalized"] - my_loglik
fit$penalty - attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
my_beta = c(1, -0.7, 0.5)
my_theta = 1
my_k = 10
my_nk = 10
ds <- one_dataset(list(k = my_k, nk = my_nk, beta = my_beta, theta = my_theta))
fit <- coxme::coxme(survival::Surv(t, stat) ~ X1 + X2 + X3 + (1|M), data = ds)
coxme_est_theta <- coxme::VarCorr(fit)$M
coxme_est_parms <- c(coxme::fixef(fit), coxme::ranef(fit)$M)
parm_names <- paste0(rep(c("X", "Z"), c(3, my_k)), c(1:3, seq_len(my_k)))
names(coxme_est_parms) <- parm_names
my_loglik <- lp(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t, dij = stat,
theta = coxme_est_theta,
data = ds)
fit$loglik["Penalized"] - my_loglik
fit$penalty - attr(my_loglik, "penalty")
my_u <- lp_grd(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
ordered_coxme_u <-
tibble::tibble(coxme_u = fit$u,
coxme_u_order = seq_along(coxme_u)) %>%
dplyr::arrange(coxme_u)
ordered_my_u <-
tibble::tibble(parm = parm_names,
my_u = my_u) %>%
dplyr::arrange(my_u)
# it looks like the only reordering is to put the fixed effects after the random effects.
dplyr::bind_cols(
ordered_coxme_u,
ordered_my_u) %>%
dplyr::arrange( coxme_u_order) %>%
dplyr::pull(parm)
my_hessian <- svycoxme::ppl_hessian(parms = coxme_est_parms,
X = c("X1", "X2", "X3"),
cluster = "M",
t = t,
dij = stat,
theta = coxme_est_theta,
data = ds)
my_hessian
names(my_hessian)
colnames(my_hessian)
seq_len(my_k)
seq_len(my_k) + 3
reordered_names <- colnames(my_hessian)[c(seq_len(my_k) + 3, 1:3)]
reordered_names
my_hessian[reordered_names]
my_hessian[reordered_names, reordered_names]
reordered_names <- colnames(my_hessian)[c(seq_len(my_k) + 3, 1:3)]
reoredered_hessian <- my_hessian[reordered_names, reordered_names]
gchol(reoredered_hessian)
reord_hessian <- my_hessian[reordered_names, reordered_names]
gchol_reord_hessian <- gchol(reord_hessian)
fit_coxme$hmat
?gchol
gchol_my_hessian <- gchol(my_hessian)
gchol_my_hessian
as.matrix(fit_coxme$hmat)
L <- as.matrix(fit_coxme$hmat)
D <- diag(fit_coxme$hmat)
D
all(sign(D) == 1)
L %*% D %*% t(L)
L <- as.matrix(fit_coxme$hmat)
D <- diag(fit_coxme$hmat)
L %*% D %*% t(L)
L %*% D
t(L)
L %*% diag(D) %*% t(L)
reoredered_hessian
reoredered_hessian
gchol_reord_hessian <- gchol(reord_hessian)
L <- as.matrix(gchol_reord_hessian)
D <- diag(gchol_reord_hessian)
L %*% diag(D) %*% t(L)
reord_hessian
L %*% diag(D) %*% t(L) - reord_hessian
.Machine$double.neg.eps
(L %*% diag(D) %*% t(L) - reord_hessian) <.Machine$double.neg.eps
(L %*% diag(D) %*% t(L) - reord_hessian) <.Machine$double.neg.eps/2
(L %*% diag(D) %*% t(L) - reord_hessian) <(.Machine$double.neg.eps*2)
(L %*% diag(D) %*% t(L) - reord_hessian) <(.Machine$double.neg.eps*10)
(L %*% diag(D) %*% t(L) - reord_hessian) <(.Machine$double.neg.eps*100)
.Machine$double.neg.eps*100
L <- as.matrix(gchol_reord_hessian)
D <- diag(gchol_reord_hessian)
(L %*% diag(D) %*% t(L) - reord_hessian) <(.Machine$double.neg.eps*100)
L <- as.matrix(fit_coxme$hmat)
D <- diag(fit_coxme$hmat)
L %*% diag(D) %*% t(L)
back_trans_hmat <- L %*% diag(D) %*% t(L)
L <- as.matrix(fit_coxme$hmat)
D <- diag(fit_coxme$hmat)
back_trans_hmat <- L %*% diag(D) %*% t(L)
back_trans_hmat - reord_hessian
back_trans_hmat + reord_hessian
back_trans_hmat <- L %*% diag(D) %*% t(L)
L <- as.matrix(fit_coxme$hmat)
D <- diag(fit_coxme$hmat)
back_trans_hmat <- L %*% diag(D) %*% t(L)
solve(back_trans_hmat)
diag(solve(back_trans_hmat))
fit_coxme$variance
fit_coxme$variance == solve(back_trans_hmat)
fit_coxme$variance - solve(back_trans_hmat)
L <- as.matrix(fit_coxme$hmat)
D <- diag(fit_coxme$hmat)
back_trans_hmat <- L %*% diag(D) %*% t(L)
back_trans_hmat + (-1 * reord_hessian)
back_trans_hmat - (-1 * reord_hessian)
fit_coxme$scale
fit_coxme$means
fit_coxme$variance - solve(back_trans_hmat)
solve(fit_coxme$hmat)
hmat_inv <- solve(fit_coxme$hmat)
L <- as.matrix(hmat_inv)
D <- diag(hmat_inv)
back_trans_hmat_inv <- L %*% diag(D) %*% t(L)
fit_coxme$variance - back_trans_hmat_inv
class(hmat_inv)
hmat_inv <- solve(fit_coxme$hmat)
L <- as.matrix(hmat_inv)
D <- diag(hmat_inv)
back_trans_hmat_inv <- L %*% diag(D) %*% t(L)
back_trans_hmat_inv
t(L)
diag(D)
diag(fit_coxme$variance)
fit_coxme$variance - back_trans_hmat_inv
diag(fit_coxme$variance)
D
L
hmat_inv <- solve(fit_coxme$hmat, full = TRUE)
L <- as.matrix(hmat_inv)
D <- diag(hmat_inv)
back_trans_hmat_inv <- L %*% diag(D) %*% t(L)
fit_coxme$variance - back_trans_hmat_inv
fit_coxme$variance - hmat_inv
hmat_inv <- solve(fit_coxme$hmat, full = TRUE)
fit_coxme$variance - hmat_inv
all.equal(fit_coxme$variance, hmat_inv)
diag(reord_hessian)
diag(fit_coxme$variance)
solve(reord_hessian)
-solve(reord_hessian)
diag(solve(-reord_hessian))
diag(fit_coxme$variance)
cbind(
myvar = diag(solve(-reord_hessian)),
coxmevar =diag(fit_coxme$variance))
vcov(fit_coxme)
my_hessian[1:3, 1:3]
solve(my_hessian[1:3, 1:3])
solve(-my_hessian[1:3, 1:3])
solve(my_hessian)
solve(-my_hessian)
diag(solve(-my_hessian))
vcov(fit_coxme)
solve(-my_hessian)[1:3, 1:3]
